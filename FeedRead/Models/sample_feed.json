[{"feedDescription":"","feedArticles":[{"title":"Clips gets its biggest update ever","content":"With Clips 3.0, Apple’s video creation app brings features that make it easier than ever to create multiclip videos for iPhone or iPad.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/clips-gets-its-biggest-update-ever\/","date":625620017.88800001},{"title":"iPhone 12, iPhone 12 Pro, and iPad Air are here","content":"iPhone 12 and iPhone 12 Pro with 5G go on sale, ushering in a new era for iPhone. The all-new iPad Air is also available today.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/iphone-12-iphone-12-pro-and-ipad-air-are-here\/","date":625200176.37700009},{"title":"Apple offers new ways to shop for iPhone 12, iPhone 12 Pro, and iPad Air","content":"Tailored purchase experiences offered online, by phone, or in store give customers more ways to purchase the all-new iPhone and iPad on October 23.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/apple-offers-new-ways-to-shop-for-iphone-12-iphone-12-pro-and-ipad-air\/","date":625002205.1329999},{"title":"All-new iPad Air with advanced A14 Bionic chip available to order starting today","content":"The most powerful, versatile, and colourful iPad Air ever is ready to order today, with availability beginning Friday, 23 October.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/all-new-ipad-air-with-advanced-a14-bionic-chip-available-to-order-starting-today\/","date":624542531.41799998},{"title":"Apple introduces iPhone 12 Pro and iPhone 12 Pro Max with 5G","content":"Apple today announced iPhone 12 Pro and iPhone 12 Pro Max, features 5G and advanced technologies for users who want the most out of iPhone.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/apple-introduces-iphone-12-pro-and-iphone-12-pro-max-with-5g\/","date":624307844.01699996},{"title":"Apple announces iPhone 12 and iPhone 12 mini: A new era for iPhone with 5G","content":"Apple unveiled iPhone 12 and iPhone 12 mini with 5G technology, ushering in a new era for the world’s best smartphone.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/apple-announces-iphone-12-and-iphone-12-mini-a-new-era-for-iphone-with-5g\/","date":624306079.34200001},{"title":"Apple introduces HomePod mini: A powerful smart speaker with amazing sound","content":"Apple today unveiled HomePod mini, the latest HomePod speaker that delivers amazing sound, an intelligent assistant, and a smart home hub.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/apple-introduces-homepod-mini-a-powerful-smart-speaker-with-amazing-sound\/","date":624304055.87199998},{"title":"Apple and Gallaudet University foster innovation in education","content":"In collaboration with Apple, students and faculty received a new iPad Pro, Apple Pencil, and Smart Keyboard Folio in welcome kits for the US fall season.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/10\/apple-and-gallaudet-university-foster-innovation-in-education\/","date":623858526.88599992},{"title":"Apple brings online store to India 23 September","content":"Apple brings the premium experience of its stores worldwide to customers in India with the launch of the Apple Store online.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-brings-online-store-to-india-september-23\/","date":622085799.39499998},{"title":"iOS 14 is available today","content":"iOS 14 reimagines the iPhone experience, delivering a major update to the Home Screen, widgets, and App Clips.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/ios-14-is-available-today\/","date":621994642.19899988},{"title":"New Apple Watch and iPad features enable wellness, fitness, and creativity","content":"New iPad and Apple Watch models bring significant developments in health and wellness features to Apple Watch, iPhone, iPad, and Apple TV.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/new-apple-watch-and-ipad-features-enable-wellness-fitness-and-creativity\/","date":621994444.67799997},{"title":"Apple unveils all-new iPad Air with A14 Bionic, Apple’s most advanced chip","content":"Apple today introduced an all-new iPad Air — the most powerful, versatile, and colourful iPad Air ever.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-unveils-all-new-ipad-air-with-a14-bionic-apples-most-advanced-chip\/","date":621933765.71600008},{"title":"Apple introduces eighth-generation iPad with a huge jump in performance","content":"The eighth-generation iPad, features the powerful A12 Bionic chip that brings the Neural Engine to the entry iPad for the first time.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-introduces-eighth-generation-ipad-with-a-huge-jump-in-performance\/","date":621933424.96799994},{"title":"Apple One makes enjoying Apple subscription services easier than ever","content":"Apple today announced Apple One, which offers the easiest way to get all of Apple’s subscription services at a great value.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-one-makes-enjoying-apple-subscription-services-easier-than-ever\/","date":621933109.48399997},{"title":"Apple Fitness+: A new engaging and personalised fitness experience comes to life with Apple Watch","content":"Apple today unveiled Fitness+, the first fitness experience built for Apple Watch, arriving later this year.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-fitness-plus-a-personalized-fitness-experience-comes-to-life-with-apple-watch\/","date":621932726.76399994},{"title":"Apple Watch SE: The ultimate combination of design, function, and value","content":"Apple today announced Apple Watch SE, combining the key advancements of Apple Watch and a design customers love with a new, more affordable price.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-watch-se-the-ultimate-combination-of-design-function-and-value\/","date":621907668.28800011},{"title":"Apple Watch Series 6 delivers breakthrough wellness and fitness capabilities","content":"Apple today announced Apple Watch Series 6, featuring a Blood Oxygen sensor and app, new case finishes, with watchOS 7, and more.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-watch-series-6-delivers-breakthrough-wellness-and-fitness-capabilities\/","date":621895706.52399993},{"title":"Apple Marina Bay Sands opens Thursday in Singapore","content":"Apple today previewed Apple Marina Bay Sands, the first Apple Store to sit directly on the water.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-marina-bay-sands-opens-thursday-in-singapore\/","date":621233757.18600011},{"title":"Apple expands renewable energy footprint in Europe","content":"Apple today announced it will invest in the construction of two of the world’s largest onshore wind turbines in Esbjerg, Denmark.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/apple-expands-renewable-energy-footprint-in-europe\/","date":620823725.16400003},{"title":"Sowing new seeds: Dallas science teacher brings students closer to nature with iPad","content":"Apple Distinguished Educator Jodie Deinhammer uses iPad to bring gardening to life for eighth graders in Dallas, Texas.","url":"https:\/\/www.apple.com\/au\/newsroom\/2020\/09\/sowing-new-seeds-dallas-science-teacher-brings-students-closer-to-nature-with-ipad\/","date":620777814.68700004}],"feedTitle":"Apple Newsroom","feedUrl":"https:\/\/www.apple.com\/au\/newsroom\/rss-feed.rss","feedDate":625620017.88800001},{"feedDescription":"Recent content on TrozWare","feedArticles":[{"title":"SwiftUI for Mac on Big Sur","content":"<p>In December 2019, I wrote a <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-1\/\">series of articles about using SwiftUI to build a Mac app<\/a>. At WWDC 2020, Apple announced macOS 11 Big Sur along with Xcode 12 and a heap of new features for SwiftUI, so I decided to try creating my test app again and seeing how much had changed.<\/p>\n<p>You can read the earlier articles and if you are interested, <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\">download the previous project from GitHub<\/a>. Usually, when revisiting an old app, I would update the existing project, but this time I want to use the new SwiftUI App so I am going to start from scratch with a new app project, copying in code as required. And I plan to follow the same basic thread as I did in the previous articles. Who knows haw many parts this one will have!<\/p>\n<p>For reference, I am running the beta of macOS 11 Big Sur (20A4299v) and the beta of Xcode 12 (12A6159) on a rather aged MacBook with a dodgy battery. I do not have Xcode 12 installed on my Catalina Mac, so I have no way of telling whether some of the oddities are due to Xcode or Big Sur but I will try to keep this article updated as the new betas improve things.<\/p>\n<hr>\n<p><strong>Update:<\/strong> I have downloaded macOS Big Sur beta 2 (20A4300b) and Xcode 12 beta 2, oddly labelled in the About box as 11.5 (11E608c). I have only found one thing that needs to be changed. I had set the deployment target to 11.0 but the new Xcode does not allow this as an option and the app fails to build. Change the deployment target to 10.16 to make it work.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Xcode_b2_error.png\" alt=\"Xcode 12 beta 6 error\"><\/p>\n<p>It looks like Apple is having some problems with consistency in the new version numbers in both macOS and Xcode.<\/p>\n<hr>\n<h2 id=\"the-new-project\">The New Project<\/h2>\n<p>As before, the first step was to create a new project in Xcode. I chose the macOS App template although the Multiplatform option was intriguing. When setting the options for the new app, I chose SwiftUI for the Interface, SwiftUI App for the Life Cycle and Swift (of course) for the language.<\/p>\n<p>Once I had selected a save location and the project was open, I checked out the file structure. The main difference here was that there is no AppDelegate.swift file. Instead there is a file called &ldquo;SwiftUI_Mac_11App.swift&rdquo; where &ldquo;SwiftUI_Mac_11&rdquo; is the name of my app. This file is vastly simpler than the old AppDelegate but it sets up the app, the scene and the window group, with the expected ContentView as the main content.<\/p>\n<p>ContentView.swift had a change too. Instead of setting the <code>maxWidth<\/code> and <code>maxHeight<\/code> of the view to <code>.infinity<\/code>, this Content View only adds some padding to the standard <code>Text<\/code> view. Time to see what happens when I run&hellip;<\/p>\n<p>The first run took longer than I expected (I told you it was an old MacBook) but then a very small window appeared, just big enough to show the &ldquo;Hello world!&rdquo; text with its padding. The app has all the expected menus although I have no idea where they are set up.<\/p>\n<p>Closing the app and using the Canvas preview worked much as before, although the canvas now has additional controls including a button to add another preview and a menu to configure each preview. Oddly, running the preview and clicking &ldquo;Bring Forward&rdquo; displayed two app windows. I presume this is an Xcode 12 beta &ldquo;feature&rdquo;.<\/p>\n<p>I used the attributes Inspector to edit the <code>Text<\/code> view, setting text, font style and weight and color. I had read that Xcode 12 had much better auto-formatting, but when adding modifiers this way, they all ended up on a single line which was not pretty. Manually adding line feeds before each dot did give a very neat structure, so typing in modifiers will be my preferred method.<\/p>\n<hr>\n<h2 id=\"editing-the-layout\">Editing the Layout<\/h2>\n<p>Now on to my own layout. As I did last time, I used a static list to make a <code>NavigationView<\/code> for preliminary testing.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        NavigationView {\n             List {\n                 ForEach(<span style=\"color:#ae81ff\">1<\/span> ... <span style=\"color:#ae81ff\">10<\/span>, id: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.<span style=\"color:#66d9ef\">self<\/span>) { index <span style=\"color:#66d9ef\">in<\/span>\n                     NavigationLink(destination: Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)) {\n                         Text(<span style=\"color:#e6db74\">&#34;Link <\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n                     }\n                 }\n             }\n        }\n    }\n}\n<\/code><\/pre><\/div><p>When I ran the app or looked at it in the Canvas it looked great, but when I clicked a link in the sidebar, the window shrunk to an unusably small size. So I added a <code>frame<\/code> modifier to the destination view. And I also set the <code>ListStyle<\/code> to <code>SidebarListStyle()<\/code> which gave the new macOS 11 full height sidebar look.<\/p>\n<p>But here is where I encountered the first major difference. When I selected an item in the sidebar, the app correctly showed the detail view. But if I put the app into the background, this detail view disappeared. It literally disappeared because I was able to track that it was calling its <code>onDisappear<\/code> modifier.<\/p>\n<p>After a lot of testing, several days of frustration and help from <a href=\"https:\/\/twitter.com\/jsngr\">Jordan Singer<\/a> with his <a href=\"https:\/\/github.com\/jordansinger\/mail-swiftui-sample\">mail-swiftui-sample<\/a> project, I was finally able to work this out. The difference is that the initial view has to specify what comes next as well as what it is displaying. So in the initial <code>NavigationView<\/code>, I had a <code>List<\/code>, but I also needed some view to show that I was going to show another view in another column. This second column view has to reserve the space for the detail view to come.<\/p>\n<p>I have no idea how Jordan worked this out, but I am very grateful. What I ended up with was this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        NavigationView {\n            List {\n                ForEach(<span style=\"color:#ae81ff\">1<\/span> ... <span style=\"color:#ae81ff\">10<\/span>, id: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.<span style=\"color:#66d9ef\">self<\/span>) { index <span style=\"color:#66d9ef\">in<\/span>\n                    NavigationLink(destination:\n                                    Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n                                    .frame(maxWidth: .infinity, maxHeight: .infinity)\n                    ) {\n                        Text(<span style=\"color:#e6db74\">&#34;Link <\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n                    }\n                }\n            }\n            .listStyle(SidebarListStyle())\n\n            Text(<span style=\"color:#e6db74\">&#34;Select a link...&#34;<\/span>)\n                .frame(maxWidth: .infinity, maxHeight: .infinity)\n        }\n        .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n}\n<\/code><\/pre><\/div><p>The &ldquo;Select a link&hellip;&rdquo; text is shown when there is no destination view to display. And when I click one of the entries in the sidebar, its content replaces that <code>Text<\/code> view but keeps its frame.<\/p>\n<hr>\n<h2 id=\"displaying-data\">Displaying Data<\/h2>\n<p>As with the previous app, I am displaying data from <a href=\"https:\/\/http.cat\/\">HTTP Cats<\/a>. This part remains the same, so check back to the original article if you want to see how I did this. I did get warnings about the <code>Decodable<\/code> data structs I was using. My normal pattern when I want data to be <code>Identifiable<\/code> is to use something like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">HttpSection<\/span>: Identifiable, Decodable {\n    <span style=\"color:#66d9ef\">let<\/span> id = UUID()\n    <span style=\"color:#66d9ef\">let<\/span> headerCode: String\n    <span style=\"color:#66d9ef\">let<\/span> headerText: String\n    <span style=\"color:#66d9ef\">let<\/span> statuses: [HttpStatus]\n}\n<\/code><\/pre><\/div><p>But with Xcode 12, this gives an error. The error messages seem much more useful than before and they offered two suggestions. I tried what appeared to be the easier one of making the <code>id<\/code> mutable, but that stopped the decoding from working, so I added a <code>CodingKeys<\/code> enum to each struct to restrict the keys that would be included.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">enum<\/span> <span style=\"color:#a6e22e\">CodingKeys<\/span>: String, CodingKey {\n    <span style=\"color:#66d9ef\">case<\/span> headerCode\n    <span style=\"color:#66d9ef\">case<\/span> headerText\n    <span style=\"color:#66d9ef\">case<\/span> statuses\n}\n<\/code><\/pre><\/div><p>When the app ran, I had a sidebar with collapsible sections. I wasn&rsquo;t that happy with the default look of the section headers and the disclosure marker for the first header was positioned beside the text instead of at the right, but I do like the selected item lozenge look. I set a frame height for the section header view and that made the spacing better but the disclosure mark for the first header was still incorrectly positioned.<\/p>\n<style>\n  img {\n    margin: 10px auto;\n  }\n<\/style>\n\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-mac-11-BadCollapse.png\" alt=\"Initial collapsible sections\"><\/p>\n<p>The <code>Detail<\/code> view to be displayed when a status is selected had no major changes, so I dropped in the file from the previous app, without the extra bits to do with notifications and preferences. However since SwiftUI now includes a <code>ProgressView<\/code>, I swapped out my &ldquo;Loading&hellip;&rdquo; text for a indeterminate progress twirly.<\/p>\n<hr>\n<h3 id=\"three-column-layout\">Three Column Layout<\/h3>\n<p>Since the collapsible sidebar wasn&rsquo;t looking good, I decide to try for a three column layout with the categories in the first column, the codes for the selected category in the second column and the detail view in the third column.<\/p>\n<p>The way I implemented this was to have the first list only show the section headers with <code>NavigationLinks<\/code> to a sub menu. To reserve the column layout, I had an empty submenu after the main list.<\/p>\n<p>In the second column, I showed the sub-headers with <code>NavigationLinks<\/code> to the <code>DetailView<\/code>. This view reserved the space for the third column with a <code>Text<\/code> view that changed its text depending on whether that submenu was displaying anything or not.<\/p>\n<p>I expanded the menu items to be big and chunky, which I feel fits the new style. The only remaining problem was that with the primary list set to use <code>SidebarListStyle()<\/code>, it only ever showed the first item. I had to change this to <code>InsetListStyle()<\/code> to see all the items! This lost the full height sidebar effect, but I assume this is a temporary bug.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-mac-11-ThreeColumns.png\" alt=\"Three column layout\"><\/p>\n<hr>\n<h3 id=\"menus\">Menus<\/h3>\n<p>Now I had the layout equivalent to what I ended up with after part 1 of my original series, so it was time to explore menus, which are very different. In the old style SwiftUI apps which were wrapped in AppKit, the menus were in a storyboard that you could edit. Now you add <code>commands<\/code> to the app&rsquo;s <code>WindowGroup<\/code> to alter the menus.<\/p>\n<p>The easiest way is to add a completely new menu, but it is also possible to insert new menu items after or before certain standard menu items.<\/p>\n<p>Here is how to add a new Utilities menu with three items:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">@main\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SwiftUI_Mac_11App<\/span>: App {\n    <span style=\"color:#66d9ef\">var<\/span> body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n        .commands {\n            CommandMenu(<span style=\"color:#e6db74\">&#34;Utilities&#34;<\/span>) {\n                Button(action: {}) {\n                    Text(<span style=\"color:#e6db74\">&#34;Dark mode&#34;<\/span>)\n                }\n\n                Button(action: {}) {\n                    Text(<span style=\"color:#e6db74\">&#34;Light mode&#34;<\/span>)\n                }\n\n                Button(action: {}) {\n                    Text(<span style=\"color:#e6db74\">&#34;System mode&#34;<\/span>)\n                }\n            }\n        }\n    }\n}\n<\/code><\/pre><\/div><p>A <code>CommandMenu<\/code> adds a new menu and it is always positioned between the standard View and Window menus. To add items to an existing menu, you need to use a <code>CommandGroup<\/code> and tell it where to appear. It can be <code>after<\/code> or <code>before<\/code> various standard menu items. Look up the docs for <a href=\"https:\/\/developer.apple.com\/documentation\/swiftui\/commandgroupplacement\">CommandGroupPlacement<\/a> to see which items you can use as positional markers. I used <code>after .windowArrangement<\/code>.<\/p>\n<p>Weirdly, the font, color and spacing of these menu items was different to the standard menu items. I can only assume this is a bug which will be fixed. I faked the proper look with modifiers, but it didn&rsquo;t feel right. This screen shot shows the default look with the three mode items being my additions to the standard Window menu.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-mac-11-menus-bad-format.png\" alt=\"Menus with incorrect formatting\"><\/p>\n<p>I tried using <code>Labels<\/code> to add an icon to the menu item. As I was switching between view modes, I wanted to have a checkmark before the selected menu item. This worked when first drawn, but the menus did not refresh when the data changed, so that was no use.<\/p>\n<p>I also tested using <code>Divider()<\/code> to get a menu separator. It worked, but the look didn&rsquo;t match the standard dividers. So menus need a lot of work still&hellip;<\/p>\n<p>I kept the technique of having menu items publish notifications that other views could pick up. This seems to work well. I would have liked to have certain menus or menu items only appear conditionally or perhaps enable\/disable conditionally, but I could not see how to do that. Since menus do not appear to update when data changes, this may not be possible right now.<\/p>\n<hr>\n<h3 id=\"preferences\">Preferences<\/h3>\n<p>There was one place where the new app architecture was amazingly good and that was to do with preferences. In my previous attempt at this app, I had a Preferences window and it was a major exercise to stop it opening more than once. This time, it was super easy. In the App.swift file, beside the <code>WindowGroup<\/code>, I added <code>Settings<\/code> which contained a view which had the UI for my app&rsquo;s preferences.<\/p>\n<p>This caused a few errors at first, but I added a <code>@SceneBuilder<\/code> property wrapper to the App&rsquo;s body and that fixed the errors.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">@main\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SwiftUI_Mac_11App<\/span>: App {\n    @SceneBuilder <span style=\"color:#66d9ef\">var<\/span> body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n\n        Settings {\n            SettingsView()\n        }\n    }\n}\n<\/code><\/pre><\/div><p>These three lines of code added a Preferences menu item and hooked it up to my <code>SettingsView<\/code>. This view opens in a new window when the Preferences menu item or keyboard shortcut is used and only one copy of this window ever appears.<\/p>\n<p>Then on to the second brilliant thing about preferences: <code>@AppStorage<\/code>. In the previous version, I used a custom property wrapper to wrap settings that I wanted saved into UserDefaults. This is now built into SwiftUI and this was all I had to do:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    @AppStorage(<span style=\"color:#e6db74\">&#34;showCopyright&#34;<\/span>) <span style=\"color:#66d9ef\">var<\/span> showCopyright: Bool = <span style=\"color:#66d9ef\">false<\/span>\n<\/code><\/pre><\/div><p>Now any time that variable was accessed, it was read from UserDefaults and every time it was changed, it was written back into UserDefaults. Instant preferences in a single line!<\/p>\n<p>To pass this setting to a different view, all I had to do was give that view this same declaration. And it just worked!<\/p>\n<hr>\n<h3 id=\"opening-another-window\">Opening Another Window<\/h3>\n<p>Last time, I tried lots of different ways using hosting controllers, storyboards etc. to open secondary windows. This time I decided to stick to using <code>sheet<\/code> since it seems to be what works best for SwiftUI apps. So I added my User Interface Elements sample window as a sheet.<\/p>\n<p>The view itself was reasonably similar except that last time, I used an <code>NSViewRepresentable<\/code> to embed an AppKit color well into the view. This time I was able to use the new SwiftUI ColorPicker which made it much easier to get the color back into the main view. I also added the new date and time pickers.<\/p>\n<p>The color picker worked really well except that there is an option to specify whether the picker should support opacity or not. I found that no matter what I chose here, I never got the option to chose a color with opacity.<\/p>\n<p>The date picker was good. It showed the date numerically using my local format - DD\/MM\/YYY. Clicking on any of the elements popped up a calendar view. The time picker was not so easy to use. Again, it showed the time in my format e.g. 7:53 pm. But there was no graphical entry, you click on an element (hour, minute or am\/pm) and type. This would be OK except that every time you type, the focus jumps back to the hour. I found this confusing.<\/p>\n<p>One big improvement is the ability to apply a keyboard shortcut to a button. When I set the keyboard shortcut for the Close button to <code>.defaultAction<\/code>, the button got the default appearance and was triggered by pressing the Return key.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    Button(action: {}) {\n        Text(<span style=\"color:#e6db74\">&#34;Close&#34;<\/span>)\n    }\n    .keyboardShortcut(.defaultAction)\n<\/code><\/pre><\/div><p>I was still unable to work out how to set the focus to a TextField. There are two new property wrappers to do with focus, but I understand they are not yet operational.<\/p>\n<hr>\n<h3 id=\"dialogs\">Dialogs<\/h3>\n<p>I have already used a sheet to display the UI elements and ActionSheets are not available on macOS, so that just leaves Alerts and file dialogs. File dialogs work identically in the app although they look quite different on Big Sur. Alerts look quite different but I think they are nice. Since the app icon is a prominent part of the dialog, I added one to make it look good. I understand that different numbers of buttons will get arranged in different ways.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-mac-11-alert.png\" alt=\"Alert dialog\"><\/p>\n<hr>\n<h3 id=\"other-improvements\">Other Improvements<\/h3>\n<h4 id=\"self\">Self<\/h4>\n<p>Do a search for &ldquo;self.&rdquo; and get rid of them all. Your code will be much cleaner and easier to read and SwiftUI now understands what you mean. If you want to read more details about this change, check out <a href=\"https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0269-implicit-self-explicit-capture.md\">swift-evolution proposal SE-0269<\/a>.<\/p>\n<h4 id=\"navigation-titles\">Navigation Titles<\/h4>\n<p>iOS had the concept of setting a navigation title but it didn&rsquo;t really work in macOS. Now you can set the <code>navigationTitle<\/code> of a view and this will be the window title.<\/p>\n<h4 id=\"toolbars\">Toolbars<\/h4>\n<p>This was an aspect of macOS apps that I referred to but didn&rsquo;t explore last time mainly because I assumed it would be done through the storyboard, just as with an AppKit app. Now we can add a <code>.toolbar<\/code> modifier to a view and have it include <code>ToolbarItems<\/code>. For the first time, we can now use <a href=\"https:\/\/developer.apple.com\/sf-symbols\/\">SF Symbols<\/a> in a macOS app, so that made it easy to add good looking toolbar items.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-mac-11-toolbar.png\" alt=\"Toolbar and navigation title\"><\/p>\n<p>I would like to vary the toolbar according to what is being displayed, and the toolbar is also used to show the navigation title, but perhaps that is a topic for another day. There is certainly a lot to explore there.<\/p>\n<h4 id=\"pyramid-of-doom\">Pyramid of Doom<\/h4>\n<p>With menus and toolbars, there is a heap of extra code added to certain views. I would love to be able to extract that into its own function or view modifier. I was able to extract the toolbar, but I am not sure how to do this with menus yet. I imagine it will need some specific sort of ViewBuilder but I think this is very necessary. Perhaps the topic for yet another article&hellip;<\/p>\n<p>The project is available on <a href=\"https:\/\/github.com\/trozware\/swiftui-mac-11\">GitHub<\/a>. As always, if you have any comments, suggestions or ideas, I would love to hear from you. Please contact me using one of the links below or through my <a href=\"https:\/\/troz.net\/contact\/\">Contact<\/a> page. Thanks for reading.<\/p>\n<p>Thanks to <a href=\"https:\/\/twitter.com\/kb091412\">Sungbin Jo (조성빈)<\/a> for proof-reading and suggestions.<\/p>","url":"https:\/\/troz.net\/post\/2020\/swiftui_mac_big_sur\/","date":615894016},{"title":"SwiftUI Snapshot Testing","content":"<p>Snapshot testing is a technique that has been very popular in the web development world and it seems like a great way to test SwiftUI user interfaces. I read about snapshot tests in a recent blog post and was intrigued, but I had some difficulty getting it to work, so when I finally succeeded, I decided to share my experiences in the hope that others will find them useful.<\/p>\n<hr>\n<h2 id=\"what-is-snapshot-testing\">What is Snapshot Testing<\/h2>\n<p>Unit testing checks that when you call various functions or methods with certain inputs, you get the output you expect. I use unit tests for testing my models and the methods that change them. But this only tests the logic behind the app, it does nothing to test whether the app is displaying what it should, or whether it is responding correctly to the user&rsquo;s actions.<\/p>\n<p>UI testing emulates user actions by faking taps, clicks, text entry and so on and checks that labels, buttons etc are showing the correct information after these fake interactions.<\/p>\n<p>Snapshot testing is in between these two as it effectively takes a picture of the interface. The first time you run the test it will store an image and all subsequent test runs will check that the current interface matches this stored image. If there are any differences, the test will fail so you can decide whether to keep the new version or revert to what you had before.<\/p>\n<hr>\n<h2 id=\"how-did-i-get-started\">How did I get started?<\/h2>\n<p>I first read about the idea of using snapshot testing for SwiftUI in a blog post by <a href=\"https:\/\/www.vadimbulavin.com\/snapshot-testing-swiftui-views\/\">Vadim Bulavin<\/a>. He made a very good argument for this, but I found his instructions assumed more knowledge of the topic than I had at the time and so I discarded the idea after an initial attempt.<\/p>\n<p>But he was suggesting using a <a href=\"https:\/\/github.com\/pointfreeco\/swift-snapshot-testing\">snapshotting library<\/a> published by <a href=\"https:\/\/www.pointfree.co\">Point-Free<\/a> and I later discovered a link to one of their videos where they discuss this exact thing: <a href=\"https:\/\/www.pointfree.co\/episodes\/ep86-swiftui-snapshot-testing\">SwiftUI Snapshot Testing<\/a>. This was enough to get me going with attempt #2.<\/p>\n<hr>\n<h2 id=\"setting-up-an-app-for-snapshot-testing\">Setting up an app for snapshot testing<\/h2>\n<p>Since the blog post and video were talking about iOS apps, I decided to start there, but you know me, I will get to macOS apps later&hellip;<\/p>\n<p>First off, I created a single view iOS app using SwiftUI making sure to check &ldquo;Include Unit Tests&rdquo;, but not &ldquo;Include UI Tests&rdquo;. I created a simple view so I had something to test.<\/p>\n<p>If you want to use this on an app that does not already have a unit tests target, go to the project settings, click the + button to add a new target and choose a Unit Testing Bundle.<\/p>\n<p>Next step was to import the snapshot testing library using Swift Package Manager. Go to File &gt; Swift Packages &gt; Add Package Dependency. Paste in the URL below and click Next.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-text\" data-lang=\"text\">https:\/\/github.com\/pointfreeco\/swift-snapshot-testing\n<\/code><\/pre><\/div><p>I accepted the default versioning suggestions on the next pane.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Snapshot-AddPackage.png\" alt=\"Adding the snapshot package\"><\/p>\n<p>On the final pane, it is important to select the correct target for this package. Select the app&rsquo;s test target, not the app itself and not the UI test target if you have one. I made this mistake on my first try as I assumed that snapshot testing would be part of UI testing but it is actually part of unit testing.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Snapshot-SetTarget.png\" alt=\"Setting the package target\"><\/p>\n<hr>\n<h2 id=\"writing-a-snapshot-test\">Writing a Snapshot Test<\/h2>\n<p>Now I added a new Unit Test Case Class file to the tests target in my app. I had to import SwiftUI and SnapshotTesting into this test file as well as declaring the app as a testable import. The easiest way to do this is to copy the <code>@testable import<\/code> heading from the sample test file to make sure it is exactly right. The import needs to match the name of your app module.<\/p>\n<p>Finally it&rsquo;s time to write the first snapshot test:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">XCTest<\/span>\n<span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">SnapshotTesting<\/span>\n<span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">SwiftUI<\/span>\n@testable <span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">Snapshots<\/span>\n\n<span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">SnapshotsTests<\/span>: XCTestCase {\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testDefaultAppearance<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> contentView = ContentView()\n        assertSnapshot(matching: contentView, <span style=\"color:#66d9ef\">as<\/span>: .image)\n    }\n\n}\n<\/code><\/pre><\/div><p>This uses the snapshot library&rsquo;s <code>assertSnapshot<\/code> method to save the content view as an image. But unfortunately, this doesn&rsquo;t work. The problem is that the second parameter is a Snapshotting strategy that can convert various UI elements into some form of data or image. But the library doesn&rsquo;t know what a SwiftUI View is, so it needs a way to convert the view into something that can be recognized by the snapshotter.<\/p>\n<p>I added this extension to SwiftUI&rsquo;s View that wraps the SwiftUI View in a UIHostingController. It returns this as a UIViewController which is a valid input for a snapshotter and can be converted to an image.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">SwiftUI<\/span>.View {\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">toVC<\/span>() -&gt; UIViewController {\n        <span style=\"color:#66d9ef\">let<\/span> vc = UIHostingController(rootView: <span style=\"color:#66d9ef\">self<\/span>)\n        vc.view.frame = UIScreen.main.bounds\n        <span style=\"color:#66d9ef\">return<\/span> vc\n    }\n}\n<\/code><\/pre><\/div><p>Now my first test became:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testDefaultAppearance<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> contentView = ContentView()\n        assertSnapshot(matching: contentView.toVC(), <span style=\"color:#66d9ef\">as<\/span>: .image)\n    }\n<\/code><\/pre><\/div><p>And it worked. Or rather it failed as expected because there was no image to compare it with.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/Snapshot-Test1Result.png\"><img src=\"https:\/\/troz.net\/images\/Snapshot-Test1Result.png\" alt=\"Test result\"><\/a><\/p>\n<p>Checking the error message, I was able to see where it had created the snapshot image file which I could look at. And the second time I ran the test, it passed.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Snapshot-TestImage1.png\" alt=\"Test image in Finder\"><\/p>\n<blockquote>\n<p>If you ever get an error message saying &ldquo;No such module &lsquo;SnapshotTesting&rsquo;&rdquo; use Shift-Command-U to re-build for testing. This usually only happens after you have cleaned your build folder.<\/p>\n<\/blockquote>\n<hr>\n<h2 id=\"testing-a-change\">Testing a Change<\/h2>\n<p>Now that I had a passing test, the next thing was to check what happens if the UI changes. This may be due to a deliberate change or because the cat just walked across your keyboard (a not infrequent occurrence around here).<\/p>\n<p>Where I originally had a button with the label &ldquo;Save&rdquo;, I decided to change this to &ldquo;OK&rdquo; (rejecting the cat&rsquo;s suggestion of &ldquo;q2eegrnh&rdquo;).<\/p>\n<p>Running the test again produced this result:<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/Snapshot-FailedTest.png\"><img src=\"https:\/\/troz.net\/images\/Snapshot-FailedTest.png\" alt=\"Failed snapshot test\"><\/a><\/p>\n<p>And I was then able to compare the 2 images, using the path to the failing image from the error message.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Snapshot-TestResults.png\" alt=\"Test results: success and failure\"><\/p>\n<p>Once I had confirmed that the new image was what I wanted and not a result of error, either feline or human, I set the test to <code>record<\/code> a new result so that the new version became the official test version.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testDefaultAppearance<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> contentView = ContentView()\n\n        record = <span style=\"color:#66d9ef\">true<\/span>\n        assertSnapshot(matching: contentView.toVC(), <span style=\"color:#66d9ef\">as<\/span>: .image)\n    }\n<\/code><\/pre><\/div><p>This caused a failing test again as the new version was written to the Snapshots folder, but after removing the <code>record = true<\/code> line and re-running the test, it passed again, with my new button label now an accepted part of the test.<\/p>\n<hr>\n<h2 id=\"using-snapshots-with-state\">Using Snapshots with State<\/h2>\n<p>In SwiftUI, the UI displayed is a function of state, so changing state properties changes the UI. This is what makes snapshot testing really good for SwiftUI apps as you can change the state programmatically and confirm that this is reflected in the UI.<\/p>\n<p>So having proved that the snapshot tests worked, I decided to move on and test it with my new <a href=\"https:\/\/troz.net\/post\/2020\/name_this_app\/\">anagram assistant app<\/a>. This is quite a simple app that has a single <code>AppState<\/code> class that holds all the program data.<\/p>\n<p>So I was able to write a suite of tests that changed the state in various ways and then snap-shotted the UI with that state. Here are a couple of examples:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testEmptyContentView<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> contentView = ContentView()\n        assertSnapshot(matching: contentView.toVC(), <span style=\"color:#66d9ef\">as<\/span>: .image)\n    }\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testAfterLocking<\/span>() {\n        <span style=\"color:#66d9ef\">var<\/span> contentView = ContentView()\n\n        <span style=\"color:#66d9ef\">let<\/span> appState = AppState.sampleState()\n        appState.availableLetters.sort()\n        appState.selectedLetterIndex = <span style=\"color:#ae81ff\">1<\/span>\n        appState.placeSelectedLetter(at: <span style=\"color:#ae81ff\">3<\/span>)\n        appState.toggleLockedState()\n        appState.availableLetters.sort()\n\n        contentView.appState = appState\n        assertSnapshot(matching: contentView.toVC(), <span style=\"color:#66d9ef\">as<\/span>: .image)\n    }\n<\/code><\/pre><\/div><p>This worked really well with only one slight problem. As the state arranges the <code>availableLetters<\/code> array randomly for display, I had to add a <code>sort<\/code> to make sure they always displayed in the same order and made the tests repeatable.<\/p>\n<p>And as a bonus, I was able to test a screen in dark mode with this test which sets the <code>colorScheme<\/code>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testDarkMode<\/span>() {\n        <span style=\"color:#66d9ef\">var<\/span> contentView = ContentView()\n        contentView.appState = sampleAppState()\n\n        assertSnapshot(\n            matching: contentView.colorScheme(.dark).toVC(),\n            <span style=\"color:#66d9ef\">as<\/span>: .image)\n    }\n<\/code><\/pre><\/div><hr>\n<h2 id=\"accessibility-tests\">Accessibility Tests<\/h2>\n<p>iOS supports dynamic type and if your app uses standard font styles, it will adopt these dynamic sizes automatically. I can&rsquo;t find the link right now, but I remember reading an article that said nearly half of all iPhone users change the default text size, setting it either smaller or larger.<\/p>\n<p>With snapshot testing, it is quick and easy to get a view of how you app looks with different font sizes. Here is my test function for taking a snapshot of every possible font size variation.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testDynamicFonts<\/span>() {\n        <span style=\"color:#66d9ef\">var<\/span> contentView = ContentView()\n        contentView.appState = sampleAppState()\n\n        <span style=\"color:#66d9ef\">for<\/span> contentSize <span style=\"color:#66d9ef\">in<\/span> ContentSizeCategory.allCases {\n            assertSnapshot(matching: contentView.environment(<span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.sizeCategory, contentSize).toVC(),\n                           <span style=\"color:#66d9ef\">as<\/span>: .image,\n                           named: <span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>contentSize<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n        }\n    }\n<\/code><\/pre><\/div><p>For the settings screen, I decided that smaller fonts were not a problem, but I wanted to check the two largest options, so I used this test function:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">testSettingsScreen<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> settingsView = SettingsView()\n        assertSnapshot(matching: settingsView.toVC(), <span style=\"color:#66d9ef\">as<\/span>: .image)\n\n        assertSnapshot(\n            matching: settingsView.environment(\n                <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.sizeCategory, ContentSizeCategory.accessibilityExtraExtraExtraLarge\n            ).toVC(),\n            <span style=\"color:#66d9ef\">as<\/span>: .image,\n            named: <span style=\"color:#e6db74\">&#34;AccessibilityXXXL&#34;<\/span>)\n\n        assertSnapshot(\n            matching: settingsView.environment(\n                <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.sizeCategory, ContentSizeCategory.extraExtraExtraLarge\n            ).toVC(),\n            <span style=\"color:#66d9ef\">as<\/span>: .image,\n            named: <span style=\"color:#e6db74\">&#34;XXXL&#34;<\/span>)\n    }\n<\/code><\/pre><\/div><p><img src=\"https:\/\/troz.net\/images\/Snapshot-DynamicFonts.png\" alt=\"Dynamic font tests\"><\/p>\n<p>This let me quickly see where the problems were and what I needed to adjust.<\/p>\n<hr>\n<h2 id=\"snapshot-test-for-mac-apps\">Snapshot Test for Mac Apps<\/h2>\n<p>You knew you weren&rsquo;t going to get through this without me going on about Mac apps&hellip;<\/p>\n<p>Snapshot tests for a Mac app work well, with one caveat.<\/p>\n<p>First I had to change the Swift.View extension so that it returned an NSViewController instead of a UIViewController.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">SwiftUI<\/span>.View {\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">toVC<\/span>() -&gt; NSViewController {\n        <span style=\"color:#66d9ef\">let<\/span> vc = NSHostingController(rootView: <span style=\"color:#66d9ef\">self<\/span>)\n        vc.view.frame = CGRect(x: <span style=\"color:#ae81ff\">0<\/span>, y: <span style=\"color:#ae81ff\">0<\/span>, width: <span style=\"color:#ae81ff\">1024<\/span>, height: <span style=\"color:#ae81ff\">768<\/span>)\n        <span style=\"color:#66d9ef\">return<\/span> vc\n    }\n}\n<\/code><\/pre><\/div><p>I chose an arbitrary size for the snapshot, you just need to make sure your UI will fit into whatever size you select.<\/p>\n<p>The real problem was with sand-boxing. The snapshot library was blocked from writing the image files to the project directory if the app was sand-boxed. This seems really peculiar, since Xcode is running the tests and Xcode writes to the project directory all the time!<\/p>\n<p>I found two ways around this:<\/p>\n<ol>\n<li>Turn off sand-box mode temporarily while testing.<\/li>\n<li>Make a non-sand-boxed target and use it for testing against.<\/li>\n<\/ol>\n<p>Neither of these are particularly great. Option 1 is tedious, although I think it can work if the snapshots remain the same, it only fails if there is a change that it needs to write to disk.<\/p>\n<p>Option 2 is tedious to set up (<a href=\"https:\/\/troz.net\/contact\/\">contact me<\/a> if you would like more details) but is more seamless after that.<\/p>\n<p>The best solution would be for Xcode to allow you to turn off sand-boxing for a test target. Maybe Xcode 12&hellip;<\/p>\n<hr>\n<h2 id=\"limitations-of-snapshot-testing\">Limitations of Snapshot Testing<\/h2>\n<p>Ignoring the Mac and concentrating only on iOS apps for the moment, there were a few issues:<\/p>\n<ol>\n<li>\n<p>You have to run your tests against the same simulator every time, or at least against a simulator with the same screen dimensions. I decided to to use the iPhone SE (2nd generation) as it has a small screen and I find smaller screens to be more of a problem than large ones. You also need to make sure it is always using the same appearance: light or dark, unless you want to specify this for every test.<\/p>\n<p>I ended up with this setup function that ran before my snapshot test suite:<\/p>\n<\/li>\n<\/ol>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">override<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">setUp<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> device = UIDevice.current.name\n        <span style=\"color:#66d9ef\">if<\/span> device <span style=\"color:#f92672\">!=<\/span> <span style=\"color:#e6db74\">&#34;iPhone SE (2nd generation)&#34;<\/span> {\n            fatalError(<span style=\"color:#e6db74\">&#34;Switch to using iPhone SE (2nd generation) for these tests.&#34;<\/span>)\n        }\n\n        UIView.setAnimationsEnabled(<span style=\"color:#66d9ef\">false<\/span>)\n        UIApplication.shared.windows.first?.layer.speed = <span style=\"color:#ae81ff\">100<\/span>\n\n        record = <span style=\"color:#66d9ef\">false<\/span>\n    }\n<\/code><\/pre><\/div><p>This uses a couple of tricks that are supposed to speed up tests and has a <code>record<\/code> setting that I could set for the entire suite if I wished, and it throws a <code>fatalError<\/code> if I select the wrong device or simulator.<\/p>\n<p>It would be neater if Xcode allowed you to select a simulator in the test target build settings, but I think you can only do this if you run tests from the command line.<\/p>\n<ol start=\"2\">\n<li>\n<p>Snapshot tests confirm that the UI matches the state, but they do not check to see if the state changes in response to user input. That is the missing link that UI testing provides, but even without that, I believe that snapshot testing is a very useful tool and much better than having no form of UI testing at all.<\/p>\n<\/li>\n<li>\n<p>You need to look at your snapshots. This may sound obvious but the snapshot library creates a set of images. These images are then set as the goal for future tests. If you don&rsquo;t check that they are correct, then every test could be confirming that the UI is wrong but unchanged. If the tests report a difference, look at both copies and see which one is right. For the same reason, the snapshot images need to be included in your version control repository.<\/p>\n<\/li>\n<\/ol>\n<hr>\n<h2 id=\"summary\">Summary<\/h2>\n<p>Will I use snapshot tests for my SwiftUI apps? Yes, definitely. I use unit tests for my model classes but mostly avoid UI tests as they are too clumsy to write and time-consuming to run. Snapshot tests are better for SwiftUI, and very fast.<\/p>\n<p>Huge thanks to <a href=\"https:\/\/twitter.com\/V8tr\">Vadim Bualvin<\/a> for the original inspiration for this article. Go and read his <a href=\"https:\/\/www.vadimbulavin.com\/snapshot-testing-swiftui-views\/\">blog post<\/a> for a more detailed look. And thanks to <a href=\"https:\/\/www.twitter.com\/mbrandonw\">Brandon Williams<\/a> &amp; <a href=\"https:\/\/www.twitter.com\/stephencelis\">Stephen Celis<\/a> at <a href=\"https:\/\/www.pointfree.co\">Point-Free<\/a> for getting me going after my initial discarding of the idea. Any mistakes or errors are mine and not theirs.<\/p>\n<p>If you want to learn about UI testing for SwiftUI apps, I recommend watching <a href=\"https:\/\/twitter.com\/azamsharp\">azamsharp&rsquo;s<\/a> YouTube video: <a href=\"https:\/\/www.youtube.com\/watch?v=dFQtFJsvt04\">User Interface Testing for SwiftUI Applications<\/a>.<\/p>\n<p>As always, if you have any comments, suggestions or ideas, I would love to hear from you. Please contact me using one of the links below or through my <a href=\"https:\/\/troz.net\/contact\/\">Contact<\/a> page.<\/p>","url":"https:\/\/troz.net\/post\/2020\/swiftui_snapshots\/","date":611398209},{"title":"Name This App","content":"<p>My current work in progress is an iPhone app designed to make it easier to solve crossword anagrams by emulating and improving upon an ability that was there when we used to do crosswords on paper, but is missing for digital crosswords.<\/p>\n<p>But I cannot think of a clever name for the app, so please read the story and contact me with your name suggestions or if you would like to test the pre-release version of this app.<\/p>\n<hr>\n<h3 id=\"cryptic-crosswords\">Cryptic Crosswords<\/h3>\n<p>Programmers are basically puzzlers, and programming is the world&rsquo;s best type of puzzle, but I like to start my day with a cryptic crossword. Like programming, cryptic crossword clues have their own syntax and what seems like gibberish on a first glance, can be parsed into logical parts to take you to the answer. But there are aspects of solving crosswords that were easier with pencil and paper, so I decided to write an app to help fill one of those gaps.<\/p>\n<p>My crossword of choice is the <a href=\"https:\/\/www.irishtimes.com\/games\/crosswords\/\">Crosaire<\/a> crossword from <a href=\"https:\/\/www.irishtimes.com\">The Irish Times<\/a>. A lot of newspapers have a cryptic crossword and most of them need a subscription, but the Irish Times has a crossword only subscription that I really like. Crosswords also tend to require some local knowledge, but for the Crosaire, if you remember that the Abbey and the Gate are both theatres and that Down is a county, you will have most of what you need. And as an added bonus, the crossword creator later blogs the solutions with explanations so you can learn how the clues were constructed if you are totally mystified.<\/p>\n<hr>\n<h3 id=\"anagrams\">Anagrams<\/h3>\n<p>Anagrams are a very popular clue type but they can be tricky to solve because our brains are too good at discerning patterns. We can recognize words using only the first and last letters if they have the correct number of letters inside. This means that asking our brains to scramble these letters into a completely different word is very difficult. In the olden days, when I used to do crosswords in the newspaper, the best method was to find a space in the margin and write the letters out in a circle which forced my brain to reconsider the options.<\/p>\n<p>Here is an example from a recent Crosaire:<\/p>\n<blockquote>\n<p><em>Users rip off revelation (8)<\/em><\/p>\n<\/blockquote>\n<p>The word &ldquo;off&rdquo; is a hint that this is an anagram, &ldquo;Users rip&rdquo; has the right number of letters, so the overall clue must be &ldquo;revelation&rdquo;. This is not a very long anagram and I think having two words makes it easier, but lets take a look at how I would solve this the old-fashioned way. (And I knew the &ldquo;I&rdquo; was the third last letter.)<\/p>\n<p><script>\n  window.onload = function (e) {\n    const imgs = document.getElementsByTagName('img')\n    for (i = 0; i < imgs.length; i++) {\n      let src = imgs[i].src\n      if (src.endsWith('.gif')) {\n        imgs[i].src = ''\n        imgs[i].src = src\n      }\n    }\n  }\n<\/script>\n\n<style>\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n    max-width: 400px;\n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n<\/style>\n<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Anagram1.gif\" alt=\"Anagram solving manually\"><\/p>\n<p>If you watch this gif and then look at it when it stops repeating, hopefully you will be able to see that the answer is &ldquo;SURPRISE&rdquo;. Refresh the page if you want to start the gif looping again.<\/p>\n<p>But I do crosswords on my iPad now and while I could use a notes app and my Apple Pencil to draw the letters out like I did in the GIF above, I don&rsquo;t always have the Pencil with me and I want to keep looking at the crossword. So I decided that a companion iPhone app was the way that would work best for me.<\/p>\n<p>There are sites and apps that offer anagram solvers, but they are just looking through a dictionary and showing you all the possibilities. To me, this feels like cheating, but I don&rsquo;t have a problem with using an app to emulate the techniques I used to use with pencil and paper.<\/p>\n<hr>\n<h3 id=\"app-design\">App Design<\/h3>\n<p>So I planned out the basic features of the app:<\/p>\n<ul>\n<li>enter a word<\/li>\n<li>display the letters in a circle<\/li>\n<li>shuffle these letters if needed<\/li>\n<li>place letters in a possible solution<\/li>\n<\/ul>\n<p>Arranging the letters in a circle was made relatively easy by using SwiftUI. I placed the letters in a ZStack so they were all piled on the one spot. Then I calculated the X &amp; Y offsets needed to move each letter to the edge of a circle. This involving digging out some long-forgotten trigonometry to convert from polar coordinates to rectangular coordinates. I could calculate the radius of the letter circle based on the screen size and the angle between each letter was 360 degrees divided by the number of letters. So some quick calculations converted these two numbers into X &amp; Y coordinates for each letter, and then I had my circle.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">var<\/span> radiansBetweenLetters: Double {\n        <span style=\"color:#66d9ef\">let<\/span> degrees = <span style=\"color:#ae81ff\">360.0<\/span> <span style=\"color:#f92672\">\/<\/span> Double(anagramLetters.count)\n        <span style=\"color:#66d9ef\">let<\/span> radians = degrees <span style=\"color:#f92672\">*<\/span> .pi <span style=\"color:#f92672\">\/<\/span> <span style=\"color:#ae81ff\">180<\/span>\n        <span style=\"color:#66d9ef\">return<\/span> radians\n    }\n\n    <span style=\"color:#66d9ef\">var<\/span> radiusForCircle: Double {\n        <span style=\"color:#66d9ef\">let<\/span> screenWidth = UIScreen.main.bounds.width\n        <span style=\"color:#66d9ef\">return<\/span> Double(screenWidth <span style=\"color:#f92672\">*<\/span> <span style=\"color:#ae81ff\">0.35<\/span>)\n    }\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">XoffsetForLetterAt<\/span>(index: Int) -&gt; CGFloat {\n        <span style=\"color:#75715e\">\/\/ x = R cos t<\/span>\n        <span style=\"color:#66d9ef\">let<\/span> totalRadians = radiansBetweenLetters <span style=\"color:#f92672\">*<\/span> Double(index)\n        <span style=\"color:#66d9ef\">let<\/span> x = radiusForCircle <span style=\"color:#f92672\">*<\/span> sin(totalRadians)\n        <span style=\"color:#66d9ef\">return<\/span> CGFloat(x)\n    }\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">YoffsetForLetterAt<\/span>(index: Int) -&gt; CGFloat {\n        <span style=\"color:#75715e\">\/\/ y = R sin t<\/span>\n        <span style=\"color:#66d9ef\">let<\/span> totalRadians = radiansBetweenLetters <span style=\"color:#f92672\">*<\/span> Double(index)\n        <span style=\"color:#66d9ef\">let<\/span> y = radiusForCircle <span style=\"color:#f92672\">*<\/span> cos(totalRadians)\n        <span style=\"color:#66d9ef\">return<\/span> CGFloat(y)\n    }\n<\/code><\/pre><\/div><p>The original word was converted into an array for display, so re-arranging the letters was a matter of calling <code>shuffle()<\/code> on the array which automatically triggered a SwiftUI redraw.<\/p>\n<p>And here is version 1 of the interface running in the SwiftUI Canvas:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AnagramAssistv1.gif\" alt=\"Anagram app version 1\"><\/p>\n<p><em>Refresh the page to see the gif play, if it has stopped.<\/em><\/p>\n<hr>\n<h3 id=\"a-different-type-of-anagram\">A Different Type of Anagram<\/h3>\n<p>Now we come to a variation of the anagram clue that is very popular with the author of the Crosaire crossword. I don&rsquo;t know if there is an official name, but I call them &ldquo;subtraction anagrams&rdquo;.<\/p>\n<p>Here is an example:<\/p>\n<blockquote>\n<p><em>Creationist has no taste for what&rsquo;s sarcastic (6)<\/em><\/p>\n<\/blockquote>\n<p>The idea here is to remove the letters in &ldquo;taste&rdquo; from the letters in &ldquo;Creationist&rdquo; and then unscramble the remaining letters to find a word that means &ldquo;sarcastic&rdquo;. My first attempt at this used a Trash can button that removed the letter and shortened the space for the solution, but then I decided to have a discard tray at the bottom of the screen to show what had been removed and allow replacing any letters discarded by mistake.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AnagramDiscard.png\" alt=\"Anagram discard tray\"><\/p>\n<hr>\n<p>After this, I added a bit of style to make it look nicer and then moved on to the next feature. If I knew some of the cross letters already, I wanted to be able to place them in the solution squares and then lock them in place. This would allow me to shuffle in letters to test and remove all the unlocked ones with a button click. So here is what the app looked like after those changes:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AnagramLocks.gif\" alt=\"Anagram with locked letters\"><\/p>\n<p><em>Refresh the page to see the gif play, if it has stopped.<\/em><\/p>\n<hr>\n<h3 id=\"drag--drop\">Drag &amp; Drop<\/h3>\n<p>My next experiment was with drag &amp; drop to place or discard letters. I waited until iOS 13.4 brought drag &amp; drop to SwiftUI but I was not happy with the result. Firstly, there is a big lag on dragging. You have to hold your finger down on a letter for quite a while before it becomes draggable. This was so counter-intuitive that I thought it wasn&rsquo;t working, but occasionally it did work and so I eventually deduced that it was a timing issue.<\/p>\n<p>The second problem was solved thanks to a suggestion by <a href=\"https:\/\/twitter.com\/luisramos1337\">Luis Ramos<\/a> on <a href=\"https:\/\/twitter.com\/trozware\/status\/1254568520295124992\">Twitter<\/a>. When I dragged a letter, the drag preview image was the shuffle button from the middle of the ZStack instead of the selected letter. This was solved by moving the <code>onDrag<\/code> modifier to BEFORE the <code>offset<\/code> modifier (not AFTER like I said in my original response to Luis). But I was still not happy with it, so I decided to discard this idea and stick to tapping.<\/p>\n<p>There was one side-effect: I wasn&rsquo;t able to get the drag preview to be round - it was a square with opaque corners. As a work-around, I changed the letters to be inside squares and then decided this was a better look anyway, since it was more like what you see in a crossword.<\/p>\n<hr>\n<h3 id=\"further-ui-enhancements\">Further UI Enhancements<\/h3>\n<p>I installed a custom font so that it looked more like hand-writing. I wrote about <a href=\"https:\/\/troz.net\/post\/2020\/custom-fonts\/\">installing custom fonts<\/a> in a separate article, so if you are interested check that out for details on the multiple steps that you need to take to get them to work. I went through a few different fonts until I found one that I thought worked well and clearly for all the upper case letters but I settled on <a href=\"https:\/\/www.fontspace.com\/search?q=oregano\">Oregano<\/a>. And then I made the app work in dark mode too:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AnagramDarkMode.png\" alt=\"Custom font and dark mode\"><\/p>\n<p>The clue for this one is <em>&ldquo;Consumables minus bacon and shellfish (6)&quot;<\/em><\/p>\n<hr>\n<h3 id=\"animations\">Animations<\/h3>\n<p>SwiftUI has animation built in, so I was able to add an <code>animation<\/code> modifier to the various views to make the transitions look smooth. I particularly liked the way the letters re-arranged themselves around the circle when I removed or replaced a letter.<\/p>\n<p>But to add something extra, I thought it would be fun if the letters all started in the middle and moved outwards to their places on the circle. The way I did this was by using a Boolean to store whether the letters had had their first draw. If not, the radius of the circle was zero, so they all piled in the middle. After a delay, this Boolean was toggled so the radius was changed to the full size and the animation modifier already applied, made the letters smoothly expand outwards.<\/p>\n<p>For the letter shuffle, I did the reverse, moving the letters in, shuffling, then moving them out again.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AnagramAnimation.gif\" alt=\"Animations\"><\/p>\n<p><em>Refresh the page to see the gif play, if it has stopped.<\/em><\/p>\n<p>I also added sound effects and a slide-up sheet view with settings and help. I enjoyed using <a href=\"https:\/\/developer.apple.com\/design\/human-interface-guidelines\/sf-symbols\/overview\/\">Apple&rsquo;s SF Symbols<\/a> to show icons for each paragraph of the help, although I may change the colour of these icons as they look at bit too much like buttons right now.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AnagramHelp.png\" alt=\"Help & Settings\"><\/p>\n<hr>\n<h3 id=\"next-steps\">Next Steps<\/h3>\n<p>Well, I am hoping that someone will come up with a good name. I thought of &ldquo;Anagram Assistant&rdquo; but that doesn&rsquo;t fit underneath the home screen icon and it was shortened to &ldquo;Anagram&rdquo;. I don&rsquo;t want people to see it and think it is just one of those dictionary lookup anagram finders, so I would like something more descriptive while still being short, or at least having a short variant.<\/p>\n<p>In honour of P.G.Wodehouse&rsquo;s favourite crossword clue, I thought of calling it &ldquo;E blank U&rdquo; but that isn&rsquo;t an anagram, so it doesn&rsquo;t really work. For people not familiar with that reference, Wodehouse&rsquo;s less quick-witted characters always get stuck on &ldquo;Large flightless Australian bird, 3 letters. E blank U&rdquo;.<\/p>\n<p>A clever name would be good - perhaps an anagram itself? If you think of anything, please let me know on <a href=\"https:\/\/twitter.com\/trozware\">Twitter<\/a>, by using the email link below or through the <a href=\"https:\/\/troz.net\/contact\/\">Contact page<\/a>. The namer will get full credit in the app. And use one of those methods to contact me if you would like to test the app before it is released.<\/p>\n<p>Once I have a name, I can get to work on the usual secondary tasks which take so much time: App Store set up, screen shots, a support page and so on.<\/p>\n<p>I haven&rsquo;t tried an iPad version yet. I got stung once by testing an iPad version of an app, deciding it didn&rsquo;t work well and then running into Apple&rsquo;s ban on dropping a platform from a published app. This has discouraged me from iPad apps ever since, which I doubt was their intention.<\/p>\n<hr>\n<blockquote>\n<p>And if you are curious about the solutions to the clues I used in the examples:<\/p>\n<p>Users rip off revelation (8) = SURPRISE<br>\nCreationist has no taste for what&rsquo;s sarcastic (6) = IRONIC<br>\nConsumables minus bacon and shellfish (6) = MUSSEL<\/p>\n<\/blockquote>","url":"https:\/\/troz.net\/post\/2020\/name_this_app\/","date":610680381},{"title":"SwiftUI Color","content":"<p>As developers, we are used to thinking of color as a numeric way to specify a particular tint. But in SwiftUI, <code>Color<\/code> - like almost everything else - is actually a <code>View<\/code> in its own right. This leads us to two very interesting questions: how do we use a view to specify a color and how can we use the fact that <code>Color<\/code> is <code>View<\/code>?<\/p>\n<hr>\n<h2 id=\"specifying-a-color\">Specifying a Color<\/h2>\n<p>To start my investigations of <code>Color<\/code>, I created a new iOS single view app in Xcode. Regular followers will know that I am a passionate advocate of macOS programming, but when experimenting with SwiftUI, I prefer to use an iPhone app as the preview canvas fits very neatly into the main Xcode window.<\/p>\n<p>The default <code>ContentView<\/code> contains a single <code>Text<\/code> view. To change the color of the text in this view, I added a modifier:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n      .foregroundColor(.red)\n<\/code><\/pre><\/div><p>The <code>foregroundColor<\/code> modifier expects a <code>Color<\/code> so there was no need to tell it that the parameter is a <code>Color<\/code> and I was able to use the short way of describing one of the standard colors.<\/p>\n<p>Adding a background color is a bit different because a background can be any view, not just a color. So the modifier needs to specify that this is a <code>Color<\/code> view, as well as setting the actual color.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n        .padding()\n        .foregroundColor(.red)\n        .background(Color.yellow)\n<\/code><\/pre><\/div><p><em>I added the padding to make the overall size bigger so that the background color was more obvious.<\/em><\/p>\n<p>Command-click on <code>.red<\/code> or <code>.yellow<\/code> in the code and select &ldquo;Jump to Definition&rdquo;. This lists the available pre-defined colors. As well a set of basic colors and a clear option, there are two extra entries: primary &amp; secondary. And if you scroll back up the page a bit, you will see another one: accentColor.<\/p>\n<p>Choosing one of the preset options is the easiest way to select a color. But try this:<\/p>\n<p>In your code, type <code>let uiColor = UIColor.<\/code> and have a look at the auto-complete suggestions that appear after you type the period. Scrolling past the various <code>init<\/code> methods, you will see that <code>UIColor<\/code> has a lot more options than <code>Color<\/code>. There are a bunch of colors, a section of system colors and a lot of semantic colors like placeholderText, secondarySystemBackground.<\/p>\n<p>Why does UIColor get these other useful looking options and Color does not?<\/p>\n<p>Well, I don&rsquo;t have an answer to that except that I hope they will appear over time. But in the meantime, it is easy enough to create a SwiftUI <code>Color<\/code> from a <code>UIColor<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">let<\/span> backgroundColor = Color(UIColor.secondarySystemBackground)\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n      VStack {\n        Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n      }\n      .background(backgroundColor)\n    }\n<\/code><\/pre><\/div><p>If you know the RGB values of the color you want to use, it is possible to create a <code>Color<\/code> directly by various methods like this one for setting the color using the RGB values.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">let<\/span> rgbColor = Color(red: <span style=\"color:#ae81ff\">1.0<\/span>, green: <span style=\"color:#ae81ff\">0.5<\/span>, blue: <span style=\"color:#ae81ff\">0.5<\/span>)\n<\/code><\/pre><\/div><p>But when you get to this stage, I strongly suggest that you start using color assets instead.<\/p>\n<hr>\n<h2 id=\"using-color-assets\">Using Color Assets<\/h2>\n<p>Go to Assets.xcassets and click the plus button at the bottom of the list of assets. Select &ldquo;New Color Set&rdquo; and you will get a new asset called &ldquo;Color&rdquo;. You can double-click the name to edit it to something that makes sense to you.<\/p>\n<style>\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n<\/style>\n\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-colors-add-set.png\" alt=\"Add Color Set\"><\/p>\n<p>While naming it after the color may seem logical, I prefer to think about the use cases for this color and set the name to something like &ldquo;cardBackground&rdquo; or &ldquo;alertText&rdquo;.<\/p>\n<p>By default, your new color set will contains a single color block. Click in the color block itself and then you will be able to edit the color in the Attributes Inspector. If you click the &ldquo;Content&rdquo; popup, you will get access to all the system colors, and you can also select any color space and create a custom color using that color space. Click &ldquo;Color Panel&rdquo; to access a standard color picker if you need it. And change the input method to whatever suits the color information you have.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-colors-set.png\" alt=\"Edit Color Set\"><\/p>\n<p>Modern apps need to be able to handle light and dark modes, and this is where using a color set really shines. Set the color to what you want to use for light mode and then choose &ldquo;Any, Dark&rdquo; from the Appearances popup menu in the Attributes Inspector.<\/p>\n<p>Now your color set has two blocks and you can change the Dark one to whatever color this should be in dark mode. This feature of Color Sets is a very strong argument for using them instead of defining colors using their RGB values.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-colors-multi-set.png\" alt=\"Light & Dark Color Set\"><\/p>\n<p>And now for the really neat part. To use any of these color sets in your code, add a modifier like <code>foregroundColor<\/code> just the same as usual, but when the placeholder for the color is selected, press Shift-Command-L to bring up the Library palette and choose the Color icon at the right. You will see all your color sets there and you can insert them easily and accurately.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-colors-use-color-set.png\" alt=\"Using a Color Set\"><\/p>\n<p>Here is the code for my <code>AlertView<\/code> using two color sets.<\/p>\n<p>Some people may object to using &ldquo;magic strings&rdquo; to specify the color sets but I feel that so long as the Library is used to insert the color names automatically, there is very little chance of error. But you could always make an enum or struct of color name constants and use these instead.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">AlertView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> alertText = <span style=\"color:#e6db74\">&#34;Something went wrong!&#34;<\/span>\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Text(alertText)\n            .padding()\n            .background(Color(UIColor.secondarySystemBackground))\n            .cornerRadius(<span style=\"color:#ae81ff\">15<\/span>)\n            .shadow(color: Color(<span style=\"color:#e6db74\">&#34;alertShadow&#34;<\/span>), radius: <span style=\"color:#ae81ff\">5<\/span>, x: <span style=\"color:#ae81ff\">1<\/span>, y: <span style=\"color:#ae81ff\">1<\/span>)\n            .foregroundColor(Color(<span style=\"color:#e6db74\">&#34;alertText&#34;<\/span>))\n    }\n}\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">AlertView_Previews<\/span>: PreviewProvider {\n    <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">var<\/span> previews: some View {\n        Group {\n            AlertView().preferredColorScheme(.light)\n            AlertView().preferredColorScheme(.dark)\n        }\n        .previewLayout(.sizeThatFits)\n    }\n}\n<\/code><\/pre><\/div><p>And here is a composite image showing the two versions of the alert with the colors specified by two color sets:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-colors-alerts.png\" alt=\"Alerts Using Color Set\"><\/p>\n<hr>\n<h2 id=\"light--dark-mode-system-colors\">Light &amp; Dark Mode System Colors<\/h2>\n<p>Color&rsquo;s preset colors adapt automatically to the environment so that they work with dark mode or light mode just like your own Color Sets can.<\/p>\n<p>I wrote a test view to loop through all the preset colors (except clear) and display their descriptions in their own color.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">let<\/span> standardColors: [Color] = [\n        .black, .white, .gray, .red, .green, .blue, .orange,\n        .yellow, .pink, .purple, .primary, .secondary, .accentColor\n    ]\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        VStack(alignment: .leading) {\n            ForEach(standardColors, id: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.<span style=\"color:#66d9ef\">self<\/span>) { color <span style=\"color:#66d9ef\">in<\/span>\n                Text(color.description)\n                    .bold()\n                    .foregroundColor(color)\n            }\n            .font(.title)\n        }\n        .padding()\n    }\n}\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView_Previews<\/span>: PreviewProvider {\n    <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">var<\/span> previews: some View {\n        Group {\n            ContentView().preferredColorScheme(.light)\n            ContentView().preferredColorScheme(.dark)\n        }\n    }\n}\n<\/code><\/pre><\/div><p>The canvas shows two previews: one for light mode and one for dark mode.<\/p>\n<p>If you have a color picker app (I use <a href=\"https:\/\/github.com\/Toinane\/colorpicker\/releases\/tag\/2.0.3\">Colorpicker<\/a>), you can detect the RGB values in the two previews. I made the font bold to make this easier. Red is <code>rgb(232, 77, 61)<\/code> in light mode but <code>rgb(233, 85, 69)<\/code> in dark mode. And the others have similar modifications to make them look their best in each environment.<\/p>\n<p>Take particular note of the three at the bottom of the list: primary, secondary and accentColor. These are incredibly useful when making a layout that works in both light and dark modes.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/swiftui-colors-light-dark.png\" alt=\"Color previews\"><\/p>\n<p>When choosing a UIColor or NSColor, it is best to use the system versions, so <code>.systemBlue<\/code> instead of <code>.blue<\/code> as this gives the dark\/light variants that we just saw. And the other semantic colors like <code>UIColor.secondarySystemBackground<\/code> also have dark\/light variants automatically.<\/p>\n<hr>\n<h3 id=\"color-as-a-view\">Color as a View<\/h3>\n<p>Now let&rsquo;s consider the effect of <code>Color<\/code> being a view and not just a description of a tint. Imagine you wanted to draw a colored box on the screen. Using UIKit, you would probably think of using a <code>UIView<\/code>. With AppKit, maybe an <code>NSBox<\/code>. Or perhaps you would have jumped straight to a Bezier path.<\/p>\n<p>Create a new SwiftUI view and replace the default <code>Text<\/code> with a <code>Color<\/code>, like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">BoxView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Color.blue\n    }\n}\n<\/code><\/pre><\/div><p>Resume the canvas preview and you will see the color fill the preview iPhone screen, except for the safe areas top and bottom.<\/p>\n<p>To make this into a box, add a <code>frame<\/code> modifier with the required height and width. And now you have a box, far more easily than you could in either UIKit or AppKit.<\/p>\n<p>To be honest, in SwiftUI, you would probably use a <code>Rectangle<\/code> instead of a plain <code>Color<\/code> if you wanted a box of a set size but it is interesting to consider how <code>Color<\/code> could be made to work.<\/p>\n<p>A more valuable use of <code>Color<\/code> is to set the background.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">BackgroundView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        ZStack {\n            Color.green\n\n            Text(<span style=\"color:#e6db74\">&#34;Hello, green background&#34;<\/span>)\n        }\n    }\n}\n<\/code><\/pre><\/div><p>This makes the entire background green and shows the text centered on it.<\/p>\n<p>And to make the color extend into the safe areas:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Color.green.edgesIgnoringSafeArea(.all)\n<\/code><\/pre><\/div><p>I prefer to put the <code>edgesIgnoringSafeArea<\/code> modifier on the <code>Color<\/code> only and not on the entire <code>ZStack<\/code>. That way the other contents of the <code>ZStack<\/code> will all stay inside the safe area.<\/p>\n<hr>\n<p>So in summary, use preset colors or color assets to set your colors. And use the <code>Color<\/code> view to set a background color for a view.<\/p>\n<p>I hope you found this article useful, and if you have any suggestions, corrections or improvements, please contact me using one of the links below or through the <a href=\"https:\/\/troz.net\/contact\/\">Contact<\/a> page.<\/p>","url":"https:\/\/troz.net\/post\/2020\/swiftui-color\/","date":610680368},{"title":"Custom Fonts in iOS & macOS apps","content":"<p>As a rule, I prefer to use fonts that come pre-installed with the system. That means that your interface is already familiar to users, you get dynamic font sizing and if Apple updates the fonts, you get the updates without doing anything.<\/p>\n<p>But sometimes, you really need to use a different font in your apps, and as the process of getting a custom font to display in your app can be confusing and tedious, I thought I would go through the steps for both iOS and macOS apps.<\/p>\n<p>I probably should have published this on a different day, but it is not a joke&hellip;. really.<\/p>\n<hr>\n<h2 id=\"getting-a-font-file\">Getting a Font File<\/h2>\n<p>The first thing is to find a suitable font and make sure that the license for that font matches your use. I wanted a font that looked like it was hand-written, so I went to fontspace and searched the <a href=\"https:\/\/www.fontspace.com\/category\/handwriting\">hand-writing category<\/a> there.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SelectFont1.png\" alt=\"Fonts\"><\/p>\n<p>Since I wanted to use this in a paid app, I checked the &ldquo;Commercial-use&rdquo; button to limit the search. The one I chose was called &ldquo;<a href=\"https:\/\/www.fontspace.com\/get\/family\/4yyjn\">Painting With Chocolate<\/a>&rdquo; by &ldquo;Make mooze&rdquo;<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SelectFont2.png\" alt=\"Download font\"><\/p>\n<p>I downloaded the font and un-zipped the file which gave me a single file called &ldquo;Paintingwithchocolate-K5mo.ttf&rdquo;. You can use either &ldquo;.ttf&rdquo; or &ldquo;.otf&rdquo; font files.<\/p>\n<hr>\n<h2 id=\"using-the-font-in-an-ios-app\">Using the Font in an iOS App<\/h2>\n<p>Now to use the font, first in an iOS app. Boot up Xcode and create a new SwiftUI project for iOS.<\/p>\n<p>Once the project is open, drag the font file into the Project Navigator. At this stage there are 2 crucial settings:<\/p>\n<ul>\n<li>Check &ldquo;Copy files if needed&rdquo;.<\/li>\n<li>Check your app in the &ldquo;Add to targets&rdquo; section.<\/li>\n<\/ul>\n<p><img src=\"https:\/\/troz.net\/images\/AddFontToProject.png\" alt=\"Add font to project\"><\/p>\n<blockquote>\n<p><em>In one of my tests, the file stayed in the Downloads folder even after checking &ldquo;Copy files&rdquo;, so I deleted the reference, manually moved the font file to my project folder and added it again.<\/em><\/p>\n<\/blockquote>\n<p>Now the font file is in the project but there is still more work to do.<\/p>\n<p>Select the font file in the Project Navigator. Press Return as if you are going to edit the name. Select the complete file name, <strong>including the file extension<\/strong> and copy it.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/CopyFontName.png\" alt=\"Copy font file name\"><\/p>\n<p>Now go to the Info.plist file. Right-click in the blank space below the existing entries and select &ldquo;Add Row&rdquo; from the popup menu. In the box that appears, start typing &ldquo;Font&rdquo; using an upper-case &ldquo;F&rdquo;. When you see &ldquo;Fonts provided by application&rdquo;, select that.<\/p>\n<p>This entry is an array. Click the disclosure triangle to the left and you should see &ldquo;Item 0&rdquo; appear. Paste the name of your font file, including the file extension, into the value for &ldquo;Item 0&rdquo;.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/FontsProvided.png\" alt=\"Setting Info.plist entry\"><\/p>\n<p>Your app now has a font file and knows to make it available. But you aren&rsquo;t finished yet.<\/p>\n<p>To use a custom font, you need to know its exact name. In SwiftUI, the code will be something like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n      .font(.custom(<span style=\"color:#e6db74\">&#34;Font-Name-Goes-Here&#34;<\/span>, size: <span style=\"color:#ae81ff\">14<\/span>))\n<\/code><\/pre><\/div><p>But the exact name is not always obvious and is rarely the file name. So the best thing to do is to ask the app what fonts it now has available. This will also act as confirmation that the font file is being included correctly in your project.<\/p>\n<p>To get the app to list all its fonts, I used this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n            .onAppear { <span style=\"color:#66d9ef\">self<\/span>.listInstalledFonts() }\n    }\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">listInstalledFonts<\/span>() {\n        <span style=\"color:#66d9ef\">let<\/span> fontFamilies = UIFont.familyNames.sorted()\n        <span style=\"color:#66d9ef\">for<\/span> family <span style=\"color:#66d9ef\">in<\/span> fontFamilies {\n            print(family)\n            <span style=\"color:#66d9ef\">for<\/span> font <span style=\"color:#66d9ef\">in<\/span> UIFont.fontNames(forFamilyName: family).sorted() {\n                print(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#ae81ff\">\\t<\/span><span style=\"color:#e6db74\">\\(<\/span>font<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n            }\n        }\n    }\n}\n<\/code><\/pre><\/div><p>You can run the app in the Simulator or use &ldquo;Debug Preview&rdquo; to make this show up in the console, but once you have the list, scroll through in until you find the font you just added. The headers are the names of font families and the indented entries are the font names themselves.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/FontsList-iOS.png\" alt=\"List of Fonts\"><\/p>\n<p>This time I found that the name of the font was quite obvious: &ldquo;PaintingWithChocolate&rdquo; but this is not always the case. And if the font has any variants, you will need to use the complete name e.g. &ldquo;Optima-ExtraBlack&rdquo;<\/p>\n<p>With the name of the font, you are finally able to use it in the app, like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n            .font(.custom(<span style=\"color:#e6db74\">&#34;PaintingWithChocolate&#34;<\/span>, size: <span style=\"color:#ae81ff\">40<\/span>))\n    }\n}\n<\/code><\/pre><\/div><p><img src=\"https:\/\/troz.net\/images\/FontUsed-iOS.png\" alt=\"Font in use - iOS\"><\/p>\n<hr>\n<h2 id=\"using-the-font-in-a-mac-app\">Using the Font in a Mac App<\/h2>\n<p>The process for a Mac app is mostly the same.<\/p>\n<p>Install the font file in your project as before, making sure to copy the file into the project and to add it to the app target.<\/p>\n<p>For a Mac app, you do not need to specify the font file name in your Info.plist file. Instead, you have to tell the Info.plist where to look for custom fonts in your project directory.<\/p>\n<p>Open your Info.plist, right-click in the blank space below the existing entries and select &ldquo;Add Row&rdquo; from the popup menu. Start typing &ldquo;Application&rdquo; using an upper-case &ldquo;A&rdquo;. When you see &ldquo;Application fonts resource path&rdquo;, select that and enter a period as the value. A period or full-stop tells Xcode that you mean the current directory but even if you have your fonts in a sub-directory, this seems to work.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/AppFontPath.png\" alt=\"Application Font Path\"><\/p>\n<p>You do not need to set &ldquo;Fonts provided by application&rdquo; for a Mac app, although if I had a problem, I would set it as I feel that this is something that Apple may add at some stage.<\/p>\n<p>While I was using the same font for both apps and so already had the exact name, you may still need to check the list of installed fonts in a Mac app. The function for doing that is quite different:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">listInstalledFonts<\/span>() {\n      <span style=\"color:#66d9ef\">let<\/span> fontFamilies = NSFontManager.shared.availableFontFamilies.sorted()\n      <span style=\"color:#66d9ef\">for<\/span> family <span style=\"color:#66d9ef\">in<\/span> fontFamilies {\n          print(family)\n          <span style=\"color:#66d9ef\">let<\/span> familyFonts = NSFontManager.shared.availableMembers(ofFontFamily: family)\n          <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> fonts = familyFonts {\n              <span style=\"color:#66d9ef\">for<\/span> font <span style=\"color:#66d9ef\">in<\/span> fonts {\n                print(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#ae81ff\">\\t<\/span><span style=\"color:#e6db74\">\\(<\/span>font<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n              }\n          }\n      }\n  }\n<\/code><\/pre><\/div><p>The format of the print-out is different too, but you can see where I have selected the exact name to use.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/FontList-Mac.png\" alt=\"List of Fonts - Mac\"><\/p>\n<p>Then the SwiftUI code for using the font was just the same:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Text(<span style=\"color:#e6db74\">&#34;Hello, World!&#34;<\/span>)\n            .font(.custom(<span style=\"color:#e6db74\">&#34;PaintingWithChocolate&#34;<\/span>, size: <span style=\"color:#ae81ff\">60<\/span>))\n            .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n}\n<\/code><\/pre><\/div><p><img src=\"https:\/\/troz.net\/images\/FontUsed-Mac.png\" alt=\"Font in use in Mac app\"><\/p>\n<hr>\n<h2 id=\"storyboard-apps\">Storyboard apps<\/h2>\n<p>The examples above were both SwiftUI projects, but these techniques work much the same in a storyboard project.<\/p>\n<p>Follow the same steps to install the font and configure the Info.plist file and use the same functions to list the installed files.<\/p>\n<p>To use the fonts, if you are using a storyboard in an iOS project, select &ldquo;Custom&rdquo; in the font picker and then you will be able to see your custom font listed if it is installed correctly. I could not work out how to get the custom font appearing in this menu for a macOS app.<\/p>\n<p>To apply the font programmatically, you can use something like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#75715e\">\/\/ iOS<\/span>\n    fontLabel.font = UIFont(name: <span style=\"color:#e6db74\">&#34;PaintingWithChocolate&#34;<\/span>, size: <span style=\"color:#ae81ff\">36<\/span>)\n\n    <span style=\"color:#75715e\">\/\/ macOS<\/span>\n    fontLabel.font = NSFont(name: <span style=\"color:#e6db74\">&#34;PaintingWithChocolate&#34;<\/span>, size: <span style=\"color:#ae81ff\">24<\/span>)\n<\/code><\/pre><\/div><hr>\n<h2 id=\"trouble-shooting\">Trouble-shooting<\/h2>\n<p>If you have gone through these steps and the font still isn&rsquo;t working, here are a few things to check:<\/p>\n<ol>\n<li>\n<p>Is the font file&rsquo;s target membership set to the app?\n<img src=\"https:\/\/troz.net\/images\/FontFileTargetSet.png\" alt=\"File target Set\"><\/p>\n<\/li>\n<li>\n<p>Is the font file being included in the &ldquo;Copy Bundle Resources&rdquo; build phase? If not, drag it in manually from the Project Navigator.\n<img src=\"https:\/\/troz.net\/images\/FontInCopyBundleResources.png\" alt=\"Copy Bundle Resources\"><\/p>\n<\/li>\n<li>\n<p>iOS Info.plist - is there a typo in the &ldquo;Fonts provided by application&rdquo; setting? Copy the file name and paste it in directly rather than trying to re-type it.<\/p>\n<\/li>\n<li>\n<p>macOS Info.plist- have you put a single period &ldquo;.&rdquo; in the &ldquo;Application fonts resource path&rdquo; setting?<\/p>\n<\/li>\n<li>\n<p>Run the font name listing utility - does the font show up there?<\/p>\n<\/li>\n<li>\n<p>Have you used the font name EXACTLY as shown in the font listing? Copy &amp; paste it from the font list.<\/p>\n<\/li>\n<\/ol>\n<hr>\n<p>Having struggled with various of these steps myself recently, I thought it was worth documenting it. I am sure that future me will be grateful, but hopefully others will find it useful also.<\/p>\n<p>If you have any suggestions, corrections or improvements, please contact me using one of the links below or though the <a href=\"https:\/\/troz.net\/contact\/\">Contact<\/a> page.<\/p>","url":"https:\/\/troz.net\/post\/2020\/custom-fonts\/","date":607393679},{"title":"SwiftUI for Mac Extras","content":"<p>Last year, I wrote a 3 part series of articles on <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-1\/\">using SwiftUI to build a Mac<\/a> app. I would like to thank everyone who contacted me about this series. It was received very well and revealed that there is still a large amount of interest in programming for the Mac.<\/p>\n<p>Some of the responses I got were pointing out different or better ways to do things, so I am going to list them here, adding to this post as I get new information. The relevant sections in the original posts will have links to the fixes suggested here, but I decided it was easier to list the changes in a separate post, rather than asking people to re-read the whole series looking for modifications.<\/p>\n<hr>\n<h2 id=\"dismissing-sheets\">Dismissing sheets<\/h2>\n<blockquote>\n<p>I just read your series on writing Mac apps with SwiftUI. Great stuff!\nJust wanted to add that in part 2 when dismissing sheets there are two ways to do that, one of them is the one that you figured out and the other is to have the view dismiss itself by grabbing its PresentationMode from the environment. This way you don’t need to pass presentation bindings to your sheet views.<\/p>\n<\/blockquote>\n<p>Paul Hudson of Hacking with Swift explains how to use both methods very clearly in his article on <a href=\"https:\/\/www.hackingwithswift.com\/quick-start\/swiftui\/how-to-make-a-view-dismiss-itself\">How to make a view dismiss itself<\/a>.<\/p>\n<p>My <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-3#sheets\">original technique<\/a> passed the Boolean that triggered the sheet to appear, as a Binding to the sheet view. The sheet view could then toggle this to make the parent view dismiss it.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .sheet(isPresented: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing) {\n      SheetView(isVisible: <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing)\n  }\n<\/code><\/pre><\/div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SheetView<\/span>: View {\n    @Binding <span style=\"color:#66d9ef\">var<\/span> isVisible: Bool\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        VStack {\n            Text(<span style=\"color:#e6db74\">&#34;This is a sheet.&#34;<\/span>)\n            Button(<span style=\"color:#e6db74\">&#34;OK&#34;<\/span>) {\n                <span style=\"color:#66d9ef\">self<\/span>.isVisible = <span style=\"color:#66d9ef\">false<\/span>\n            }\n        }\n        .frame(width: <span style=\"color:#ae81ff\">300<\/span>, height: <span style=\"color:#ae81ff\">150<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>The presentation mode method leaves it up to the sheet to dismiss itself. The parent view shows the sheet but does not pass any binding.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .sheet(isPresented: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing) {\n      SheetView()\n  }\n<\/code><\/pre><\/div><p>The sheet view gets an environment property that it can use to change its presentation mode, dismissing itself that way.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SheetView<\/span>: View {\n    @Environment(<span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.presentationMode) <span style=\"color:#66d9ef\">var<\/span> presentationMode\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        VStack {\n            Text(<span style=\"color:#e6db74\">&#34;This is a sheet.&#34;<\/span>)\n            Button(<span style=\"color:#e6db74\">&#34;OK&#34;<\/span>) {\n                <span style=\"color:#66d9ef\">self<\/span>.presentationMode.wrappedValue.dismiss()\n            }\n        }\n        .frame(width: <span style=\"color:#ae81ff\">300<\/span>, height: <span style=\"color:#ae81ff\">150<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>I guess the presentation mode method is slightly easier to understand and it leaves the caller of the sheet view less cluttered which is a good thing. But the two methods are functionally identical, so use whichever you prefer. The sample project now contains both methods, with one commented out, so you can swap the comments to test.<\/p>\n<hr>\n<h2 id=\"subscribing-on-the-main-thread\">Subscribing on the Main Thread<\/h2>\n<p>In <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-2#passing-menu-data-to-a-view\">part 2 of this series<\/a>, I created a menu item caused the downloaded image to be flipped. Selecting the menu item posted a notification:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">@IBAction<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">flipImage<\/span>(<span style=\"color:#66d9ef\">_<\/span> sender: Any) {\n        NotificationCenter.<span style=\"color:#66d9ef\">default<\/span>.post(name: .flipImage, object: <span style=\"color:#66d9ef\">nil<\/span>)\n    }\n<\/code><\/pre><\/div><p>which the view showing the image was listening for.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">let<\/span> flipImageMenuItemSelected = NotificationCenter.<span style=\"color:#66d9ef\">default<\/span>\n        .publisher(<span style=\"color:#66d9ef\">for<\/span>: .flipImage)\n<\/code><\/pre><\/div><p>The outermost component of the view&rsquo;s body used an <code>onReceive<\/code> modifier to get this notification and react accordingly.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  <span style=\"color:#66d9ef\">var<\/span> body: some View {\n      VStack {\n        <span style=\"color:#75715e\">\/\/ layout omitted for brevity<\/span>\n      }\n      .onReceive(flipImageMenuItemSelected) { <span style=\"color:#66d9ef\">_<\/span> <span style=\"color:#66d9ef\">in<\/span>\n          DispatchQueue.main.async {\n              <span style=\"color:#66d9ef\">self<\/span>.imageIsFlipped.toggle()\n          }\n      }\n    }\n<\/code><\/pre><\/div><p>Since the notification was triggering a change to the UI, I made sure that this happened on the main thread.<\/p>\n<p>But it was pointed out to me that it would be easier to make sure that the publisher was set up to use the main thread all the time, instead of having to specify the main queue when processing the notification.<\/p>\n<p>So now the publisher is defined like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">let<\/span> flipImageMenuItemSelected = NotificationCenter.<span style=\"color:#66d9ef\">default<\/span>\n      .publisher(<span style=\"color:#66d9ef\">for<\/span>: .flipImage)\n      .receive(on: RunLoop.main)\n<\/code><\/pre><\/div><p>And the <code>onReceive<\/code> modifier can toggle the <code>imageIsFlipped<\/code> flag directly, without having to worry about the thread.<\/p>\n<p>This seems to me a much better solution as it sets the correct thread once when the publisher is created and makes using it much cleaner and easier.<\/p>\n<hr>\n<h2 id=\"passing-data-back-from-appkit\">Passing data back from AppKit<\/h2>\n<p>The previous two changes have been more a matter of style, but this one is a real error that would stop an app working as it should.<\/p>\n<p>In <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-2#user-interface-elements\">the User Interface Elements section of the series<\/a>, I used <code>NSViewRepresentable<\/code> to embed a standard <code>NSColorWell<\/code> in a SwiftUI view. I thought this was working properly, but then I got this email:<\/p>\n<blockquote>\n<p>I noticed that the selectedColor in the EmbeddedColorWell is not being mutated and is not being used in a two-way manner. The selectedColor is initialized to NSColor.blue and used to set the color in the NSColorWell view. When the NSColorWell color is changed, it does change the color of the EmbeddedColorWell view. However, the actual @State var selectedColor value is never mutated in this process beyond the initialized value of NSColor.blue.<\/p>\n<\/blockquote>\n<p>This is in the Form tab of the UI Samples window. As suggested to me, I added a <code>background<\/code> modifier to set the background of a portion of the view to the selected color. And although the NSColorWell showed newly selected colors, the background remained stubbornly blue.<\/p>\n<p>The solution was to add a <code>Coordinator<\/code> to the <code>NSViewRepresentable<\/code> and have it subscribe to any changes in the color and update the embedded view&rsquo;s selected color as needed. I would not have come up with this by myself, so many thanks to the person who sent it to me.<\/p>\n<p>Here is the full code for the <code>EmbeddedColorWell<\/code> struct:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">EmbeddedColorWell<\/span>: NSViewRepresentable {\n    @Binding <span style=\"color:#66d9ef\">var<\/span> selectedColor: NSColor\n    \n    <span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">Coordinator<\/span>: NSObject {\n        <span style=\"color:#66d9ef\">var<\/span> embedded: EmbeddedColorWell\n        <span style=\"color:#66d9ef\">var<\/span> subscription: AnyCancellable?\n\n        <span style=\"color:#66d9ef\">init<\/span>(<span style=\"color:#66d9ef\">_<\/span> embedded: EmbeddedColorWell) {\n            <span style=\"color:#66d9ef\">self<\/span>.embedded = embedded\n        }\n        \n        <span style=\"color:#75715e\">\/\/ Observe KVO compliant color property on NSColorWell object.<\/span>\n        <span style=\"color:#75715e\">\/\/ Update the selectedColor property on EmbeddedColorWell as needed.<\/span>\n        <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">changeColor<\/span>(colorWell: NSColorWell) {\n            subscription = colorWell\n                .publisher(<span style=\"color:#66d9ef\">for<\/span>: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.color, options: .new)\n                .sink { color <span style=\"color:#66d9ef\">in<\/span>\n                    DispatchQueue.main.async {\n                        <span style=\"color:#66d9ef\">self<\/span>.embedded.selectedColor = color\n                    }\n            }\n        }\n    }\n    \n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">makeCoordinator<\/span>() -&gt; EmbeddedColorWell.Coordinator {\n        Coordinator(<span style=\"color:#66d9ef\">self<\/span>)\n    }\n    \n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">makeNSView<\/span>(context: Context) -&gt; NSColorWell {\n        <span style=\"color:#66d9ef\">let<\/span> colorWell = NSColorWell(frame: .zero)\n        context.coordinator.changeColor(colorWell: colorWell)\n        <span style=\"color:#66d9ef\">return<\/span> colorWell\n    }\n    \n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">updateNSView<\/span>(<span style=\"color:#66d9ef\">_<\/span> nsView: NSColorWell, context: Context) {\n        nsView.color = selectedColor\n    }\n}\n<\/code><\/pre><\/div><p>In the previous section, I changed the publisher to use the main RunLoop so as to avoid having the use <code>DispatchQueue.main.async<\/code>. In this instance, that did not work so well. It only updated the selected color after the mouse had been released. But using <code>DispatchQueue.main.async<\/code> made the update live.<\/p>\n<hr>\n<p>As I explained at the start of these articles, I was documenting my explorations in using SwiftUI for a Mac app and while I hoped there would be some useful examples, this was not intended to be a definitive guide. So I am very grateful to everyone who has contributed to these updates.<\/p>\n<p>If you have anything more that you would like to be included, please contact me using one of the contact buttons below or through the <a href=\"https:\/\/troz.net\/contact\/\">Contact page<\/a> on this site.<\/p>\n<p>The edited project is available on <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\">GitHub<\/a>.<\/p>","url":"https:\/\/troz.net\/post\/2020\/swiftui_for-mac-extras\/","date":601781577},{"title":"SwiftUI for Mac - Part 3","content":"<p>In <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-1\/\">part 1 of this series<\/a>, I created a Mac app using SwiftUI. The app uses a Master-Detail design to list entries in an outline on the left and show details about the selected entry in the detail view on the right. In <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-2\/\">part 2<\/a> I explored using menus, adding all the expected user interface elements and opening secondary windows.<\/p>\n<p>In this third and final part, I want to look at the various ways to present dialogs to the user.<\/p>\n<p>There are four different types of dialog that I want to explore:<\/p>\n<ul>\n<li>Alert<\/li>\n<li>Action<\/li>\n<li>Sheet<\/li>\n<li>File dialogs (open &amp; save)<\/li>\n<\/ul>\n<p>So the first thing to do is add a footer to the DetailView to trigger each of these. I am going to separate this out into a new subview for neatness.<\/p>\n<h2 id=\"alert\">Alert<\/h2>\n<p>To make an Alert, I need an @State Bool which sets whether the alert is visible or not. All the button has to do is toggle that Bool. Stripping out the extra code and views, this is what I have.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">DialogsView<\/span>: View {\n    @State <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> alertIsShowing = <span style=\"color:#66d9ef\">false<\/span>\n    @State <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> dialogResult = <span style=\"color:#e6db74\">&#34;Click the buttons above to test the dialogs.&#34;<\/span>\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Button(<span style=\"color:#e6db74\">&#34;Alert&#34;<\/span>) { <span style=\"color:#66d9ef\">self<\/span>.alertIsShowing.toggle() }\n    }\n}\n<\/code><\/pre><\/div><p>To configure the alert itself, I added an alert modifier to the outmost view in this view. The <code>dialogResult<\/code> string is a diagnostic that I can use to confirm that the results of the various dialogs get passed back to the parent view.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Alert(title: Text(<span style=\"color:#e6db74\">&#34;Alert&#34;<\/span>),\n        message: Text(<span style=\"color:#e6db74\">&#34;This is an alert!&#34;<\/span>),\n        dismissButton: .<span style=\"color:#66d9ef\">default<\/span>(Text(<span style=\"color:#e6db74\">&#34;OK&#34;<\/span>)) {\n          <span style=\"color:#66d9ef\">self<\/span>.dialogResult = <span style=\"color:#e6db74\">&#34;OK clicked in Alert&#34;<\/span>\n      })\n<\/code><\/pre><\/div><p>There were a few things that tripped me up in this relatively short chunk of code. Firstly, both title and message must be Text views, not strings. If you get an error message that says &ldquo;Cannot convert value of type &lsquo;String&rsquo; to expected argument type &lsquo;Text&rsquo;&rdquo;, then you have forgotten to use a Text view.<\/p>\n<p>Then there is the button which auto-suggest tells me is of type Alert.Button. I couldn&rsquo;t find any documentation for this, but delving into the definition for Alert, I see that there are three pre-defined button types: default, cancel or destructive. Cancel actually has two variants and will use a label appropriate to the user&rsquo;s locale if no label is supplied.<\/p>\n<p>Again, these buttons need a Text view as the label (if supplied) and can take an action closure, which I used to update my <code>dialogResult<\/code> string.<\/p>\n<p>This version showed a single <code>dismissButton<\/code> but I saw that there was a variation of Alert with <code>primary<\/code> and <code>secondary<\/code> buttons. It was not obvious that these would also dismiss the alert dialog, but I tried anyway.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Alert(title: Text(<span style=\"color:#e6db74\">&#34;Alert&#34;<\/span>),\n        message: Text(<span style=\"color:#e6db74\">&#34;This is an alert!&#34;<\/span>),\n        primaryButton: .<span style=\"color:#66d9ef\">default<\/span>(Text(<span style=\"color:#e6db74\">&#34;OK&#34;<\/span>), action: {\n          <span style=\"color:#66d9ef\">self<\/span>.dialogResult = <span style=\"color:#e6db74\">&#34;OK clicked in Alert&#34;<\/span>\n        }), secondaryButton: .cancel({\n          <span style=\"color:#66d9ef\">self<\/span>.dialogResult = <span style=\"color:#e6db74\">&#34;Cancel clicked in Alert&#34;<\/span>\n        }))\n<\/code><\/pre><\/div><p>This worked very nicely and the Esc and Return keys triggered the two buttons as you would expect with both of them closing the dialog.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-alert.png\" alt=\"Alert\"><\/p>\n<p>I tried using the <code>destructive<\/code> button type, but there was no difference to either the appearance or behavior of the button.<\/p>\n<p>So Alert is a great choice for a text-based dialog, either for informational use or to allow two choices of action.<\/p>\n<h2 id=\"action\">Action<\/h2>\n<p>Very short section here - &lsquo;ActionSheet&rsquo; is unavailable in macOS! I probably should have researched that before I started this section. So use Alerts, I guess or a custom sheet.<\/p>\n<h2 id=\"sheets\">Sheets<\/h2>\n<p>While Alerts have a very fixed structure, sheets allow us to put any SwiftUI view into a sheet dialog.<\/p>\n<p>So I added another Bool for the Sheet button to toggle, and added this sheet modifier. SheetView right now is simply a TextView.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .sheet(isPresented: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing) {\n      SheetView()\n  }\n<\/code><\/pre><\/div><p>This didn&rsquo;t work so well. It showed the sheet, but the sheet was tiny - only the size of the Text view it contained. And I had no way of dismissing it&hellip;<\/p>\n<p>The size problem was solved by setting a frame on the Text view in SheetView.<\/p>\n<p>The trick to dismissing the sheet is to pass it a Binding to the Bool that triggered it to open in the first place. If a button in the sheet sets this Bool back to false, the parent view will hide the sheet. That sounds confusing, but it works.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .sheet(isPresented: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing) {\n      SheetView(isVisible: <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing)\n  }\n<\/code><\/pre><\/div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SheetView<\/span>: View {\n    @Binding <span style=\"color:#66d9ef\">var<\/span> isVisible: Bool\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        VStack {\n            Text(<span style=\"color:#e6db74\">&#34;This is a sheet.&#34;<\/span>)\n            Button(<span style=\"color:#e6db74\">&#34;OK&#34;<\/span>) {\n                <span style=\"color:#66d9ef\">self<\/span>.isVisible = <span style=\"color:#66d9ef\">false<\/span>\n            }\n        }\n        .frame(width: <span style=\"color:#ae81ff\">300<\/span>, height: <span style=\"color:#ae81ff\">150<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>Here is a very bad diagram that tries to explain what is happening:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-sheet.png\" alt=\"Sheet\"><\/p>\n<p>The parent view has an @State Boolean variable called <code>sheetIsShowing<\/code>. This is bound to the alert&rsquo;s <code>isPresented<\/code> so it dictates whenever the sheet is visible. When the Sheet button is clicked, this variable is set to <code>true<\/code> and the sheet opens. But at the same time, a Binding to this variable is passed to the sheet. I deliberately gave this a different name, so as to make it clear which View was changing what variable.<\/p>\n<p>When the sheet wants to close, it does not close itself. Instead it sets this variable to false. Because it is a Binding, this sets the original <code>sheetIsShowing<\/code> variable on the parent view to false and the parent view then closes the sheet.<\/p>\n<p><strong>UPDATE:<\/strong> Look at <strong><a href=\"https:\/\/troz.net\/post\/2020\/swiftui_for-mac-extras#dismissing-sheets\">Dismissing sheets<\/a><\/strong> in my post of extras &amp; changes to this series for an alternative way to dismiss a sheet.<\/p>\n<h3 id=\"sheets--data\">Sheets &amp; Data<\/h3>\n<p>With this in place, I had the sheet opening and closing perfectly, but I was not yet passing data back &amp; forth between the sheet and its parent view. I decide to put a TextField in the SheetView and bind its contents to the <code>dialogResult<\/code> property in the DetailView so that any edits appeared immediately in the DetailView. And while I am there, I might as well add some more decorations to the SheetView since it is a full View and not a restricted Alert.<\/p>\n<p>Calling the SheetView changed to this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .sheet(isPresented: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing) {\n      SheetView(isVisible: <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>sheetIsShowing, enteredText: <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>dialogResult)\n  }\n<\/code><\/pre><\/div><p>And the SheetView itself (not all the interface is listed here for brevity):<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SheetView<\/span>: View {\n    @Binding <span style=\"color:#66d9ef\">var<\/span> isVisible: Bool\n    @Binding <span style=\"color:#66d9ef\">var<\/span> enteredText: String\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        VStack {\n            Text(<span style=\"color:#e6db74\">&#34;Enter some text below…&#34;<\/span>)\n                .font(.headline)\n                .multilineTextAlignment(.center)\n\n            TextField(<span style=\"color:#e6db74\">&#34;Enter the result of the dialog here…&#34;<\/span>, text: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>enteredText)\n                 .padding()\n\n            HStack {\n                Button(<span style=\"color:#e6db74\">&#34;Cancel&#34;<\/span>) {\n                    <span style=\"color:#66d9ef\">self<\/span>.isVisible = <span style=\"color:#66d9ef\">false<\/span>\n                    <span style=\"color:#66d9ef\">self<\/span>.enteredText = <span style=\"color:#e6db74\">&#34;Cancel clicked in Sheet&#34;<\/span>\n                }\n                Spacer()\n                Button(<span style=\"color:#e6db74\">&#34;OK&#34;<\/span>) {\n                    <span style=\"color:#66d9ef\">self<\/span>.isVisible = <span style=\"color:#66d9ef\">false<\/span>\n                    <span style=\"color:#66d9ef\">self<\/span>.enteredText = <span style=\"color:#e6db74\">&#34;OK: <\/span><span style=\"color:#e6db74\">\\(<\/span><span style=\"color:#66d9ef\">self<\/span>.enteredText<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>\n                }\n            }\n        }\n        .frame(width: <span style=\"color:#ae81ff\">300<\/span>, height: <span style=\"color:#ae81ff\">200<\/span>)\n        .padding()\n    }\n}\n<\/code><\/pre><\/div><p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-sheet-data.png\" alt=\"Sheet with data\"><\/p>\n<p>I only had two issues with this now. I was not able to get the focus into the TextField automatically when the sheet opened and I was not able to assign keyboard shortcuts to the Cancel and OK buttons so that they could be operated without a mouse. And as I mentioned in the previous part, I was not able to make the OK button take on the default styling.<\/p>\n<p>One useful technique that I developed: the SheetView is in the DialogsView.swift file instead of in its own SwiftUI file. It would probably be a good idea to separate it out but I didn&rsquo;t which meant that it had no Canvas preview to look at while I was laying it out.<\/p>\n<p>So I edited the PreviewProvider like this, so that I could change the comments to switch it between showing the DialogsView and showing the SheetView.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">DialogsView_Previews<\/span>: PreviewProvider {\n    <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">var<\/span> previews: some View {\n        <span style=\"color:#75715e\">\/\/ DialogsView()<\/span>\n        SheetView(isVisible: .constant(<span style=\"color:#66d9ef\">true<\/span>), enteredText: .constant(<span style=\"color:#e6db74\">&#34;&#34;<\/span>))\n    }\n}\n<\/code><\/pre><\/div><h2 id=\"files\">Files<\/h2>\n<p>AppKit provides NSOpenPanel for selecting a file and NSSavePanel for saving. I will try to implement NSSavePanel to allow saving the current cat image.<\/p>\n<p>Since this is an AppKit control rather than a SwiftUI control, I assumed that I would need to use NSViewRepresentable like I did for the NSColorWell in part 2. But while NSColorWell is a descendent of NSView, NSSavePanel is not. So I need a new idea.<\/p>\n<p>Rather naively, I thought maybe I could just create an NSSavePanel in a function inside DialogsView and see what happened.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">saveImage<\/span>() {\n      <span style=\"color:#66d9ef\">let<\/span> panel = NSSavePanel()\n      panel.nameFieldLabel = <span style=\"color:#e6db74\">&#34;Save cat image as:&#34;<\/span>\n      panel.nameFieldStringValue = <span style=\"color:#e6db74\">&#34;cat.jpg&#34;<\/span>\n      panel.canCreateDirectories = <span style=\"color:#66d9ef\">true<\/span>\n      panel.begin { response <span style=\"color:#66d9ef\">in<\/span>\n          <span style=\"color:#66d9ef\">if<\/span> response == NSApplication.ModalResponse.OK, <span style=\"color:#66d9ef\">let<\/span> fileUrl = panel.url {\n              print(fileUrl)\n          }\n      }\n  }\n<\/code><\/pre><\/div><p>Crash &amp; burn&hellip; so what if I made the NSSavePanel an @State property of the View? No, that crashed even faster. Maybe SwiftUI Views don&rsquo;t like this sort of thing, but how about if I get the Application Delegate to handle it? What if I moved the <code>saveImage<\/code> method to the App Delegate and changed the calling function to access it there?<\/p>\n<p>Still crashed. At this stage I am beginning to wonder if I know how to use an NSSavePanel. Time to create a simple test app without SwiftUI and see what happens. Well it appears that I no longer know how to use an NSSavePanel. Code from an older project that works fine, will not work in my new sample project!<\/p>\n<p>Guess what - it was another macOS Catalina security issue which I would have realised faster I had opened the Console. Back to the Signing &amp; Capabilities section of the target settings and this time I set File Access for User Selected File to Read\/Write.<\/p>\n<p>Now the NSSavePanel opens when called from DialogsView and prints the selected file URL if one is chosen.<\/p>\n<p>But this is all happening in DialogsView, which is a subview of DetailView. And DetailView is the view that holds the image, not DialogsView. So how can I save the image? Do I pass the URL to DetailView or pass the image to DialogsView? Or do something clever with Notifications and Subscriptions?<\/p>\n<p>I really don&rsquo;t know what is best, but I have decided to post a Notification with the URL as its object. DetailView can receive this Notification and save the image whenever it is received.<\/p>\n<p>So I replaced the <code>print<\/code> line in the <code>saveImage()<\/code> method with:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  NotificationCenter.<span style=\"color:#66d9ef\">default<\/span>.post(name: .saveImage, object: fileUrl)\n<\/code><\/pre><\/div><p>And in DetailView, I set up the publisher:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">let<\/span> saveImageUrlSelected = NotificationCenter.<span style=\"color:#66d9ef\">default<\/span>\n         .publisher(<span style=\"color:#66d9ef\">for<\/span>: .saveImage)\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        VStack {\n          <span style=\"color:#75715e\">\/\/ view code removed for brevity<\/span>\n        }\n        .onReceive(saveImageUrlSelected) { publisher <span style=\"color:#66d9ef\">in<\/span>\n            <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> saveUrl = publisher.object <span style=\"color:#66d9ef\">as<\/span>? URL,\n                <span style=\"color:#66d9ef\">let<\/span> imageData = <span style=\"color:#66d9ef\">self<\/span>.catImage?.tiffRepresentation {\n                <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> imageRep = NSBitmapImageRep(data: imageData) {\n                    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> saveData = imageRep.representation(using: .jpeg,\n                                                              properties: [:]) {\n                        <span style=\"color:#66d9ef\">try<\/span>? saveData.write(to: saveUrl)\n                    }\n                }\n            }\n        }\n    }\n<\/code><\/pre><\/div><p>And there we have it. Three types of dialogs demonstrated in a SwiftUI for Mac app:<\/p>\n<ol>\n<li>Alerts: good for simply text-only dialogs<\/li>\n<li>Sheets: good for more complex dialogs<\/li>\n<li>Panels: AppKit dialogs that can be called from a SwiftUI View.<\/li>\n<\/ol>\n<p>I think this time I really am finished. This article has already expanded out into a 3-part monster, so I think it is way past time that I stopped typing. I hope you have enjoyed this series. Please use any of the buttons below to contact me or use the <a href=\"https:\/\/troz.net\/contact\/\">Contact page<\/a> on this site. I would love to hear from anyone who found this series useful or who had any suggestions or corrections to make.<\/p>\n<p>The final project is available on <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\">GitHub<\/a> if you would like to download it and take a look.<\/p>","url":"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-3\/","date":598087700},{"title":"SwiftUI for Mac - Part 2","content":"<p>In <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-1\/\">part 1 of this series<\/a>, I created a Mac app using SwiftUI. The app uses a Master-Detail design to list entries in an outline on the left and show details about the selected entry in the detail view on the right.<\/p>\n<p>Now it is time to explore some more of the features of a Mac app with SwiftUI.<\/p>\n<h2 id=\"menus\">Menus<\/h2>\n<p>I had already discovered that the menu bar is configured in the Main.storyboard file. As an experiment, I will add new menu items that allows the user to select between dark mode, light mode or the system mode.<\/p>\n<style>\n  img {\n    margin: 10px auto;\n  }\n<\/style>\n\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUi-Mac-menus.png\" alt=\"Menus\"><\/p>\n<p>Looking at the possibilities along the top that I could send the menu command to, the App Delegate looks like the best option, especially since these menus will change the entire app.<\/p>\n<p>I opened AppDelegate.swift in the Assistant Editor and Control-dragged from each of the new menu items to create the 3 IBActions and added the code to set the mode.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">@IBAction<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">darkModeSelected<\/span>(<span style=\"color:#66d9ef\">_<\/span> sender: Any) {\n        NSApp.appearance = NSAppearance(named: .darkAqua)\n    }\n\n    <span style=\"color:#66d9ef\">@IBAction<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">lightModeSelected<\/span>(<span style=\"color:#66d9ef\">_<\/span> sender: Any) {\n        NSApp.appearance = NSAppearance(named: .aqua)\n    }\n\n    <span style=\"color:#66d9ef\">@IBAction<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">systemModeSelected<\/span>(<span style=\"color:#66d9ef\">_<\/span> sender: Any) {\n        NSApp.appearance = <span style=\"color:#66d9ef\">nil<\/span>\n    }\n<\/code><\/pre><\/div><p>And since I realized that I would want to check or un-check these based on the current settings, I added IBOutlets for each of these menu items too. As a side note, I love how Xcode is now clever enough to decide whether to add an IBOutlet or an IBAction depending on where in the file you Control-drag to.<\/p>\n<h2 id=\"using-a-property-wrapper\">Using a Property Wrapper<\/h2>\n<p>Changing mode worked perfectly in the Xcode Preview and in the built app, but the app was not storing this or displaying the current selection with a check mark in the menu.<\/p>\n<p>For storing the selection, I decided to try another new thing and use a UserDefaults property wrapper, based on <a href=\"https:\/\/www.avanderlee.com\/swift\/property-wrappers\/\">this post by Antoine van der Lee<\/a>.<\/p>\n<p>I configured a UserDefault wrapped variable for the mode, set it whenever the menu items changed it and added a function to read it in and apply it on startup.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    @UserDefault(<span style=\"color:#e6db74\">&#34;system_mode&#34;<\/span>, defaultValue: <span style=\"color:#e6db74\">&#34;system&#34;<\/span>)\n    <span style=\"color:#66d9ef\">var<\/span> systemMode: String\n<\/code><\/pre><\/div><p>It would be neater to use an enum here instead of strings, but that would have required fiddling with rawValues to save the data, so for this first test, I stuck to strings.<\/p>\n<p>The code to toggle the checkmarks in the menu items is standard stuff and nothing particularly SwiftUI related, so I won&rsquo;t detail it here, but it is in the GitHub project if you are interested.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-dark.png\" alt=\"Dark mode\"><\/p>\n<h2 id=\"passing-menu-data-to-a-view\">Passing menu data to a View<\/h2>\n<p>This worked fine and the app worked equally as well in dark or light modes, but I wanted to test how to communicate data back from the menus to the SwiftUI views.<\/p>\n<p>As a totally pointless but possibly amusing feature, I decided to add a menu item to flip the cat image and then work out how I could send that to the ContentView.<\/p>\n<p>I added the new menu item to the Format menu and as a first attempt, I tried to Control-drag from there into the ContentView. It didn&rsquo;t take, so I guess I need to send the message to the AppDelegate as before and then pass it on to the ContentView. I feel like this might be a good place to use a Publisher although so far I have only used the built-in ObservableObject type publishers.<\/p>\n<p>In this case, it would make more sense to have the DetailView respond to the menu, since it contains the image. But trying to add an @IBAction to a SwiftUI View struct gives this error: <code>Only instance methods can be declared @IBAction<\/code> so I am using the App Delegate instead. I feel like this is a problem I need to solve, or the AppDelegate is going to end up filled with @IBActions, but for now, let&rsquo;s keep going.<\/p>\n<p>In AppDelegate.swift, I added the IBAction for the Flip Image menu item and had it issue a Notification, after setting up an extension on Notification.Name to de-stringify the name of the notification.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">@IBAction<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">flipImage<\/span>(<span style=\"color:#66d9ef\">_<\/span> sender: Any) {\n        NotificationCenter.<span style=\"color:#66d9ef\">default<\/span>.post(name: .flipImage, object: <span style=\"color:#66d9ef\">nil<\/span>)\n    }\n<\/code><\/pre><\/div><p>In DetailView.swift, I set up a Boolean @State property to store whether the image was flipped or not and added an onReceive handler to toggle it. Since this is updating the UI, I made sure that it happened on the main thread, but I am not sure whether this is necessary, or whether onReceive uses the main thread automatically.<\/p>\n<p><strong>UPDATE:<\/strong> Check out <strong><a href=\"https:\/\/troz.net\/post\/2020\/swiftui_for-mac-extras#subscribing-on-the-main-thread\">Subscribing on the Main Thread<\/a><\/strong> in my post of extras &amp; changes to this series for an alternative way to make sure the updates happen on the correct thread.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    @State <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> imageIsFlipped = <span style=\"color:#66d9ef\">false<\/span>\n\n    <span style=\"color:#75715e\">\/\/ ...<\/span>\n\n  .onReceive(flipImageMenuItemSelected) { <span style=\"color:#66d9ef\">_<\/span> <span style=\"color:#66d9ef\">in<\/span>\n    DispatchQueue.main.async {\n        <span style=\"color:#66d9ef\">self<\/span>.imageIsFlipped.toggle()\n    }\n  }\n<\/code><\/pre><\/div><p>Once I had that Boolean property, I added two more modifiers to the image. Don&rsquo;t hate me for the force un-wrapping. I tried using if-let but it wouldn&rsquo;t compile so I check for <code>catImage != nil<\/code> before using this force-unwrap.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Image(nsImage: catImage!)\n      .resizable()\n      .aspectRatio(contentMode: .fit)\n      .rotation3DEffect(Angle(degrees: imageIsFlipped ? <span style=\"color:#ae81ff\">180<\/span> : <span style=\"color:#ae81ff\">0<\/span>),\n                        axis: (x: <span style=\"color:#ae81ff\">0<\/span>, y: <span style=\"color:#ae81ff\">1<\/span>, z: <span style=\"color:#ae81ff\">0<\/span>))\n      .animation(.<span style=\"color:#66d9ef\">default<\/span>)\n<\/code><\/pre><\/div><p>Now the image can be flipped from the menu item or even by using the keyboard shortcut. And with a smooth animation (smoother in the app than in this gif).<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-Flip.gif\" alt=\"Flipping the image\"><\/p>\n<h2 id=\"opening-another-window\">Opening another window<\/h2>\n<p>For my next challenge, I want to open a second window that I can use to show samples of various UI elements. As I want to open it from a menu command, my first thought was to add a Window Controller to the Main storyboard and open it that way. I replaced the default View Controller with a Hosting Controller so that I could insert my SwiftUI View into it.<\/p>\n<p>I had great trouble finding any documentation or examples of how to implement this, but after a lot of trial and error, here is what I got to work:<\/p>\n<ol>\n<li>Drag a Hosting View Controller into the storyboard and connect it to the menu item with a segue.<\/li>\n<li>Set the Presentation property for the window controller to Single so that multiple copies of the window are not created.<\/li>\n<li>Create a new Swift file and subclass NSHostingController. Don&rsquo;t bother using a Cocoa class file - the template doesn&rsquo;t work. Use the code below, replacing SamplesView with the name of the SwiftUI view you want to display.<\/li>\n<\/ol>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">SwiftUI<\/span>\n\n<span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">SamplesHostingController<\/span>: NSHostingController&lt;PrefsView&gt; {\n      <span style=\"color:#66d9ef\">@objc<\/span> <span style=\"color:#66d9ef\">required<\/span> <span style=\"color:#66d9ef\">dynamic<\/span> <span style=\"color:#66d9ef\">init<\/span>?(coder: NSCoder) {\n          <span style=\"color:#66d9ef\">super<\/span>.<span style=\"color:#66d9ef\">init<\/span>(coder: coder, rootView: SamplesView())\n      }\n}\n<\/code><\/pre><\/div><ol start=\"4\">\n<li>Back in the storyboard, set the class of the HostingController to this sub-class: SamplesHostingController in my case.<\/li>\n<li>Set a minimum size for the new Window Controller, otherwise it shrinks to a very small stripe on the screen.<\/li>\n<li>Add the <code>.frame(maxWidth: .infinity, maxHeight: .infinity)<\/code> modifier to the root view in the view you are displaying - my SamplesView.<\/li>\n<\/ol>\n<p>With all these in place, I was able to open and close a Samples window that was displaying my SwiftUI content.<\/p>\n<h2 id=\"user-interface-elements\">User Interface Elements<\/h2>\n<p>Not all the expected user interface elements are available in SwiftUI and some of the ones that are implemented are using different names. Again this is a point at which iOS development has got all the attention, so there are conversion tables out there listing UIKit elements and their SwiftUI equivalents, but I was not able to find a similar listing for AppKit. If you find one, please let me know.<\/p>\n<p>Anyway, I experimented and got most of what I wanted as you can see below. The <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\">sample app on GitHub<\/a> shows the SwiftUI code for these samples, but the main advice I would give is firstly to use the Object Browser to look for what is available and then to check out the styles that can be applied to the element you have chosen.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-UI.png\" alt=\"UI elements\"><\/p>\n<p>Mostly, I managed to achieve what I wanted but there were a few exceptions.<\/p>\n<p>Buttons were a bit odd as there are multiple button styles listed, but I found that they either all looked the same or they disappeared completely. I was not able to style a button with an image and text which is now easy to do in iOS. And I was not able to set a button as the default button and I could not work out how to set a keyboard equivalent for a button. (Setting the keyboard equivalent to Return or Enter might set it to the default style automatically.)<\/p>\n<p>Of the other UI elements that I wanted to use, a color picker was the main one missing. So I decided to embed an NSColorWell from AppKit into my SwiftUI view.<\/p>\n<p>The process for embedding a UIKit view is quite well documented elsewhere and the AppKit equivalent was not significantly different. Replace every &ldquo;UI&rdquo; with &ldquo;NS&rdquo; and you are nearly there.<\/p>\n<p>First I made a struct that conformed to <code>NSViewRepresentable<\/code> and had the required two functions: <code>makeNSView(context:)<\/code> and <code>updateNSView(_:context:)<\/code>. I supplied an @Binding variable to hold the selected color as an NSColor since that is what the NSColorWell uses.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">EmbeddedColorWell<\/span>: NSViewRepresentable {\n    @Binding <span style=\"color:#66d9ef\">var<\/span> selectedColor: NSColor\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">makeNSView<\/span>(context: Context) -&gt; NSColorWell {\n        NSColorWell(frame: .zero)\n    }\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">updateNSView<\/span>(<span style=\"color:#66d9ef\">_<\/span> nsView: NSColorWell, context: Context) {\n        nsView.color = selectedColor\n    }\n}\n<\/code><\/pre><\/div><p>Back in my SwiftUI view, I was then able to use <code>EmbeddedColorWell<\/code> just like any other SwiftUI view, passing it a binding to an @State variable to set and get the selected color.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  EmbeddedColorWell(selectedColor: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>selectedColor)\n<\/code><\/pre><\/div><p><strong>UPDATE:<\/strong> Be sure to read <strong><a href=\"https:\/\/troz.net\/post\/2020\/swiftui_for-mac-extras#passing-data-back-from-appkit\">Passing data back from AppKit<\/a><\/strong> in my post of extras &amp; changes to this series. This is an important fix that is needed to make this embedded control pass data back properly.<\/p>\n<p>The other stumbling block that I encountered was that I had no way to close the window programmatically, in response to a button click or some other interaction. Maybe this was not the best way to open a fully SwifUI window, but it was still an interesting experiment.<\/p>\n<p>One thing I learned while working on this project was that SwiftUI can be a bit too clever about working out what needs to be redrawn in the previews. If you edit something in an separate file to the View, you may need to force a re-build to get the updates to show.<\/p>\n<h2 id=\"communicating-between-windows\">Communicating Between Windows<\/h2>\n<p>The last feature that I need to explore is transferring data between two windows. I tested using a <code>.sheet<\/code> modifier to open a dialog and that worked exactly as it would in an iOS app - I was able to pass an @Binding variable to the sheet window and any changes made to that in the sheet window flowed back to the calling view.<\/p>\n<p>But I want to set up a Preferences window which will be opened from the menu bar and not directly from the ContentView or any of its sub-views.<\/p>\n<p>I started out by using the same technique as before with a Hosting View Controller. And here is where I came mightily unstuck as I could not make a data connection. I had hoped an EnvironmentObject would work, but I could not get an EnvironmentObject through to the HostingController as it was not in the same view hierarchy.<\/p>\n<p>So instead of trying to use the storyboard, I decide to see if I could use something similar to the initial window creation and call that new window from my ContentView so that it was part of the view and therefore the data hierarchy.<\/p>\n<p>As usual, there was a lot of trial and error involved here, but I came up with a workable solution.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">PrefsView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Text(<span style=\"color:#e6db74\">&#34;Hello, Prefs!&#34;<\/span>)\n            .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n\n    <span style=\"color:#66d9ef\">var<\/span> window: NSWindow!\n    <span style=\"color:#66d9ef\">init<\/span>() {\n        window = NSWindow.createStandardWindow(withTitle: <span style=\"color:#e6db74\">&#34;Preferences&#34;<\/span>,\n                                               width: <span style=\"color:#ae81ff\">300<\/span>,\n                                               height: <span style=\"color:#ae81ff\">100<\/span>)\n        window.contentView = NSHostingView(rootView: <span style=\"color:#66d9ef\">self<\/span>)\n        window.makeKeyAndOrderFront(<span style=\"color:#66d9ef\">nil<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>For convenience and reusability, I made an extension on NSWindow that created a window with the basic properties configured, much like they are in AppDelegate. I temporarily added a Button to ContentView like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  Button(<span style=\"color:#e6db74\">&#34;Prefs&#34;<\/span>) {\n      <span style=\"color:#66d9ef\">let<\/span> _ = PrefsView()\n  }\n<\/code><\/pre><\/div><p>This opened the window perfectly, but it had a problem: repeatedly clicking the button kept opening a new window instead of bringing the existing one to the front.<\/p>\n<p>After a lot more trial and error, this is what I ended up with for my <code>PrefsView<\/code> struct:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">PrefsView<\/span>: View {\n    @State <span style=\"color:#66d9ef\">var<\/span> prefsWindowDelegate = PrefsWindowDelegate()\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Text(<span style=\"color:#e6db74\">&#34;Hello, Prefs!&#34;<\/span>)\n          .frame(maxWidth: .infinity, maxHeight: .infinity)\n    }\n\n    <span style=\"color:#66d9ef\">var<\/span> window: NSWindow!\n    <span style=\"color:#66d9ef\">init<\/span>() {\n        window = NSWindow.createStandardWindow(withTitle: <span style=\"color:#e6db74\">&#34;Preferences&#34;<\/span>,\n                                               width: <span style=\"color:#ae81ff\">300<\/span>,\n                                               height: <span style=\"color:#ae81ff\">100<\/span>)\n        window.contentView = NSHostingView(rootView: <span style=\"color:#66d9ef\">self<\/span>)\n        window.delegate = prefsWindowDelegate\n        prefsWindowDelegate.windowIsOpen = <span style=\"color:#66d9ef\">true<\/span>\n        window.makeKeyAndOrderFront(<span style=\"color:#66d9ef\">nil<\/span>)\n    }\n\n    <span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">PrefsWindowDelegate<\/span>: NSObject, NSWindowDelegate {\n        <span style=\"color:#66d9ef\">var<\/span> windowIsOpen = <span style=\"color:#66d9ef\">false<\/span>\n\n        <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">windowWillClose<\/span>(<span style=\"color:#66d9ef\">_<\/span> notification: Notification) {\n            windowIsOpen = <span style=\"color:#66d9ef\">false<\/span>\n        }\n    }\n}\n<\/code><\/pre><\/div><p>So my PrefsView opens its own window and sets a window delegate that records when the window is closed.<\/p>\n<p>I removed my temporary button and back in AppDelegate.swift, I added an IBAction called by the Preferences menu item:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">var<\/span> prefsView: PrefsView?\n\n    <span style=\"color:#66d9ef\">@IBAction<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">openPrefsWindow<\/span>(<span style=\"color:#66d9ef\">_<\/span> sender: Any) {\n        <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> prefsView = prefsView, prefsView.prefsWindowDelegate.windowIsOpen {\n            prefsView.window.makeKeyAndOrderFront(<span style=\"color:#66d9ef\">self<\/span>)\n        } <span style=\"color:#66d9ef\">else<\/span> {\n            prefsView = PrefsView()\n        }\n    }\n<\/code><\/pre><\/div><p>And this gave me what I was after - a view that opened from a menu item but that knew itself whether it still had a window so could decide whether to open a new one or bring the existing one to the front. This looks a bit convoluted, but it doesn&rsquo;t appear to cause any memory leaks and the responsibility for the window rests on the view that uses it, which feels right to me.<\/p>\n<p>After I had this working, getting the data passing around was quite simple. I created a Prefs class to store the preference data. I wanted this data stored in UserDefaults, but since I also wanted to use an ObservableObject with the @Published property wrapper, I was not able to use the @UserDefaults property wrapper that I had used for the app mode.<\/p>\n<p>So instead I used @Published with a <code>didSet<\/code> that saved the changed data to UserDefaults. Thanks to <a href=\"https:\/\/twitter.com\/azamsharp\">@azamsharp<\/a> for this technique.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">Prefs<\/span>: ObservableObject {\n    @Published\n    <span style=\"color:#66d9ef\">var<\/span> showCopyright: Bool = UserDefaults.standard.bool(forKey: <span style=\"color:#e6db74\">&#34;showCopyright&#34;<\/span>) {\n        <span style=\"color:#66d9ef\">didSet<\/span> {\n            UserDefaults.standard.<span style=\"color:#66d9ef\">set<\/span>(<span style=\"color:#66d9ef\">self<\/span>.showCopyright, forKey: <span style=\"color:#e6db74\">&#34;showCopyright&#34;<\/span>)\n        }\n    }\n}\n<\/code><\/pre><\/div><p>This preference will dictate whether a copyright notice is shown on every cat image, so it needs to be available to DetailView and to PrefsView. Since I did not want to pass it through every view on the way to DetailView, I decided to use an EnvironmentObject. But I was not able to work out how to set the environmentObject for the PrefsView as I created it, so I ended up sending an @ObservedObject to PrefsView but using an @EnvironmentObject for DetailView. (Actually for CatImageView as I had extracted the image from DetailView as a subview.)<\/p>\n<p>In AppDelegate.swift:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">let<\/span> prefs = Prefs()\n\n    <span style=\"color:#75715e\">\/\/ and in the openPrefsWindow IBAction:<\/span>\n    prefsView = PrefsView(prefs: prefs)\n<\/code><\/pre><\/div><p>In PrefsView.swift:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    @ObservedObject <span style=\"color:#66d9ef\">var<\/span> prefs: Prefs\n<\/code><\/pre><\/div><p>In CatImageView (a subview of DetailView):<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">CatImageView<\/span>: View {\n    @EnvironmentObject <span style=\"color:#66d9ef\">var<\/span> prefs: Prefs\n\n    <span style=\"color:#66d9ef\">let<\/span> catImage: NSImage\n    <span style=\"color:#66d9ef\">let<\/span> imageIsFlipped: Bool\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Image(nsImage: catImage)\n          <span style=\"color:#75715e\">\/\/ modifiers as before<\/span>\n\n         .overlay(\n             Text(prefs.showCopyright ? <span style=\"color:#e6db74\">&#34;Copyright © https:\/\/http.cat&#34;<\/span> : <span style=\"color:#e6db74\">&#34;&#34;<\/span>)\n                 .padding(<span style=\"color:#ae81ff\">6<\/span>)\n                 .font(.caption)\n                 .foregroundColor(.white)\n                 .shadow(radius: <span style=\"color:#ae81ff\">5<\/span>)\n             ,alignment: .bottomTrailing)\n    }\n}\n<\/code><\/pre><\/div><p>And that is that! I have shown how it is possible to create an entire Mac app using SwiftUI.<\/p>\n<p>I am sure that there are numerous ways that this could be improved, so if you have any ideas or suggestions, please use one of the buttons below to contact me.<\/p>\n<p>If you want to check out the project at this stage, here is a link to the <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\/tree\/0ea77f80832e0f32e477ce89ac57d8a95f45f035\">relevant GitHub commit<\/a>. Or if you would prefer, here is a link to the <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\">final version<\/a> of the project.<\/p>\n<hr>\n<p>Moving on to an unplanned <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-3\/\">part 3 of this series<\/a>, I am going to experiment with various forms of dialog.<\/p>","url":"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-2\/","date":598087690},{"title":"SwiftUI for Mac - Part 1","content":"<p>So far, nearly all the articles I have seen about SwiftUI show it being used for iOS, more particularly for iPhone.\nBut SwiftUI works on all Apple&rsquo;s platforms, and as I am primarily a Mac developer, I decided to try out a Mac app and see what happened.<\/p>\n<style>\n  img {\n    margin: 10px auto;\n  }\n<\/style>\n\n<h2 id=\"setup\">Setup<\/h2>\n<p>I opened up Xcode and created a new project selecting the macOS App template. The project opened at the usual ContentView.swift but there were a few differences in the project structure as well as one in the ContentView struct.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-project.png\" alt=\"New Mac project\"><\/p>\n<p>The first thing to notice is that the default &ldquo;Hello, World!&rdquo; Text view has a frame set:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .frame(maxWidth: .infinity, maxHeight: .infinity)\n<\/code><\/pre><\/div><p>If I removed this frame modifier, the preview display in the Canvas changed so that the view was only the size of the text instead of being a standard window size. I guess an iOS device always knows what size it is, but a Mac window can be any size, so you have to be more explicit to stop SwiftUI shrinking the container view to the minimum size possible.<\/p>\n<p>The next thing is to look at the files that are included in the project. There is no SceneDelegate.swift as you would see in an iOS project. And to my surprise, there was still a Main.storyboard file! And going to the General settings for the app target, I could see that this storyboard was selected as the Main Interface.<\/p>\n<p>Opening it up reveals that this is where the application menu is configured. I had wondered where the menus were configured in Mac SwiftUI apps.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-Storyboard.png\" alt=\"Main storyboard\"><\/p>\n<p>The AppDelegate was the next thing I looked at and here I found some of the code that I would have expected to find in a SceneDelegate. The <code>applicationDidFinishLaunching(_:)<\/code> method creates an instance of ContentView, creates an NSWindow and uses an NSHostingView to display the ContentView inside the window. At this stage, running the app gives me what I would expect: a fully-fledged Mac app with a window and a menu, both with all the functions you would expect in any standard Mac app.<\/p>\n<h2 id=\"the-canvas\">The Canvas<\/h2>\n<p>I was not expecting the Canvas to be much use when it came to previewing a Mac app. It works so well with an iPhone app because the iPhone is tall and thin and fits neatly into one side of the code window. But a Mac view is likely to be much bigger, so it would have to be scaled down a lot to avoid talking up too much precious space in my Xcode window.<\/p>\n<p>But it works as expected, and even scaled down, you get a good idea of the layout while still getting the live reloading that is part of what makes developing in SwiftUI so much fun.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-Canvas.png\" alt=\"Canvas\"><\/p>\n<p>But here is where I got my first real surprise, with a feature that I had not seen yet in any SwiftUI tutorial or article. Click the Live Preview button and see what happens&hellip;<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-LivePreview.png\" alt=\"Live Preview\"><\/p>\n<p>Of course I clicked &ldquo;Bring Forward&rdquo; and there was my app running in a window called &ldquo;Xcode Preview&rdquo;. There was an app in my Dock and when I chose &ldquo;Show in Finder&rdquo;, I found that the app is buried deep in DerivedData. Positioning my windows so I could type in Xcode while watching this preview window, I saw that it instantly updated my view as I typed, just like an iPhone in the Canvas.<\/p>\n<p>If I changed the structure of the view, the app closed and re-opened immediately with the new content. This is amazing and shows that the Xcode &amp; SwiftUI teams really thought about how to use these new features in Mac apps as well as iOS.<\/p>\n<blockquote>\n<p>In Xcode 11.3, I found that I was having trouble with the previews. They would not display and above the Canvas, I got the super helpful message &ldquo;Cannot preview in this file &mdash; SwiftUI-Mac.app may have crashed.&rdquo;. It turned out that this was a signing issue. If you go to the app target and look in the Signing and Capabilities section, check that Signing Certificate is not set to &ldquo;Sign to Run Locally&rdquo;. If it is, switch to &ldquo;Development&rdquo; and the previews will start working again.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-signing.png\" alt=\"Code signing\"><\/p>\n<\/blockquote>\n<h2 id=\"laying-out-the-view\">Laying out the View<\/h2>\n<p>Now that I have the project and I know how to preview it, it&rsquo;s time to work out what to display in the app. The next real app I want to work on will use a master-detail layout, so that is what I decided to try here.<\/p>\n<p>Before worrying about the data, I decided to try populating the master view with a static list and using that to navigate to a detail view that was simply a Text view.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ContentView<\/span>: View {\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        NavigationView {\n             List {\n                 ForEach(<span style=\"color:#ae81ff\">1<\/span> ... <span style=\"color:#ae81ff\">10<\/span>, id: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.<span style=\"color:#66d9ef\">self<\/span>) { index <span style=\"color:#66d9ef\">in<\/span>\n                     NavigationLink(destination: Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)) {\n                         Text(<span style=\"color:#e6db74\">&#34;Link <\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n                     }\n                 }\n             }\n        }\n    }\n}\n<\/code><\/pre><\/div><p>This worked, except that the left column was only about 20 pixels wide. But I was able to use the mouse to drag it wider and there were my List entries. Clicking on one did indeed show the detail I wanted, but it shrunk the window to one line high!<\/p>\n<p>The first thing I did was to apply a <code>listStyle<\/code> modifier to make it show the semi-transparent Mac sidebar. This fixed the width of the sidebar. But the whole window still shrunk when I selected an item.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .listStyle(SidebarListStyle())\n<\/code><\/pre><\/div><p>I tried applying the frame modifier to the NavigationView and that made the window stay the same size, but the content still shrunk into a tiny section in the middle. It looks like I need to apply that frame modifier to the detail view as well.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .frame(maxWidth: .infinity, maxHeight: .infinity)\n<\/code><\/pre><\/div><p>And as you can see from this gif, I then had a full functional master-detail view with a collapsible and expandable semi-transparent sidebar.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-master-detail.gif\" alt=\"Master detail view\"><\/p>\n<h2 id=\"adding-data\">Adding Data<\/h2>\n<p>After some scouting around for a free API that I could hook into, I came across <a href=\"https:\/\/http.cat\">HTTP Cats<\/a> which is a site that serves up a cat image to match almost every HTTP status code.<\/p>\n<p>This sounded ideal: I can list the codes in the master view on the left and display the image in the detail view on the right.<\/p>\n<p>First I created a JSON file to list all the HTTP status codes so that I could put them into a List view. This was a very simple array with each entry having a code and a title:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-json\" data-lang=\"json\">[\n  {\n    <span style=\"color:#f92672\">&#34;code&#34;<\/span>: <span style=\"color:#e6db74\">&#34;100&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;title&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Continue&#34;<\/span>\n  },\n  {\n    <span style=\"color:#f92672\">&#34;code&#34;<\/span>: <span style=\"color:#e6db74\">&#34;101&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;title&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Switching Protocols&#34;<\/span>\n  },\n  <span style=\"color:#960050;background-color:#1e0010\">...<\/span>\n]\n<\/code><\/pre><\/div><p>I created an HttpStatus struct with these 2 properties and I borrowed <a href=\"https:\/\/www.hackingwithswift.com\/example-code\/system\/how-to-decode-json-from-your-app-bundle-the-easy-way\">Paul Hudson&rsquo;s excellent Helper Bundle extension<\/a> to decode the JSON file. For a first attempt, I used the numeric codes to build the list and showed the title of the selected one in the detail view. But one of the best things about SwiftUI is that it makes it so easy to configure table rows, so it is time to create a new View to do this.<\/p>\n<p>After some experimentation, I had a TableRowView that I liked the look of, but the default sidebar width was too narrow and truncated the status code titles, so I added a frame modifier to the List to set a minimum and maximum width for the sidebar.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-Master.png\" alt=\"Master view\"><\/p>\n<h2 id=\"outline-list\">Outline List<\/h2>\n<p>At this point I decided that it would be more useful to have a outline list with the status codes grouped by their category.<\/p>\n<p>So I re-did the JSON file to show this, added an HttpSection struct and a SectionHeaderView and modified the data loading method and @State variable.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-json\" data-lang=\"json\">[\n  {\n    <span style=\"color:#f92672\">&#34;headerCode&#34;<\/span>: <span style=\"color:#e6db74\">&#34;1xx&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;headerText&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Informational&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;statuses&#34;<\/span>: [\n      {\n        <span style=\"color:#f92672\">&#34;code&#34;<\/span>: <span style=\"color:#e6db74\">&#34;100&#34;<\/span>,\n        <span style=\"color:#f92672\">&#34;title&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Continue&#34;<\/span>\n      },\n      {\n        <span style=\"color:#f92672\">&#34;code&#34;<\/span>: <span style=\"color:#e6db74\">&#34;101&#34;<\/span>,\n        <span style=\"color:#f92672\">&#34;title&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Switching Protocols&#34;<\/span>\n      }\n    ]\n  },\n  {\n    <span style=\"color:#f92672\">&#34;headerCode&#34;<\/span>: <span style=\"color:#e6db74\">&#34;2xx&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;headerText&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Success&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;statuses&#34;<\/span>: [\n      {\n        <span style=\"color:#f92672\">&#34;code&#34;<\/span>: <span style=\"color:#e6db74\">&#34;200&#34;<\/span>,\n        <span style=\"color:#f92672\">&#34;title&#34;<\/span>: <span style=\"color:#e6db74\">&#34;OK&#34;<\/span>\n      },\n<\/code><\/pre><\/div><p>This worked really well and I was thrilled to find that the sections automatically had Show\/Hide toggles!<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-outline.png\" alt=\"Outline view\"><\/p>\n<h2 id=\"detail-view\">Detail View<\/h2>\n<p>Up until now, I had been using a standard Text view as the destination for my navigation. This is a really useful technique as you can build the interface gradually but have it work from the beginning. But now it was time to create a new view for the details.<\/p>\n<p>I set up the view and added a method that would download the correct cat image when the view appeared but there was no image. After some digging, I realised that sand-boxed Mac apps do not allow network access by default. I went to the Signing &amp; Capabilities section of the target settings and turned on &ldquo;Outgoing Connections (Client)&rdquo;. And then I had my cat pictures.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SwiftUI-Mac-detail.png\" alt=\"Detail view\"><\/p>\n<p>It really should have a loading image to display while the cat image is being downloaded, but to my disappointment, I found that the SF Symbols are not available to a Mac app! But I added a Text view to say &ldquo;Loading&hellip;&rdquo;.<\/p>\n<p>Now that I have a functioning Mac app with a Master-Detail view, the next thing is to explore some more of the challenges that will need to be solved before I can write a Mac app completely using SwiftUI.<\/p>\n<p>If you want to check out the project at this stage, here is a link to the <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\/tree\/8ebeb615db81f9d7b6489a1920ebb08d07131ebb\">relevant GitHub commit<\/a>. Or if you would prefer, here is a link to the <a href=\"https:\/\/github.com\/trozware\/swiftui-mac\">final version<\/a> of the project.<\/p>\n<hr>\n<p>In <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-2\/\">part 2 of this series<\/a>, I will look into:<\/p>\n<ul>\n<li>how to interact with the menus<\/li>\n<li>how to open a secondary window<\/li>\n<li>more user interface controls<\/li>\n<li>how to pass data around between windows<\/li>\n<\/ul>","url":"https:\/\/troz.net\/post\/2019\/swiftui-for-mac-1\/","date":598087680},{"title":"SwiftUI Data Flow","content":"<p><a href=\"https:\/\/developer.apple.com\/xcode\/swiftui\/\">SwiftUI<\/a> gives us a completely new way to lay out out user interfaces, in a declarative and responsive way. Your data dictates what is displayed. But this leads to a new problem - how should the data models be constructed and how can they be passed around between the various views that make up your app?<\/p>\n<p>In this post, I intend to discuss the possibilities with examples.<\/p>\n<p>If you read this article before November 18th 2019, please check out <a href=\"https:\/\/troz.net\/post\/2019\/swiftui-data-flow\/#observable2\">ObservableObject &amp; @ObservedObject - Part 2<\/a> again as it has gone through several iterations, which are all shown for comparison.<\/p>\n<hr>\n<p>At WWDC 2019, some Apple engineers gave a great presentation on <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2019\/226\/\">Data Flow Through SwiftUI<\/a> and I strongly recommend watching the video. But you need to watch it twice. First watch it so that you can get started, and then, when you feel that this is all way too complicated, watch it again and it will start to click into place. The only real difference between then and now is that BindableObject has become ObservableObject.<\/p>\n<p>I guess I could stop there, but I will be illustrating my ideas with code examples, which I hope will make things clearer. Some of the examples are rather contrived in order to make a point, but the sample code is also sprinkled with other SwiftUI examples which I hope will prove useful.<\/p>\n<p><a href=\"https:\/\/github.com\/trozware\/swiftui-data-flow\/tree\/master\">Download the sample project from GitHub<\/a> and open it in Xcode. Go to ContentView.swift and make sure the Canvas is open. Click Resume to make the view appear. Then click the Live Preview button and wait for the view to become active. I recommend clicking the Pin button at the bottom left of the Canvas so that you can investigate the code samples, while still working in the main navigation.<\/p>\n<h2 id=\"data-flow-options\">Data Flow Options<\/h2>\n<p>There are 5 ways to specify data in SwiftUI:<\/p>\n<ul>\n<li>Property<\/li>\n<li>@State<\/li>\n<li>@Binding<\/li>\n<li>ObservableObject &amp; @ObservedObject<\/li>\n<li>@EnvironmentObject<\/li>\n<\/ul>\n<style>\n  img {\n    margin: 10px auto;\n  }\n<\/style>\n\n<p><img src=\"https:\/\/troz.net\/images\/ContentView.png\" alt=\"Content View\"><\/p>\n<h2 id=\"property\">Property<\/h2>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Property<\/span>: View {\n    <span style=\"color:#75715e\">\/\/ Property<\/span>\n    <span style=\"color:#66d9ef\">let<\/span> greeting = <span style=\"color:#e6db74\">&#34;Hello from SwiftUI!&#34;<\/span>\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        <span style=\"color:#75715e\">\/\/ Using property directly<\/span>\n         Text(greeting)\n             .font(.title)\n    }\n}\n<\/code><\/pre><\/div><p>In this example, the <code>greeting<\/code> property is used in the view. <code>greeting<\/code> is static, so the view does not need to monitor it for changes. This may seem like a simplistic and obvious example, but separating it out allows for localization or re-usability.<\/p>\n<p>The property could also have been supplied by a parent view and this is a really useful feature of properties. A parent view can have some dynamic data that it can use to set properties in a subview where the subview only needs to display the data statically. This data will change as the parent view changes but the subview will not be able to change the data in the parent view.<\/p>\n<p>And it is important to remember that not everything needs to be set up with one of these new property wrappers.<\/p>\n<h2 id=\"state\">@State<\/h2>\n<p>This is where things start to get very interesting in the SwiftUI world. SwiftUI views are contained in structs, so are non-mutable. Also, the views are re-created every time the data changes, so any properties are re-created then too. By marking a property with the <code>@State<\/code> property wrapper, you are telling SwiftUI that you want it to keep this data in a separate portion of memory, allow it to be mutated, and preserve the current value during the view refresh.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">UsingState<\/span>: View {\n    @State <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> toggleValue = <span style=\"color:#66d9ef\">true<\/span>\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        <span style=\"color:#75715e\">\/\/ Using state with 2-way binding<\/span>\n         Toggle(isOn: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>toggleValue) {\n             Text(<span style=\"color:#e6db74\">&#34;Toggle is <\/span><span style=\"color:#e6db74\">\\(<\/span><span style=\"color:#66d9ef\">self<\/span>.toggleValue ? <span style=\"color:#e6db74\">&#34;ON&#34;<\/span> : <span style=\"color:#e6db74\">&#34;OFF&#34;<\/span><span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n         }\n         .padding(<span style=\"color:#ae81ff\">50<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>In this example, <code>toggleValue<\/code> is declared as a <code>Bool<\/code> with a property wrapper of <code>@State<\/code>. Inside the <code>Toggle<\/code>, the <code>isOn<\/code> value is bound to <code>toggleValue<\/code> by the leading <code>$<\/code>. This allows the variable to set the toggle and the toggle to set the variable - 2-way binding.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Toggle.png\" alt=\"Toggle\"><\/p>\n<p><code>@State<\/code> variables are always value types and are usually local to their view, so Apple recommends marking them as <code>private<\/code>.<\/p>\n<p>And unlike properties, <code>@State<\/code> variables allow you to have data that is dynamic but it can still be passed to subviews as properties for display.<\/p>\n<h2 id=\"binding\">@Binding<\/h2>\n<p>One problem with building SwiftUI views is that it is very easy to end up with a gigantic Pyramid of Doom as you embed views within views within views. The solution is to extract subviews, but then you need a way to pass the data to the subview.<\/p>\n<p>This is where <code>@Binding<\/code> comes in as it allows you to tell a view that the data for a property is actually coming from a parent but that the subview is allowed to change that property and that change will flow back to the parent&rsquo;s data.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Numbers<\/span>: View {\n    @State <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> stepperValue = <span style=\"color:#ae81ff\">0<\/span>\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        NumberChooser(stepperValue: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>stepperValue)\n    }\n}\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">NumberChooser<\/span>: View {\n    <span style=\"color:#75715e\">\/\/ Using state from parent with 2-way binding<\/span>\n    @Binding <span style=\"color:#66d9ef\">var<\/span> stepperValue: Int\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        ZStack {\n            VStack {\n                Stepper(value: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>stepperValue, <span style=\"color:#66d9ef\">in<\/span>: <span style=\"color:#ae81ff\">0.<\/span>..<span style=\"color:#ae81ff\">20<\/span>) {\n                    Text(<span style=\"color:#e6db74\">&#34;Value = <\/span><span style=\"color:#e6db74\">\\(<\/span>stepperValue<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n                }\n\n                NumberBlock(stepperValue: stepperValue)\n            }\n        }\n    }\n}\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">NumberBlock<\/span>: View {\n    <span style=\"color:#75715e\">\/\/ As this view never changes the value, there is no need to bind it<\/span>\n    <span style=\"color:#66d9ef\">var<\/span> stepperValue: Int\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        Image(systemName: <span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>stepperValue<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">.square&#34;<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>In this example, I have declared a <code>stepperValue<\/code> property and marked it with <code>@State<\/code>.<\/p>\n<p>The interface has been extracted into a subview called <code>NumberChooser<\/code> and a <code>Binding<\/code> to the <code>stepperValue<\/code> property has been passed to <code>NumberChooser<\/code> using the <code>$<\/code> prefix, which will ensure that changes to the value can come back. Inside <code>NumberChooser<\/code> this property is wrapped in the <code>@Binding<\/code> property wrapper to indicate that it is coming from another source and that changes will be returned.<\/p>\n<p><code>NumberChooser<\/code> itself has a subview called <code>NumberBlock<\/code> but it is a display view only and never mutates the value itself, so <code>stepperValue<\/code> is passed to this subview as a property only, without the <code>$<\/code> prefix. It will still be updated every time the data changes as it is contained by the view with the <code>@State<\/code> property.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/NumberChooser.png\" alt=\"Number Chooser\"><\/p>\n<h2 id=\"state--binding---part-2\">@State &amp; @Binding - Part 2<\/h2>\n<p>So far, the examples have used primitive data types for the @State properties, but given that <code>@State<\/code> properties are value types, any struct can be used. In the next example, I use a struct to hold the properties of a pizza order and use a SwiftUI Form to allow selections.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">PizzaView<\/span>: View {\n    <span style=\"color:#75715e\">\/\/ Using @State for a struct<\/span>\n    @State <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> pizza = Pizza()\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n            VStack {\n                Form {\n                    <span style=\"color:#75715e\">\/\/ Using 2-way binding but each component<\/span>\n                    <span style=\"color:#75715e\">\/\/ only needs 1 property from the struct<\/span>\n                    PizzaNamePicker(selectedPizzaName: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>pizza.name)\n                    PizzaSizePicker(selectedPizzaSize: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>pizza.size)\n                    PizzaCrustPicker(selectedPizzaCrust: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>pizza.crust)\n                }\n\n                <span style=\"color:#75715e\">\/\/ Text representation to prove that the<\/span>\n                <span style=\"color:#75715e\">\/\/ subviews are modifying the parent struct<\/span>\n                Text(pizza.pizzaSelection)\n             }\n            .navigationBarTitle(<span style=\"color:#e6db74\">&#34;Choose Your Pizza&#34;<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>Each subview gets the property it needs using <code>@Binding<\/code>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">PizzaNamePicker<\/span>: View {\n    @Binding <span style=\"color:#66d9ef\">var<\/span> selectedPizzaName: PizzaName\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n      <span style=\"color:#75715e\">\/\/ see the GitHub project for more details<\/span>\n    }\n<\/code><\/pre><\/div><p>The form consists of 3 subviews - one each for selecting the pizza, size and crust. The Pizza struct holds all three properties, but each subview only needs a <code>Binding<\/code> to the single property that it controls. The Text view after the Form is to prove that all the selections come back to the parent.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/PizzaView.png\" alt=\"Pizza View\"><\/p>\n<h2 id=\"observableobject--observedobject---part-1\">ObservableObject &amp; @ObservedObject - Part 1<\/h2>\n<p>These are used if your data model is a class and you want to use reference-based data instead of the struct&rsquo;s value-based system.<\/p>\n<p>To set up a data model to be Observable, it must conform to the <code>ObservableObject<\/code> protocol and any property that needs to be observed should have the <code>@Published<\/code> property wrapper. This makes sure that any time this property changes, all the Views that are observing the instance of this data model will be notified to perform the UI updates.<\/p>\n<p>For this example, I have a ColorSet class with six color components that are used to assemble two RGB colors.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">ColorSet<\/span>: ObservableObject {\n    <span style=\"color:#75715e\">\/\/ ObservableObject<\/span>\n    <span style=\"color:#75715e\">\/\/ The 6 color components are marked as @Published so any changes<\/span>\n    <span style=\"color:#75715e\">\/\/ get published to the views that are observing<\/span>\n\n    @Published <span style=\"color:#66d9ef\">var<\/span> foregroundRed = <span style=\"color:#ae81ff\">0.0<\/span>\n    @Published <span style=\"color:#66d9ef\">var<\/span> foregroundGreen = <span style=\"color:#ae81ff\">0.0<\/span>\n    @Published <span style=\"color:#66d9ef\">var<\/span> foregroundBlue = <span style=\"color:#ae81ff\">0.0<\/span>\n\n    @Published <span style=\"color:#66d9ef\">var<\/span> backgroundRed = <span style=\"color:#ae81ff\">1.0<\/span>\n    @Published <span style=\"color:#66d9ef\">var<\/span> backgroundGreen = <span style=\"color:#ae81ff\">1.0<\/span>\n    @Published <span style=\"color:#66d9ef\">var<\/span> backgroundBlue = <span style=\"color:#ae81ff\">1.0<\/span>\n}\n<\/code><\/pre><\/div><p>In the primary view, I set up an instance of this class as an <code>@ObservedObject<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ColorSetView<\/span>: View {\n    @ObservedObject <span style=\"color:#66d9ef\">private<\/span> <span style=\"color:#66d9ef\">var<\/span> colorSet = ColorSet()\n}\n<\/code><\/pre><\/div><p>The background of the view and the foreground of a system image are set using these colors. A button presents a sheet with sliders to allow editing these colors. The <code>colorSet<\/code> is passed to the sheet like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  .sheet(isPresented: <span style=\"color:#960050;background-color:#1e0010\">$<\/span>showChooser) {\n      <span style=\"color:#75715e\">\/\/ notice that this does not use $ as the ColorChooser<\/span>\n      <span style=\"color:#75715e\">\/\/ will get a reference to the ColorSet object<\/span>\n      ColorChooser(colorSet: <span style=\"color:#66d9ef\">self<\/span>.colorSet)\n  }\n<\/code><\/pre><\/div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">ColorChooser<\/span>: View {\n    @ObservedObject <span style=\"color:#66d9ef\">var<\/span> colorSet: ColorSet\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        <span style=\"color:#75715e\">\/\/ ...<\/span>\n    }\n}\n<\/code><\/pre><\/div><p>A sheet is not the ideal way of presenting a view that uses sliders for editing, but I wanted to demonstrate that changing the sliders instantly changes the value of the <code>@ObservedObject<\/code> for the parent view as well as for the subview. Editing the background color components shows the new background color in the back at the top of the sheet.<\/p>\n<p>The <code>ColorChooser<\/code> itself uses 2 subviews and they get a reference to the <code>ColorSet<\/code> in the same manner.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/ColorChooser.png\" alt=\"Color Chooser\"><\/p>\n<h2 id=\"a-nameobservable2observableobject--observedobject---part-2a\"><!-- raw HTML omitted -->ObservableObject &amp; @ObservedObject - Part 2<!-- raw HTML omitted --><\/h2>\n<p>This section was that one that caused me the most trouble when writing the example app. I wanted to display a list of data and have each entry link to an editable detail view with the edits flowing back to the parent list.<\/p>\n<p>The initial display of data in a List was straight-forward and I was then able to have the list rows navigate to a detailed view for each entry. The problem was getting the edited data back to the parent List.<\/p>\n<p>The basic data model was an <code>ObservableObject<\/code> that publishes an array of <code>PersonViewModel<\/code> objects.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">PersonListModel<\/span>: ObservableObject {\n    @Published <span style=\"color:#66d9ef\">var<\/span> persons: [PersonViewModel] = []\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">fetchData<\/span>() {\n        <span style=\"color:#75715e\">\/\/ get data from web ...<\/span>\n\n        DispatchQueue.main.async {\n            <span style=\"color:#66d9ef\">self<\/span>.persons = newData\n        }\n    }\n}\n<\/code><\/pre><\/div><p>Since this data is going to trigger a UI update after a background network call, it is important that changes to the <code>@Published<\/code> property get switched to the main thread.<\/p>\n<p>The <code>PersonViewModel<\/code> also needs to be <code>Observable<\/code> with the editable properties marked as <code>@Published<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">PersonViewModel<\/span>: Identifiable, ObservableObject {\n    <span style=\"color:#75715e\">\/\/ Even though this is not observed directly,<\/span>\n    <span style=\"color:#75715e\">\/\/ it must be an ObservableObject for the data flow to work<\/span>\n\n    <span style=\"color:#66d9ef\">var<\/span> id = UUID()\n    @Published <span style=\"color:#66d9ef\">var<\/span> first: String = <span style=\"color:#e6db74\">&#34;&#34;<\/span>\n    @Published <span style=\"color:#66d9ef\">var<\/span> last: String = <span style=\"color:#e6db74\">&#34;&#34;<\/span>\n    @Published <span style=\"color:#66d9ef\">var<\/span> phone: String = <span style=\"color:#e6db74\">&#34;&#34;<\/span>\n}\n<\/code><\/pre><\/div><p>The odd thing was the way that I had to pass the data to the detail view. This is what I tried initially:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  List {\n      ForEach(personList.persons) { person <span style=\"color:#66d9ef\">in<\/span>\n          NavigationLink(destination:\n              PersonDetailView(person: person)\n          ) {\n              Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>person.first<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> <\/span><span style=\"color:#e6db74\">\\(<\/span>person.last<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n          }\n      }\n  }\n<\/code><\/pre><\/div><p>And in <code>PersonDetailView<\/code>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    @ObservedObject <span style=\"color:#66d9ef\">var<\/span> person: PersonViewModel\n<\/code><\/pre><\/div><p>This almost worked. The correct data was passed to the detail view, and the data edits changed the data, but the parent list was never re-drawn. If I changed a record&rsquo;s first name then went back to the list, the change was not displayed. But if I then returned to the detail view for the same record, my edits were there, so I could tell that the data was changing correctly. The problem was how to change it in such a way that the parent view was notified of the change.<\/p>\n<p>Trying to bind <code>person<\/code> with <code>PersonDetailView(person: $person)<\/code> gave the error <code>Use of unresolved identifier '$person'<\/code>, so the <code>ForEach<\/code> enumeration did not provide a direct connection to the <code>personList<\/code> object.<\/p>\n<p>The solution I came up with was to switch to enumerating by index in the <code>ForEach<\/code> and passing a direct member of the parent list&rsquo;s data to the detail view. And switching the <code>PersonDetailView<\/code> to use <code>@Binding var person: PersonViewModel<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">ForEach(<span style=\"color:#ae81ff\">0<\/span> ..<span style=\"color:#f92672\">&lt;<\/span> personList.persons.count, id: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.<span style=\"color:#66d9ef\">self<\/span>) { index <span style=\"color:#66d9ef\">in<\/span>\n    NavigationLink(destination:\n        PersonDetailView(person: <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>personList.persons[index])\n    ) {\n        Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span><span style=\"color:#66d9ef\">self<\/span>.personList.persons[index].first<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>) <span style=\"color:#f92672\">+<\/span>\n          Text(<span style=\"color:#e6db74\">&#34; <\/span><span style=\"color:#e6db74\">\\(<\/span><span style=\"color:#66d9ef\">self<\/span>.personList.persons[index].last<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>This works but as well as being hard to read, it has one major flaw. The rows in the table are identified by their row number, rather than by anything in the data like the <code>person.id<\/code>. This can really mess with how SwiftUI handles the List and how it knows which rows have changed and need to be re-rendered. It is important to identify rows by something unique to the data in each row so that SwiftUI knows that you have deleted the row with the ID &ldquo;abcd-1234&rdquo; and not row #7. Because if you delete row ID &ldquo;abcd-1234&rdquo; there is no longer a row ID &ldquo;abcd-1234&rdquo; but if you delete row #7, there is now a different row #7 and anything could happen.<\/p>\n<p><!-- raw HTML omitted --><strong>Update 1:<\/strong> <a href=\"https:\/\/twitter.com\/StewartLynch\">@StewartLynch<\/a> contacted me to suggest a much neater way to pass the person data to the PersonDetailView by using a function to get a <code>Binding&lt;PersonViewModel&gt;<\/code> for each <code>person<\/code> being displayed. This worked perfectly and made for a much cleaner looking bit of code. Thanks Stewart.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">ForEach(personList.persons) { person <span style=\"color:#66d9ef\">in<\/span>\n    NavigationLink(destination:\n        PersonDetailView(person: <span style=\"color:#66d9ef\">self<\/span>.selectedPerson(id: person.id))\n    ) {\n        Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>person.first<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> <\/span><span style=\"color:#e6db74\">\\(<\/span>person.last<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p>And outside the <code>body<\/code> declaration:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">selectedPerson<\/span>(id: UUID) -&gt; Binding&lt;PersonViewModel&gt; {\n    <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> index = <span style=\"color:#66d9ef\">self<\/span>.personList.persons.firstIndex(<span style=\"color:#66d9ef\">where<\/span>: { $0.id == id }) <span style=\"color:#66d9ef\">else<\/span> {\n        fatalError(<span style=\"color:#e6db74\">&#34;This person does not exist.&#34;<\/span>)\n    }\n    <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>personList.persons[index]\n}\n<\/code><\/pre><\/div><p>If you want to have a look at Stewart&rsquo;s solution, check out <a href=\"https:\/\/github.com\/trozware\/swiftui-data-flow\/tree\/57f48ea28d1e987566398800e74f12e339eac231\">this commit on GitHub<\/a>.<\/p>\n<p><strong>Update 2:<\/strong> <a href=\"https:\/\/twitter.com\/vadimshpakovski\">@vadimshpakovski<\/a> says that creating a binding for every <code>person<\/code> object is inefficient and that the function to create this binding will slow things down. He suggests using <code>onReceive<\/code> to react to changes to <code>person<\/code> and trigger an update of <code>personList<\/code>. In this case, <code>PersonDetailView<\/code> uses <code>@ObservedObject var person: PersonViewModel<\/code>. This also works perfectly.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">  ForEach(personList.persons) { person <span style=\"color:#66d9ef\">in<\/span>\n      NavigationLink(destination:\n          PersonDetailView(person: person)\n              .onReceive(person.objectWillChange) { <span style=\"color:#66d9ef\">_<\/span> <span style=\"color:#66d9ef\">in<\/span>\n                  <span style=\"color:#66d9ef\">self<\/span>.personList.objectWillChange.send()\n              }\n      ) {\n          Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>person.first<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> <\/span><span style=\"color:#e6db74\">\\(<\/span>person.last<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n      }\n  }\n<\/code><\/pre><\/div><p>If you want to have a look at Vadim&rsquo;s&rsquo;s solution, check out <a href=\"https:\/\/github.com\/trozware\/swiftui-data-flow\/tree\/093810bab93a984292c4a7b8bf29316a830e9f50\">this commit on GitHub<\/a>.<\/p>\n<p><strong>Update 3:<\/strong> More suggestions have come in from the community (thanks to everyone who contributed) and it has been pointed out to me that while Vadim&rsquo;s solution does solve a lot of the issues, it means that the entire <code>ForEach<\/code> has to be recalculated to check for changes every time a single <code>Person<\/code> is edited. And it also inserts model management code into the view code, which is not great.<\/p>\n<p>So my next attempt goes back to using <code>@Binding var person: PersonViewModel<\/code> in <code>PersonDetailView<\/code> but instead of <code>PersonListModel<\/code> having an array of <code>PersonViewModels<\/code>, it has an array of <code>UUIDs<\/code> and a dictionary of <code>UUID: PersonListModel<\/code>. The benefit of this is that the UUIDs can be used in the <code>ForEach<\/code> as they are unique to each row, and the dictionary can be used to provide a Binding to the <code>person<\/code> for each <code>UUID<\/code>.<\/p>\n<p>This removes the problem of my original solution by identifying each row uniquely, it goes back to Stewart&rsquo;s solution but eliminates the potential slow function to create a binding for the matching person, and eliminates the issue of complete redraws and model management inside views from Vadim&rsquo;s suggestion.<\/p>\n<p>But it was not entirely straight-forward as getting a value from a dictionary by key returns an optional. At first I thought I could use the new <code>default<\/code> syntax for dictionaries to get a non-optional value for binding but for some reason that couldn&rsquo;t be used to create a <code>Binding<\/code>.<\/p>\n<p>The answer was to write an extension on Dictionary with a <code>subscript<\/code> function that returns a non-optional value or gives a fatal error. Since I am in control of the data and set up every UUID with a matching PersonViewModel, this is not dangerous.<\/p>\n<p>So here is what we have now:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">PersonListModel<\/span>: ObservableObject {\n    <span style=\"color:#75715e\">\/\/ Main list view model<\/span>\n    <span style=\"color:#75715e\">\/\/ ObservableObject so that updates are detected<\/span>\n\n    @Published <span style=\"color:#66d9ef\">var<\/span> ids: [UUID] = []\n    @Published <span style=\"color:#66d9ef\">var<\/span> persons: [UUID : PersonViewModel] = [:]\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">fetchData<\/span>() {\n        <span style=\"color:#75715e\">\/\/ get data from web ...<\/span>\n\n        DispatchQueue.main.async {\n          <span style=\"color:#66d9ef\">let<\/span> personViewModels = dataArray.map { PersonViewModel(with: $0) }.sorted() {\n              $0.last <span style=\"color:#f92672\">+<\/span> $0.first <span style=\"color:#f92672\">&lt;<\/span> $1.last <span style=\"color:#f92672\">+<\/span> $1.first\n          }\n          <span style=\"color:#66d9ef\">self<\/span>.ids = personViewModels.map { $0.id }\n          <span style=\"color:#66d9ef\">self<\/span>.persons = Dictionary(\n              uniqueKeysWithValues: personViewModels.map { ($0.id, $0) }\n          )\n        }\n }\n<\/code><\/pre><\/div><p>The incoming data is mapped to a sorted array of <code>PersonViewModels<\/code> before extracting the UUIDs and creating the dictionary. This means that the UUIDs array is in the correct sort order for use in the <code>ForEach<\/code>.<\/p>\n<p>Here is the Dictionary extension:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">Dictionary<\/span> <span style=\"color:#66d9ef\">where<\/span> Key == UUID, Value == PersonViewModel {\n    <span style=\"color:#66d9ef\">subscript<\/span>(unchecked key: Key) -&gt; Value {\n        <span style=\"color:#66d9ef\">get<\/span> {\n            <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> result = <span style=\"color:#66d9ef\">self<\/span>[key] <span style=\"color:#66d9ef\">else<\/span> {\n                fatalError(<span style=\"color:#e6db74\">&#34;This person does not exist.&#34;<\/span>)\n            }\n            <span style=\"color:#66d9ef\">return<\/span> result\n        }\n        <span style=\"color:#66d9ef\">set<\/span> {\n            <span style=\"color:#66d9ef\">self<\/span>[key] = newValue\n        }\n    }\n}\n<\/code><\/pre><\/div><p>And these go together to allow this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">ForEach(personList.ids, id: <span style=\"color:#960050;background-color:#1e0010\">\\<\/span>.<span style=\"color:#66d9ef\">self<\/span>) { id <span style=\"color:#66d9ef\">in<\/span>\n    NavigationLink(\n        destination: PersonDetailView(person: <span style=\"color:#66d9ef\">self<\/span>.<span style=\"color:#960050;background-color:#1e0010\">$<\/span>personList.persons[unchecked: id])\n    ) {\n        Text(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span><span style=\"color:#66d9ef\">self<\/span>.personList.persons[unchecked: id].first<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>) <span style=\"color:#f92672\">+<\/span>\n            Text(<span style=\"color:#e6db74\">&#34; <\/span><span style=\"color:#e6db74\">\\(<\/span><span style=\"color:#66d9ef\">self<\/span>.personList.persons[unchecked: id].last<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n    }\n}\n<\/code><\/pre><\/div><p><img src=\"https:\/\/troz.net\/images\/PersonListView.png\" alt=\"Person List View\"><\/p>\n<p>This ended up a bit more complicated than my original idea, but I think it is now <em>good<\/em> SwiftUI, avoiding several problems from the earlier solutions.<\/p>\n<p>Thanks to <a href=\"https:\/\/next.json-generator.com\">JSON Generator<\/a> for the sample data. And if anyone has any other solutions to this problem, I would love to hear it. You can contact me using any of the buttons at the end of this article.<\/p>\n<h2 id=\"environmentobject\">@EnvironmentObject<\/h2>\n<p>Think of the EnvironmentObject a piece of state that can be used by any view or any descendent of the view once it has been introduced. People who have used React or any of the similar web development technologies will be familiar with the concept of global state and this is similar to that, although not truely global.<\/p>\n<p>You set up a class as an EnvironmentObject model exactly as you would set up an ObservableObject with the same protocol conformance and using the <code>@Published<\/code> property wrapper to mark properties whose changes will trigger UI updates. Here is a very simple example with just one property.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">UserSettings<\/span>: ObservableObject {\n    @Published <span style=\"color:#66d9ef\">var<\/span> isLoggedIn: Bool = <span style=\"color:#66d9ef\">false<\/span>\n}\n<\/code><\/pre><\/div><p><img src=\"https:\/\/troz.net\/images\/NestedViews.png\" alt=\"Nested Views\"><\/p>\n<p>In this example, the yellow view is the parent view - the different views have different brightly colored backgrounds to make them easy to distinguish. The yellow view has access to the <code>UserSettings<\/code> like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">NestingViews<\/span>: View {\n    @EnvironmentObject <span style=\"color:#66d9ef\">var<\/span> userSettings: UserSettings\n\n    <span style=\"color:#66d9ef\">var<\/span> body: some View {\n        ZStack {\n            Color.yellow.edgesIgnoringSafeArea(.all)\n\n            VStack {\n                <span style=\"color:#75715e\">\/\/ UI omitted for space reasons<\/span>\n\n                <span style=\"color:#75715e\">\/\/ display first nested view<\/span>\n                ChildView()\n            }\n        }\n    }\n}\n<\/code><\/pre><\/div><p>The <code>ChildView<\/code> contained in this parent - the green view - has no need to access this data and so gets no <code>@EnvironmentObject<\/code> property. But <code>ChildView<\/code> contains another subview - the blue one. And this <code>GrandChildView<\/code> does need access to the <code>UserSettings<\/code> so it has the exact same <code>@EnvironmentObject var userSettings: UserSettings<\/code> property as the parent view.<\/p>\n<p>If this was using <code>@ObservedObject<\/code> the data would have to be passed through every view in an un-broken chain, even though <code>ChildView<\/code> did not need this data. By using <code>@EnvironmentObject<\/code> the chain can be broken, but any view that needs to, can access and mutate this data. In the example, both the yellow and the blue views display and edit the same data with updates happening in both when either button is pressed.<\/p>\n<p>One key thing to remember about previewing <code>@EnvironmentObject<\/code> in the Canvas is that every view that uses it, or that contains a view that uses it, needs to be supplied with the <code>ObservableObject<\/code> in the preview using <code>.environmentObject()<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">NestingViews_Previews<\/span>: PreviewProvider {\n    <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">var<\/span> previews: some View {\n        NestingViews()\n            .environmentObject(UserSettings())\n    }\n}\n<\/code><\/pre><\/div><p>In the app itself, only the first view to access the <code>@EnvironmentObject<\/code> needs it set. In this example, it is done in the <code>NavigationLink<\/code> that goes to the <code>NestingViews<\/code> example. The <code>.environmentObject<\/code> can be provided to the root view in the <code>SceneDelegate<\/code> if the root view needs it.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    NavigationLink(destination: NestingViews().environmentObject(UserSettings())) {\n        ListContents(title: <span style=\"color:#e6db74\">&#34;@EnvironmentObject&#34;<\/span>, imageNumber: <span style=\"color:#ae81ff\">6<\/span>)\n    }\n<\/code><\/pre><\/div><h2 id=\"summary\">Summary<\/h2>\n<p>Or What Should I Use When?<\/p>\n<ul>\n<li>For value-based data models or data primitives, use <code>@State<\/code>.<\/li>\n<li>For reference-based data use <code>ObservableObject<\/code>.<\/li>\n<li>For data needed by a lot of views in your app, use <code>@EnvironmentObject<\/code>.<\/li>\n<li>Use <code>@Binding<\/code> or <code>@ObservedObject<\/code> to pass data to a view that can mutate it.<\/li>\n<\/ul>\n<p>And one final tip: while creating a view from scratch, use <code>@State<\/code> with sample, hard-coded data. Once you have the interface you want, then change it to use real data.<\/p>\n<p>I am sure people will develop their own theories and their own ways of using SwiftUI, but those are the guidelines that I intend to follow for now. If you have different views and would like to discuss them, please contact me.<\/p>","url":"https:\/\/troz.net\/post\/2019\/swiftui-data-flow\/","date":590280477},{"title":"SwiftUI First Thoughts","content":"<style>\n  img {\n    margin: 10px auto;\n  }\n<\/style>\n\n<p>At WWDC 2019, Apple surprised us all by announcing a completely new declarative UI framework called <a href=\"https:\/\/developer.apple.com\/xcode\/swiftui\/\">SwiftUI<\/a>. Quoting snippets from the Apple announcements, &ldquo;SwiftUI is an innovative, exceptionally simple way to build user interfaces across all Apple platforms with the power of Swift&rdquo; and &ldquo;SwiftUI uses a declarative syntax so you can simply state what your user interface should do.&rdquo; But what does this mean and should we all adopt it now?<\/p>\n<p><img src=\"https:\/\/developer.apple.com\/assets\/elements\/icons\/swift\/swift-96x96_2x.png\" alt=\"Swift\"><\/p>\n<h2 id=\"swift\">Swift<\/h2>\n<p>Before discussing whether to adopt SwiftUI, we need to consider Swift itself, since you cannot use SwiftUI without Swift.<\/p>\n<p>The announcement of Swift at WWDC 2014 was a complete bombshell. Here in Australia, I watch the keynote every year while half asleep since it starts at 3 am. That announcement had me wide awake and bouncing out of my seat with excitement. I was an early adopter and have never regretted that decision.<\/p>\n<p>Many well-respected developers have decided to ignore Swift and they have their various reasons, so let&rsquo;s go through the ones I have heard:<\/p>\n<h4 id=\"1-im-very-comfortable-and-productive-in-objective-c\">1. I&rsquo;m very comfortable and productive in Objective-C<\/h4>\n<p>This is not a bad reason and for many people, their employer may insist on the language anyway, but this argument doesn&rsquo;t work for me. Firstly, I think that there is never going to be the One Perfect Language (with apologies to <a href=\"https:\/\/oleb.net\/blog\/2017\/06\/chris-lattner-wwdc-swift-panel\/#in-which-fields-would-you-like-to-see-swift-in-the-future\">Chris Lattner<\/a>) so I am always open to new ideas. And personally, I love learning new languages even if I am never going to use them in production. I feel that this makes me a better programmer overall. And there are vast benefits to Swift - it is a much safer language to write it, it is easier to read and more concise to write, it is just a much more modern language.<\/p>\n<h4 id=\"2-swift-is-too-new-and-changes-too-much-between-versions\">2. Swift is too new and changes too much between versions<\/h4>\n<p>Swift was new. It is now 5 years old and we are into version 5.2. Undeniably, there have been a lot of changes since 1.0 and many of them have been breaking changes. Swift 3 was especially bad in this respect. But this came with advantages too. As early adopters, we were able to influence the direction of the language. And Xcode was always pretty good about providing a converter to the next version. But either way, since Swift 4, there are supposed to be no more breaking changes, so this is an argument whose time has passed.<\/p>\n<h4 id=\"3-no-abi-stability\">3. No ABI stability<\/h4>\n<p>ABI stability was a crutch that many people clung to as an excuse to avoid Swift. But unless you were building frameworks for distribution, I don&rsquo;t see that it was ever a complete deal-breaker. The <a href=\"https:\/\/github.com\/apple\/swift\/blob\/master\/docs\/ABIStabilityManifesto.md#what-does-abi-stability-enable\">Swift ABI Stability Manifesto<\/a> has a good review of what ABI stability is and what it will allow. As app developers, the main advantage is that the Swift libraries will no longer need to be bundled with each app. This will decrease app sizes dramatically. But either way, we now have ABI stability, so again, this argument is finished.<\/p>\n<h4 id=\"4-apple-may-not-be-serious-about-swift-and-it-may-not-last\">4. Apple may not be serious about Swift and it may not last<\/h4>\n<p>I think there was a certain amount of wishful thinking here. The main data behind this theory seemed to be that very few of the Apple apps included any Swift. And in the beginning this was true. I expect Apple&rsquo;s apps have a rather longer development time-frame than apps produced by independents. However over the last few years, more and more of Apple&rsquo;s own apps have started to use Swift, either completely or partially. And any doubt about Apple&rsquo;s commitment to Swift should have been permanently laid to rest by the announcement of SwiftUI.<\/p>\n<h4 id=\"5-its-too-complicated\">5. It&rsquo;s too complicated<\/h4>\n<p>OK, this one has some validity, but then again, if Swift is to rule the world, it needs to be able to do a lot of things. I love Swift, I love writing in it and I am very productive when using it. But then I see a chunk of code sprinkled with generics and unsafe pointers and I can&rsquo;t make head nor tail of it. However, I think that if you are writing any standard, non-arcade-game app, you can write very good Swift using just the basics.<\/p>\n<h2 id=\"why-did-apple-make-swiftui\">Why did Apple make SwiftUI?<\/h2>\n<p>Having demolished the arguments against using Swift, it&rsquo;s time to move on to SwiftUI. Let&rsquo;s start with the reasons why something like this had to happen.<\/p>\n<p>Apple now has 5 or possibly 6 user platforms: macOS, iOS, iPadOS, tvOS, watchOS and maybe CarPlay. (I&rsquo;ve never considered any CarPlay development so I have no idea how it works.) The screen sizes range from 38mm for the smallest watch to over 75&rdquo; to large screen TVs (apologies for mixing my units there, but it seems that TVs have not gone metric yet). As far as user interface frameworks go, we have had AppKit, UIKit and WatchKit. AppKit is the venerable old member of this team, descended from NextStep (which is why every element name has the NS prefix) and is used to make macOS apps. UIKit was built from scratch for the iPhone and so is a lot newer and neater than AppKit, but at the same time it is more limited. It has never had to deal with the vast variability and complexity of a Mac app&rsquo;s interface. WatchKit is an even more slimmed down framework with a relatively small number of interface elements.<\/p>\n<p>Now imagine that you are trying to write a multi-platform app. You have to learn at least 3 different ways of doing everything. And there are differences that always catch me out. For example, in AppKit, to set the text in a text field, you set the field&rsquo;s <code>stringValue<\/code> but in iOS, you can set the field&rsquo;s <code>text<\/code> property. And in WatchKit, you call the <code>setText()<\/code> method.<\/p>\n<p>Want to change the background color of a view? UIView - no problem, set <code>backgroundColor<\/code>. NSView - nope - do something weird with layers. I forget what, I have to look it up every time.<\/p>\n<p>These inconsistencies are annoying, time-consuming and a huge barrier to cross-platform development. It really annoys me when I read articles or tweets that assume Swift programming = iOS programming when it is so much more. But before SwiftUI, it was not easy to jump between the platforms.<\/p>\n<p><a href=\"https:\/\/developer.apple.com\/ipad-apps-for-mac\/\">Catalyst<\/a>, previously code-named Marzipan, was supposed to be the answer. And it is a partial answer. It allows iPad apps to be ported to the Mac and that&rsquo;s great for iPad developers who want to expand their reach. But it isn&rsquo;t the answer for everybody.<\/p>\n<h3 id=\"interface-builder\">Interface Builder<\/h3>\n<p>Before I go further into what I think is so great about SwiftUI, I would like to take a moment to discuss Interface Builder. Xcode is a brilliant tool that gets better with every release, but its weak point has always been Interface Builder. I am old enough to remember when Interface Builder was a separate app (not that we called them &ldquo;apps&rdquo; in those days) and although it has been folded into Xcode for many years now, the connection between interface and code has always been clunky and un-intuitive. Control-dragging from interface to code and then remembering to switch between Action and Outlet so that you don&rsquo;t end up naming your button &ldquo;doneButtonWasTapped&rdquo;. And if you get the modifier key wrong, who knows what weird stuff will happen.<\/p>\n<p>And then came Auto Layout&hellip; It was vastly more flexible than the old school springs &amp; struts and with the ever increasing number of iPhone &amp; iPad models something had to be done, but if you have never ended up swearing at Auto Layout and reverting to a previous commit or mashing Undo repeatedly, then you can&rsquo;t have used Auto Layout very much!<\/p>\n<p>WatchKit had an entirely different approach to layout and it was easy, intuitive and very refreshing. You drag in objects, they go one under another. You can group them horizontally or vertically, you can make them into table cells. WatchKit has a much more limited set of interface elements and a much more limited set of device sizes to deal with, but I think we can clearly see the origins of SwiftUI in the way it worked. Even if you still had to use Interface Builder to do it.<\/p>\n<p>Interface Builder&rsquo;s quirks lead to a category of programmers who felt the need to write all their interface in code. To my way of thinking, this is a huge waste of time and you still had to wrestle with Auto Layout, but without the visual clues! But if it makes them happy&hellip;<\/p>\n<p><a href=\"https:\/\/developer.apple.com\/xcode\/swiftui\/\"><img src=\"https:\/\/developer.apple.com\/assets\/elements\/icons\/swiftui\/swiftui-96x96_2x.png\" alt=\"SwiftUI\"><\/a><\/p>\n<h2 id=\"what-is-swiftui\">What Is SwiftUI?<\/h2>\n<p>A &ldquo;declarative UI framework&rdquo; - what does that mean? Basically, declarative programming is a way of specifying what a program should do, rather than specifying how to do it. A common example is making a sandwich. If you want a sandwich, you say to the sandwich maker, &ldquo;Please can I have a ham, cheese and tomato sandwich&rdquo;. You don&rsquo;t say &ldquo;Get two pieces of bread, butter both of them, cut 3 slices of ham and 2 slices of cheese&hellip;&rdquo;. They know how to make a sandwich so you only have to ask for what you want.<\/p>\n<p>Back in the Apple UI world, what if you want a button? Is it for an iPhone app? Then you need an UIButton with a certain type. Set its title, size, location, layout constraints. What are the default sizes for an iPhone button? What is the default font? What color should the text be? Now make a button for a tvOS app? That has to be huge! And what other settings does it have? But the thing is, iOS, macOS, tvOS etc. already <strong>KNOW<\/strong> what their buttons should look like. So why not just tell the system &ldquo;I want a button&rdquo;? Let the system work out the details and you can get on with the cool app ideas.<\/p>\n<p>I&rsquo;m not going to turn this post into a SwiftUI tutorial, but I would like to thank and recommend the people that have really helped me get to grips with it, especially <a href=\"https:\/\/www.hackingwithswift.com\/articles\/196\/learn-swiftui-with-free-tutorials\">Paul Hudson of Hacking with Swift with his Learn SwiftUI tutorials<\/a>, <a href=\"https:\/\/www.youtube.com\/user\/azamsharp\/videos\">Mohammad Azam&rsquo;s great YouTube series<\/a>, and <a href=\"https:\/\/designcode.io\/swiftui-course\">Meng To&rsquo;s SwiftUI course at Design+Code<\/a>.<\/p>\n<p>The other great benefit of SwiftUI is that when used with the Combine framework, it gives you a reactive interface. There have been various third-party libraries for doing this: RxSwift, ReactiveSwift, ReactiveCocoa, Bond etc, but with Combine, Apple is baking this into the ecosystem, which makes it a lot easier to set up and means that it will stay up-to-date with the operating systems. A reactive interface is one where you can bind a UI element to a piece of data and then when the data changes, the user interface updates automatically. You can even bind both ways so that the user interface updates the data without you having to do a thing. Imagine how much boiler-plate code that can eliminate?<\/p>\n<h2 id=\"the-good-the-bad-and-the-ugly\">The Good, The Bad and The Ugly<\/h2>\n<h3 id=\"1-the-good\">1. The Good<\/h3>\n<p>You get a lot of interface for very little code. Making tables is a joy without the masses of boilerplate code needed to set up data sources and delegates. The instant preview in the canvas makes iteration much easier. Being able to create something like a Picker and having SwiftUI render it in one of multiple different styles depending on the platform is magical.<\/p>\n<h3 id=\"2-the-bad\">2. The Bad<\/h3>\n<p>It&rsquo;s early days yet and SwiftUI has some quirks and bugs. Sometimes the canvas just stops responding, switching into live mode in the canvas can take a while and of course it is still in beta, so there will be breaking changes to come.<\/p>\n<h3 id=\"3-the-ugly\">3. The Ugly<\/h3>\n<p>It is very easy to build up the Pyramid of Doom where you have multiple levels of nesting leading to the end of your code being a seemingly endless stream of closing curly braces. In SwiftUI, one tends to build from the inside out: make a Text view, embed it in a VStack so you can add another one, embed that stack in an HStack so you can add an Image and so on&hellip; But there is an answer: Command-click on one of your outer layers and select &ldquo;Extract Subview&rdquo;.<\/p>\n<h2 id=\"coding-the-layout\">Coding the Layout<\/h2>\n<p>Earlier in the article, I spoke about programmers ignoring Interface Builder and laying out the interface in code. I don&rsquo;t think this is a good approach, so how is SwiftUI different? Firstly, you get immediate feedback of the UI you are coding, so you are not losing that visual benefit of using Interface Builder. Secondly, SwiftUI does much of the layout for you, so you are not hand-coding auto layouts or every last detail of every UI element. So as far as SwiftUI is concerned, I am a convert to programmatic layouts. But if not using SwiftUI, I would still stick to Interface Builder.<\/p>\n<p>Another point to consider here is that developers have long argued that if Apple wants the iPad to be seen as a &ldquo;Pro&rdquo; device, there should be a version of Xcode for iPad. One of the problems with this was Interface Builder - it is difficult to see how it could be made to work with a touch interface. But with SwiftUI and iPadOS, is it possible that Apple can make an iPad version of Xcode?<\/p>\n<h2 id=\"should-you-use-swiftui\">Should you use SwiftUI?<\/h2>\n<p>I hope that from my previous paragraphs, you have come away with a good feeling for why Apple made SwiftUI and why it is good for us as developers. Personally, I find it a joy to use even in these early beta stages, but some of the arguments against using Swift, can now be applied again to SwiftUI.<\/p>\n<p>That SwiftUI is very new cannot be debated. It is extremely new and even in the handful of betas released since WWDC, we have seen some breaking changes. It feels quite buggy still but as I am running it in a beta operating system with a beta version of Xcode, it would be unfair to blame all the instability on SwiftUI.<\/p>\n<p>SwiftUI is not yet a complete replacement for UIKit\/AppKit\/WatchKit etc. There are SwiftUI equivalents for many of the interface elements and I recommend the <a href=\"https:\/\/goshdarnswiftui.com\">Gosh Darn SwiftUI site<\/a> which maintains a list of UIKit equivalents as well as really useful snippets of SwiftUI code. But even when SwiftUI does not have the UI element you want, there are two easy options: use UIKit\/AppKit or build your own. Apple has made sure that there is no problem about mixing and matching UIKIt\/AppKit code with SwiftUI. And maybe the SwiftUI tools would allow you to build your own version of the missing element. I needed a progress bar and I built one myself with not much code and ended up with what I think is a better look than the standard one.<\/p>\n<p><a href=\"https:\/\/github.com\/trozware\/swiftui_progressbar\"><img src=\"https:\/\/troz.net\/images\/SwiftUi_progressbar.png\" alt=\"Progress Bar\"><\/a><\/p>\n<p><em>Click the image for a link to the GitHub repository.<\/em><\/p>\n<p>For years, Apple has been telling us to use standard interface elements in our apps and if we did this, when system updates changed the look and feel, we mostly got that change for free. Now they are giving us even more for free by saying effectively, tell us what UI element you want and we will do all the work of configuring it for the platform and for the user&rsquo;s settings.<\/p>\n<p>But with this, Apple has given us a lot of modifiers we can apply to elements as well as a great animation suite, so I expect to see a lot of more interesting design choices being made in apps, while they are still adhering to all the standard human interface guidelines for the various platforms.<\/p>\n<p>Apple does not promote SwiftUI as &ldquo;write once, run everywhere&rdquo; but as &ldquo;learn once, apply everywhere&rdquo; and that is an important distinction. It seems at first glance that we can write once but only on a basic level. You are still going to need to design the appropriate UI for a platform, but it will be able to re-use components from the other versions of the same app.<\/p>\n<p>Do I intend to use SwiftUI in my next app - YES. If I was writing code for NASA, I wouldn&rsquo;t, but my apps are rarely mission-critical, so I can indulge myself and learn as I go. It will be frustrating when there are breaking changes, but at the same time, my bug reports are going to make it better.<\/p>\n<p>One caveat is that SwiftUI apps will require the latest operating systems, iOS 13 and macOS 10.15 so if your app has to support older versions of the systems, you will have to wait until next year. But there is nothing to stop you building some test components and starting the learning process.<\/p>","url":"https:\/\/troz.net\/post\/2019\/swiftui_first-thoughts\/","date":587797205},{"title":"Learning Swift  - Tuples","content":"<style>\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n<\/style>\n\n<p>I sometimes like to focus on aspects of the Swift language that get less publicity, but that I think are really useful without adding a lot of complexity. This time I am looking at tuples.<\/p>\n<p>There are many different ways of collecting data together in Swift, but for small amounts of transitory data, I find tuples to be an extremely convenient data structure.<\/p>\n<h2 id=\"what-is-a-tuple\">What is a Tuple?<\/h2>\n<p>A tuple is basically an array with a pre-determined length and unlike normal Swift arrays, it can hold a mix of data types.<\/p>\n<p>Here are some examples:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> pair = (<span style=\"color:#e6db74\">&#34;Jessie&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>)\n<span style=\"color:#66d9ef\">let<\/span> coords = (<span style=\"color:#ae81ff\">0<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">6<\/span>)\n<span style=\"color:#66d9ef\">let<\/span> pet = (type: <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, trained: <span style=\"color:#66d9ef\">false<\/span>, age: <span style=\"color:#ae81ff\">5<\/span>)\n<\/code><\/pre><\/div><p>To define a tuple, you enclose the data elements in parentheses - normal brackets, not curly or square. Optionally, the elements can have a label attached as shown in the <code>pet<\/code> example.<\/p>\n<p>Tuples can have any number of components, but if they get too long, a struct might be a better option. <a href=\"https:\/\/github.com\/realm\/SwiftLint\">SwiftLint<\/a> will complain if you use tuples with more than 3 elements and usually I go along with that.<\/p>\n<p>There are various ways to access the parts of a tuple. The first way is using index numbers which works but isn&rsquo;t very intuitive and could be hard to decipher when you come back to a project after some time.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">print(pair.<span style=\"color:#ae81ff\">0<\/span>)\nprint(pair.<span style=\"color:#ae81ff\">1<\/span>)\n<\/code><\/pre><\/div><p>The next way is if the tuple has used labels for the elements as in the <code>pet<\/code> example above:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">print(pet.type)\nprint(pet.trained)\nprint(pet.age)\n<\/code><\/pre><\/div><p>But the way I prefer to use them is by deconstructing the parts into separate variables in a single statement:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> (x, y, z) = coords\nprint(x, y, z)\n<\/code><\/pre><\/div><p>The elements of a tuple can be of different types but once a tuple has been defined, that type of each element is fixed, so you still get all the benefits of Swift&rsquo;s type safety.<\/p>\n<p>Option-clicking on the variable name shows the inferred type of the tuple:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Tuple_type.png\" alt=\"The type of a tuple.\"><\/p>\n<p>Trying to re-assign the tuple or any elements of the tuple will only work if the new assignments match the initial types for each element:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Tuple_errors.png\" alt=\"Errors when mutating a tuple.\"><\/p>\n<h2 id=\"where-could-you-use-a-tuple-and-why\">Where could you use a tuple and why?<\/h2>\n<p>Let&rsquo;s imagine you have a function that checks a database or web service and comes back with the title of a movie and its rating.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">getMovieInfo<\/span>() {\n  <span style=\"color:#66d9ef\">var<\/span> movieTitle: String\n  <span style=\"color:#66d9ef\">var<\/span> rating: Int\n\n  <span style=\"color:#75715e\">\/\/ get the data from somewhere<\/span>\n  <span style=\"color:#75715e\">\/\/ now return both movieTitle and rating<\/span>\n}\n<\/code><\/pre><\/div><p>Having got the data, this function needs to return two pieces of data: <code>movieTitle<\/code> and <code>rating<\/code> - one <code>String<\/code> and one <code>Int<\/code>. How could this be done?<\/p>\n<ol>\n<li>\n<p><strong>Array<\/strong>: since there are 2 different data types, the array would have to be of type <code>[Any]<\/code> or the <code>Int<\/code> could be converted to a <code>String<\/code> before returning. Neither of these are good options. Using <code>Any<\/code> removes the protection of Swift&rsquo;s type safety and converting the <code>Int<\/code> to and from a <code>String<\/code> may fail, so then you have to deal with optionals.<\/p>\n<\/li>\n<li>\n<p><strong>Dictionary<\/strong>: the same arguments hold true. The dictionary would have to be of type <code>[String: Any]<\/code> or the rating would have to be converted to a <code>String<\/code>.<\/p>\n<\/li>\n<li>\n<p><strong>Struct or Class<\/strong>: either of these would be fine but unless this is a data structure that is going to be re-used, it seems like overkill.<\/p>\n<\/li>\n<li>\n<p><strong>Tuple<\/strong>: this would get my vote, so let&rsquo;s see how that would work.<\/p>\n<\/li>\n<\/ol>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">getMovieInfo<\/span>() -&gt; (String, Int) {\n  <span style=\"color:#66d9ef\">var<\/span> movieTitle: String\n  <span style=\"color:#66d9ef\">var<\/span> rating: Int\n\n  <span style=\"color:#75715e\">\/\/ get the data from somewhere<\/span>\n\n  <span style=\"color:#66d9ef\">return<\/span> (movieTitle, rating)\n}\n<\/code><\/pre><\/div><p>Two main things to notice here:<\/p>\n<ol>\n<li>\n<p>The return type of the function lists the data types of both the elements being returned, enclosed in parentheses.<\/p>\n<\/li>\n<li>\n<p>The returning tuple is created by wrapping the elements inside parentheses, just like in the examples above.<\/p>\n<\/li>\n<\/ol>\n<p>And then in the calling function, you can access the parts of the returned data like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> (returnedMovieTitle, returnedRating) = getMovieInfo()\n<\/code><\/pre><\/div><p>The tuple is being returned and immediately deconstructed to give 2 new variables so accessing the parts of the tuple is easy and type-safe.<\/p>\n<p>A function returning a tuple can also be configured to use named elements by specifying the names in the return type declaration.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">getMovieInfo<\/span>() -&gt; (name: String, score: Int) {\n    <span style=\"color:#66d9ef\">var<\/span> movieTitle: String\n    <span style=\"color:#66d9ef\">var<\/span> rating: Int\n\n    <span style=\"color:#75715e\">\/\/ get the data from somewhere<\/span>\n\n    <span style=\"color:#66d9ef\">return<\/span> (movieTitle, rating)\n}\n\n<span style=\"color:#66d9ef\">let<\/span> result = getMovieInfo()\n<span style=\"color:#66d9ef\">let<\/span> returnedMovieTitle = result.name\n<span style=\"color:#66d9ef\">let<\/span> returnedRating = result.score\n<\/code><\/pre><\/div><p>My feeling is that once a tuple is complex enough to need names, you should really consider using a class or a struct, but for returning 2 or 3 chunks of data from a function, this is a very useful technique, espeicialy if the data types are different.<\/p>\n<h2 id=\"looping-through-tuples\">Looping through tuples<\/h2>\n<p>If you have an array of tuples, looping through the tuples is made very convenient if you use the deconstruction method of accessing the parts.<\/p>\n<p>As an example, suppose you are dealing with some 3D coordinate system and you want to perform an operation on each location.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> coords_array = [\n    (<span style=\"color:#ae81ff\">0<\/span>, <span style=\"color:#ae81ff\">0<\/span>, <span style=\"color:#ae81ff\">0<\/span>),\n    (<span style=\"color:#ae81ff\">0<\/span>, <span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">3<\/span>),\n    (<span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#ae81ff\">2<\/span>),\n    (<span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">0<\/span>, <span style=\"color:#ae81ff\">5<\/span>),\n    (<span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">4<\/span>)\n]\n\n<span style=\"color:#66d9ef\">for<\/span> (x, y, z) <span style=\"color:#66d9ef\">in<\/span> coords_array {\n    <span style=\"color:#66d9ef\">let<\/span> distanceFromOrigin = abs(x) <span style=\"color:#f92672\">+<\/span> abs(y) <span style=\"color:#f92672\">+<\/span> abs(z)\n    print(distanceForOrigin)\n}\n<\/code><\/pre><\/div><p>You can deconstruct the tuple each time through the loop, assigning temporary variables so you can act on them.<\/p>\n<h2 id=\"wrapping-up\">Wrapping Up<\/h2>\n<p>So those are the basics of tuples: how to create them, how to use them and where they might be useful. My main use is as a light-weight alternative to a struct for returning multi-part data from a function. But hopefully after reading this article, they have become another tool in your Swift tool belt that you can consider using in certain circumstances.<\/p>\n<h3 id=\"that-leaves-only-one-important-question-how-do-you-pronounce-tuple\">That leaves only one important question: how do you pronounce &lsquo;tuple&rsquo;?<\/h3>\n<p>I have heard two variations: &lsquo;toople&rsquo; using a long U as in universe or &lsquo;tupple&rsquo; using a short U as in cup. There does not appear to be any strict geographical differentiation, so take your pick. I prefer &lsquo;toople&rsquo; myself, but if somebody says &lsquo;tupple&rsquo;, I know what they mean.<\/p>","url":"https:\/\/troz.net\/post\/2019\/learning-swift-tuples\/","date":570880131},{"title":"The End of Pic-a-POD","content":"<p>I think I wrote the first version of <a href=\"https:\/\/picapod.com\">Pic-a-POD<\/a> in 2003 and have been updating and maintaining it ever since, but the time has come to shut it down.<\/p>\n<p>I haven&rsquo;t been able to find a picture of the original version, but here is one from 2005:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/POD2005.png\" alt=\"Pic-a-POD 2005\"><\/p>\n<p>And here it is today:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/POD2018.png\" alt=\"Pic-a-POD 2018\"><\/p>\n<p>It was written originally as a convenient way to download the daily picture-of-the-day from <a href=\"https:\/\/www.nationalgeographic.com\/photography\/photo-of-the-day\/\">National Geographic<\/a> and use it to set the Mac&rsquo;s Desktop Picture automatically. From there is just grew with more sites added (9 at the moment although I think there have been up to 12 at certain times).<\/p>\n<p>The main issue was keeping up with the site changes of the various sources. Early versions had each copy of the app interrogate the sites directly which meant that any change to the site broke the app until an update could be released. And without the App Store making updates easy to distribute, this was a problem. Later I switched to having PHP scripts on my server do the data retrieval and store the results in a database. The app then just had to request the data from my server. That way if there was a change, I could react quickly and a fix to the server-side scripts allowed all users to get the new data.<\/p>\n<p>As my first Objective-C app and my first app on the Mac App Store, Pic-a-POD has always held a place in my affections, and until last week, it was the one app that was always running on my Mac. So what changed? macOS Mojave&rsquo;s dynamic desktops! I turned off Pic-a-POD, and set the Desktop picture to change dynamically through the day and I loved it.<\/p>\n<p>On the server, I have kept Pic-a-POD updated regularly, adding and removing sites, fixing the scripts to accommodate changes and so on. But the desktop app has languished and has needed an update for many years now. It&rsquo;s networking is primitive and I know so much more about programming for the Mac now that looking at the code is positiviely embarrassing! But it has never been a big seller so a re-write is definitely not economically viable, it would only be for my satisfaction. And if even I am not using it any more, what is the point?<\/p>\n<p>So I have made the sad decision to shut it down. But what does this mean for users of Pic-a-POD right now?<\/p>\n<p>Firstly, it is not going away immediately. I will remove it from the App Store, but existing copies are still going to work. If any of the source sites change their data structure, I will not be monitoring this and I will not update the server-side scripts - just turn off that source and carry on with whatever still works. And finally, when the picapod.com domain name expires in 2021, I will not renew it and the app will cease to operate.<\/p>\n<p>What can you use instead? The default dynamic desktops in Mojave are great although there are only two of them, but I have bought myself an app called <a href=\"https:\/\/itunes.apple.com\/au\/app\/24-hour-wallpaper\/id1226087575?mt=12\">24 Hour Wallpaper<\/a> which includes a great range of dynamic desktop pictures.<\/p>\n<p>So thank you to everyone who has used Pic-a-POD over the years and especially those of you who took the time and trouble to contact me. It has been a fun journey, but there are other apps in my future now.<\/p>","url":"https:\/\/troz.net\/post\/2018\/the-end-of-picapod\/","date":560475500},{"title":"Moving to the Dark Side - Part 2","content":"<style>\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n<\/style>\n\n<p>Now that most of my Mac apps have been updated to support macOS Mojave&rsquo;s dark mode, it was time to turn my attention to this web site.<\/p>\n<p>I build this site using <a href=\"https:\/\/gohugo.io\/\">Hugo<\/a> and up until recently I used a theme called <a href=\"https:\/\/github.com\/olOwOlo\/hugo-theme-even\">Even<\/a> which I had been able to modify to suit my requirements. The story of how I switched to Hugo, what I wanted in a theme and how I went about, is in a <a href=\"https:\/\/troz.net\/post\/2017\/moving-to-hugo\/\">post from last year<\/a>.<\/p>\n<p>But Evan is a theme with a white background and dark text, which looked great in light mode, but rather glaring in dark mode. So it was time to head for the <a href=\"https:\/\/themes.gohugo.io\">Hugo Themes page<\/a> to look for an alternative.<\/p>\n<p>But which way to go? In my opinion, dark themes look better in Mojave&rsquo;s light mode than light themes look in dark mode, so I decided to go with a dark theme. But to my delight, I found a theme that allowed users to switch between light and dark modes: <a href=\"https:\/\/themes.gohugo.io\/hugo-theme-hello-friend\/\">Hello Friend<\/a> by <a href=\"https:\/\/twitter.com\/panr\">panr<\/a>. Click the light bulb icon in the top right and the web site instantly toggles between modes.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Dark_Light_web.png\" alt=\"Dark and light versions of homepage\"><\/p>\n<p>With the spread of dark mode, I would expect more web sites and themes to implement this sort of switching in the future. Thanks to <a href=\"https:\/\/twitter.com\/panr\">panr<\/a> for being an early adopter.<\/p>\n<!-- raw HTML omitted -->\n<p>As I said in my <a href=\"https:\/\/troz.net\/post\/2018\/moving-to-the-dark-side\/\">previous post<\/a>, I have already updated several of my macOS apps to support dark mode. But after reading some comments on Twitter, I have updated <a href=\"https:\/\/itunes.apple.com\/app\/apple-store\/id552293482\">Icon Builder<\/a> and <a href=\"https:\/\/itunes.apple.com\/app\/apple-store\/id997688302\">Dice Pass<\/a> to allow the user to decide which mode to use. Make your choice in the Window menu as to whether these apps use whatever mode is set for the system, or select your preferred mode.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/SelectMode.png\" alt=\"Select mode in Window menu\"><\/p>","url":"https:\/\/troz.net\/post\/2018\/moving-to-the-dark-side-2\/","date":560471375},{"title":"Moving to the Dark Side","content":"<style>\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n<\/style>\n\n<p>With the release of macOS Mojave on 24th September 2018, I have started updating my Mac apps, mainly to enable support for dark mode if appropriate.<\/p>\n<p>And now I have updated this site too. Click the light bulb icon at the top right of the page to toggle between light and dark modes for this site.<\/p>\n<p>And with my apps, so far (1 st October 2018), I have updated <a href=\"https:\/\/itunes.apple.com\/app\/apple-store\/id552293482\">Icon Builder<\/a>, <a href=\"https:\/\/itunes.apple.com\/app\/apple-store\/id509085586\">World Time in Words<\/a>, <a href=\"https:\/\/itunes.apple.com\/app\/apple-store\/id997688302\">Dice Pass<\/a> and <a href=\"https:\/\/itunes.apple.com\/app\/apple-store\/id533321133\">A Knight&rsquo;s Move<\/a>.<\/p>\n<p><a href=\"https:\/\/troz.net\/icon-builder\/\"><img src=\"https:\/\/troz.net\/images\/IconBuilder5.1.png\" alt=\"Icon Builder 5.1\"><\/a><\/p>\n<p><a href=\"https:\/\/troz.net\/time-in-words-for-mac\/\"><img src=\"https:\/\/troz.net\/images\/WTiW_dark.png\" alt=\"World Time in Words 3.2\"><\/a><\/p>\n<p><a href=\"https:\/\/troz.net\/dicepass\/\"><img src=\"https:\/\/troz.net\/images\/DicePass1.5.png\" alt=\"Dice Pass 3.2\"><\/a><\/p>\n<p><a href=\"https:\/\/troz.net\/knightsmove\/\"><img src=\"https:\/\/troz.net\/images\/KnightsMoveMac1.png\" alt=\"Knights Move 1.6\"><\/a><\/p>\n<p>For A Knight&rsquo;s Move, I wanted to make sure the wood-look background didn&rsquo;t change, so I actually disabled dark mode.\nFor any developers looking for the way to do that, I added the following chunk to the <code>applicationDidFinishLaunching(_:)<\/code> method:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#75715e\">#available<\/span>(<span style=\"color:#75715e\">OSX<\/span> <span style=\"color:#ae81ff\">10.14<\/span>, <span style=\"color:#f92672\">*<\/span>) {\n        NSApp.appearance = NSAppearance(named: .aqua)\n    }\n<\/code><\/pre><\/div><p>Similar code could presumably be used to change the appearance of a running app. I may add the ability to switch to my apps later.<\/p>","url":"https:\/\/troz.net\/post\/2018\/moving-to-the-dark-side\/","date":559637383},{"title":"Swift Strings Helper","content":"<p>Hands up everyone who can remember how to work with Swift strings, especially when it comes to substrings and ranges? &hellip;.<\/p>\n<p>Nobody?<\/p>\n<p>Me neither. So I decided that I would work it out once and create myself a library to make it easy for myself in the future. And then I thought that other people might like it too. So I have created my first open sourced project.<\/p>\n<h2 id=\"strings-in-swift\">Strings in Swift<\/h2>\n<p>Swift&rsquo;s string handling is amazing. It is truly Unicode-compliant, so a Swift <code>String<\/code> doesn&rsquo;t care whether your string is made up of basic alphanumerics, accented characters, or emojis that might be composed of several different emojis joined together.<\/p>\n<p>But this power comes at a price, and every version of Swift has changed the way we interact with strings, seemingly making it more and more confusing for the poor programmers trying to stay current. I have got to the stage where each year I read up on the new String features and then promptly forget them. For every use, I have to go back and search how to do what should be simple.<\/p>\n<h2 id=\"the-problems\">The Problems<\/h2>\n<p>To my mind, there are two main problems: indexes and substrings.<\/p>\n<p>In most languages, you can get the n-th character of a string, but not in Swift. In Swift, you have to ask the string for its startIndex (or endIndex), then use an offset to adjust that index by a certain number to give you a <code>String.Index<\/code>. Do much the same to get a second index and then you can grab the string between those two indices.<\/p>\n<p>To get a sub-string from the 7th up to the 11th character of a string, this is what you have to do:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> str = <span style=\"color:#e6db74\">&#34;Hello, playground&#34;<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> subStart = str.index(str.startIndex, offsetBy: <span style=\"color:#ae81ff\">7<\/span>)\n<span style=\"color:#66d9ef\">let<\/span> subEnd = str.index(str.startIndex, offsetBy: <span style=\"color:#ae81ff\">11<\/span>)\n\n<span style=\"color:#66d9ef\">let<\/span> subStr = str[subStart ..<span style=\"color:#f92672\">&lt;<\/span> subEnd]       <span style=\"color:#75715e\">\/\/ &#34;play&#34;<\/span>\n<\/code><\/pre><\/div><p>Splitting the lines up like that at least helps to show what is happening, but then you see abominations like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> sub = str[str.index(str.startIndex, offsetBy: <span style=\"color:#ae81ff\">7<\/span>)..&lt;str.index(str.startIndex, offsetBy: <span style=\"color:#ae81ff\">11<\/span>)]\n<\/code><\/pre><\/div><p>And how anyone is supposed to read that, I really do not know.<\/p>\n<p>And now here is the kicker: the results (<code>subStr<\/code> and <code>sub<\/code> in the examples above) are not of type <code>String<\/code>! They are of type <code>Substring<\/code> so when you go to use them, they don&rsquo;t work as expected.<\/p>\n<p>I guess there are cases for using <code>Substring<\/code> but I always just end up casting to <code>String<\/code> to solve this, but only after the compiler has choked on what I thought was a <code>String<\/code> all along.<\/p>\n<h2 id=\"the-solution\">The Solution<\/h2>\n<p>To make my life easier, I worked out all the ways that I wanted to be able to split up strings. Basically just two ways: by character number or by substring. Swift already has a <code>substring<\/code> method but it uses <code>String.Index<\/code> as shown above. To avoid confusion, I named my functions all <code>sub<\/code>.<\/p>\n<p>But now I can do the following to split strings by character number:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(from: <span style=\"color:#ae81ff\">9<\/span>)\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(from: <span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">3<\/span>)\n\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(upTo: <span style=\"color:#ae81ff\">4<\/span>)\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(upTo: <span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">3<\/span>)\n\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(from: <span style=\"color:#ae81ff\">3<\/span>, upTo: <span style=\"color:#ae81ff\">7<\/span>)\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(from: <span style=\"color:#ae81ff\">3<\/span>, upTo: <span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">5<\/span>)\n<\/code><\/pre><\/div><p>Negative numbers count back from the end of the string. And they all return <code>String<\/code> objects!<\/p>\n<p>Or to split strings by their own sub-strings, I can do this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(from: <span style=\"color:#e6db74\">&#34;abc&#34;<\/span>)\n\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(upTo: <span style=\"color:#e6db74\">&#34;xyz&#34;<\/span>)\n\n<span style=\"color:#66d9ef\">let<\/span> subStr = startingString.sub(from: <span style=\"color:#e6db74\">&#34;abc&#34;<\/span>, upTo: <span style=\"color:#e6db74\">&#34;xyz&#34;<\/span>)\n<\/code><\/pre><\/div><h2 id=\"extras\">Extras<\/h2>\n<p>Once I had created a string helper library, I started thinking about all the other string utilities that would be useful. So I started adding all sorts of facilities:<\/p>\n<ul>\n<li>Computed properties:\n<ul>\n<li>length (why should the length of a string be called count - that makes no sense)<\/li>\n<li>words<\/li>\n<li>lines<\/li>\n<li>word count<\/li>\n<li>line count<\/li>\n<li>title case<\/li>\n<\/ul>\n<\/li>\n<li>Encoding:\n<ul>\n<li>URL encoding &amp; decoding for queries or forms<\/li>\n<li>base64 encoding &amp; decoding<\/li>\n<\/ul>\n<\/li>\n<li>Trim:\n<ul>\n<li>trim<\/li>\n<li>trim left<\/li>\n<li>trim right<\/li>\n<li>trim using extra characters<\/li>\n<\/ul>\n<\/li>\n<li>Pad:\n<ul>\n<li>pad left<\/li>\n<li>pad right<\/li>\n<li>with default space or specified other character<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>That&rsquo;s as far as I have got so far, but I am hoping for some community involvement that will expand or edit this library to make it more broadly applicable.<\/p>\n<h2 id=\"open-source\">Open Source<\/h2>\n<p>I have never created an open source project before and I have rarely contributed to open source. But I have now published this library on GitHub under an MIT license. Please check it out at <a href=\"https:\/\/github.com\/trozware\/swift-strings-helper\">https:\/\/github.com\/trozware\/swift-strings-helper<\/a>. The GitHub repo contains an Xcode project with all the source files, plus the targets to build frameworks for macOS or iOS, and a playground as documentation and to test it all out.<\/p>\n<p>I would love to get as many stars as possible and it would be fantastic if anyone wanted to log an issue or contribute directly. As someone who finds the whole open source world rather intimidating, I would like to assure everyone that there will be no flaming and no shooting down of ANY ideas. I look forward to hearing from you.<\/p>\n<p>I am sure there are other Swift libraries out there dedicated to solving the same problems, but I hope that mine can prove useful to some. And if you just want to use it without contributing, feel free. The usage instructions are all in the ReadMe on the GitHub page.<\/p>","url":"https:\/\/troz.net\/post\/2018\/swift-strings-helper\/","date":551249159},{"title":"Functional Programming in Swift","content":"<p>What is Functional Programming and how can we use it in Swift?<\/p>\n<p>Search online for any definition of functional programming and you will find many different definitions, few of which are practically helpful. I have no claim to be an expert, but as a Swift enthusiast, this is what I have distilled out of the morass.<\/p>\n<h2 id=\"what-is-functional-programming\">What is Functional Programming?<\/h2>\n<p>Without providing a concrete definition, here are what I see as the 3 main goals of functional programming:<\/p>\n<ul>\n<li>use pure functions where possible<\/li>\n<li>avoid mutability where possible<\/li>\n<li>use functions as the basic building blocks<\/li>\n<\/ul>\n<p>So let&rsquo;s go through those one by one and see how they fit into the Swift language.<\/p>\n<h2 id=\"functional-programming-in-swift\">Functional Programming in Swift<\/h2>\n<p>You can <a href=\"https:\/\/github.com\/trozware\/functional-programming\">download a playground containing all these examples from GitHub<\/a>.<\/p>\n<h3 id=\"pure-functions\">Pure functions<\/h3>\n<p>A function is considered pure if it will always produce the same result for the same input, regardless of where it is and what calls it.<\/p>\n<p>Imagine you are writing a role-playing game and for a given fight, you need to be able to calculate the damage per second caused by a character.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">DamageDealer<\/span> {\n\n    <span style=\"color:#66d9ef\">var<\/span> damageDone: Int = <span style=\"color:#ae81ff\">0<\/span>\n    <span style=\"color:#66d9ef\">var<\/span> timeTaken: TimeInterval = <span style=\"color:#ae81ff\">0<\/span>\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">damagePerSecond<\/span>() -&gt; Double {\n        <span style=\"color:#66d9ef\">if<\/span> timeTaken == <span style=\"color:#ae81ff\">0<\/span> {\n            <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#ae81ff\">0<\/span>\n        }\n        <span style=\"color:#66d9ef\">let<\/span> dps = Double(damageDone) <span style=\"color:#f92672\">\/<\/span> timeTaken\n        <span style=\"color:#66d9ef\">if<\/span> dps <span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">0<\/span> {\n            <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#ae81ff\">0<\/span>\n        }\n        <span style=\"color:#66d9ef\">return<\/span> dps\n    }\n\n}\n\n<span style=\"color:#66d9ef\">let<\/span> mage = DamageDealer()\nmage.damageDone = <span style=\"color:#ae81ff\">32<\/span>\nmage.timeTaken = <span style=\"color:#ae81ff\">10<\/span>\n\nmage.damagePerSecond()\n<\/code><\/pre><\/div><p>The <code>damagePerSecond<\/code> function takes no parameters but uses the properties of its containing object. This works in this class, but there are 3 big problems:<\/p>\n<ol>\n<li>The function is not transportable - you cannot copy it into another class as it is totally dependent on the structure of the properties in the containing class.<\/li>\n<li>When calling the function, it is not clear what data it is going to use.<\/li>\n<li>This function is difficult to test as calling the function with the same parameters (none) will produce different results depending on the setup.<\/li>\n<\/ol>\n<p>So for a version that uses a pure function, we could replace <code>damagePerSecond()<\/code> with this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">damagePerSecondPure<\/span>(damage: Int, time: TimeInterval) -&gt; Double {\n    <span style=\"color:#66d9ef\">if<\/span> time == <span style=\"color:#ae81ff\">0<\/span> {\n        <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#ae81ff\">0<\/span>\n    }\n    <span style=\"color:#66d9ef\">let<\/span> dps = Double(damage) <span style=\"color:#f92672\">\/<\/span> time\n    <span style=\"color:#66d9ef\">if<\/span> dps <span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">0<\/span> {\n        <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#ae81ff\">0<\/span>\n    }\n    <span style=\"color:#66d9ef\">return<\/span> dps\n}\n\nmage.damagePerSecondPure(damage: mage.damageDone, time: mage.timeTaken)\n<\/code><\/pre><\/div><p>Calling the function is now more verbose, but reading the call gives you much more information about what is going to happen. Testing is easy, and the function is completely self-contained so can be copied into any class or struct.<\/p>\n<h3 id=\"avoid-mutability\">Avoid mutability<\/h3>\n<p>This one has become the poster child of Swift Functional Programming as Swift provides some very convenient ways to avoid mutability.<\/p>\n<p>The first is <code>let<\/code> versus <code>var<\/code>. My rule is always to start defining any variable\/constant with <code>let<\/code> and only changing to <code>var<\/code> if the compiler raises an error. In the current versions of Xcode, it will give a warning if you use <code>var<\/code> unnecessarily which is great, but I still stick to using <code>let<\/code> first.<\/p>\n<p>The most powerful way Swift lets us avoid mutability with Functional Programming is with <code>map<\/code>, <code>filter<\/code> and <code>reduce<\/code>.<\/p>\n<h4 id=\"filter\">Filter<\/h4>\n<p>Consider this function that checks possible player names:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">checkPlayerNames<\/span>(names: [String]) -&gt; [String] {\n    <span style=\"color:#66d9ef\">var<\/span> validNames: [String] = []\n\n    <span style=\"color:#66d9ef\">for<\/span> name <span style=\"color:#66d9ef\">in<\/span> names {\n        <span style=\"color:#66d9ef\">if<\/span> name.count <span style=\"color:#f92672\">&gt;<\/span> <span style=\"color:#ae81ff\">3<\/span> <span style=\"color:#f92672\">&amp;&amp;<\/span> <span style=\"color:#f92672\">!<\/span>name.contains(<span style=\"color:#e6db74\">&#34; &#34;<\/span>) {\n            validNames.append(name)\n        }\n    }\n\n    <span style=\"color:#66d9ef\">return<\/span> validNames\n}\n\n<span style=\"color:#66d9ef\">let<\/span> allNames = [ <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Slinky&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Buzz Lightyear&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Hamm&#34;<\/span> ]\n<span style=\"color:#66d9ef\">let<\/span> checkedNames = checkPlayerNames(names: allNames)\n<\/code><\/pre><\/div><p>Only names with more than 3 characters and no spaces are considered valid. So this function creates an empty array and then loops through each member of the supplied array and appends any valid names to the new array before returning it.<\/p>\n<p>This function is a pure function and it works as expected. But the <code>validNames<\/code> array is mutable and there is no need for it to be.<\/p>\n<p>Converting this to avoid mutability, we get:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">checkPlayerNamesUsingFilter<\/span>(names: [String]) -&gt; [String] {\n    <span style=\"color:#66d9ef\">let<\/span> validNames = names.filter { name <span style=\"color:#66d9ef\">in<\/span>\n        name.count <span style=\"color:#f92672\">&gt;<\/span> <span style=\"color:#ae81ff\">3<\/span> <span style=\"color:#f92672\">&amp;&amp;<\/span> <span style=\"color:#f92672\">!<\/span>name.contains(<span style=\"color:#e6db74\">&#34; &#34;<\/span>)\n    }\n    <span style=\"color:#66d9ef\">return<\/span> validNames\n}\n<\/code><\/pre><\/div><p>Inside the <code>filter<\/code> closure delimited by the curly braces after the word <code>filter<\/code>, (more about closures below), the element in the array being evaluated is stored in the <code>name<\/code> constant. The checks are done and this implicitly returns a <code>Bool<\/code> - true if the checks pass, false if they do not. If the closure returns true, the name is valid and will be part of the validNames array.<\/p>\n<p>And if you really want to be concise:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">checkPlayerNamesUsingFilterShort<\/span>(names: [String]) -&gt; [String] {\n    <span style=\"color:#66d9ef\">return<\/span> names.filter { $0.count <span style=\"color:#f92672\">&gt;<\/span> <span style=\"color:#ae81ff\">3<\/span> <span style=\"color:#f92672\">&amp;&amp;<\/span> <span style=\"color:#f92672\">!<\/span>$0.contains(<span style=\"color:#e6db74\">&#34; &#34;<\/span>) }\n}\n<\/code><\/pre><\/div><p>I recommend the first method even if it is a bit more verbose. Storing the result in a constant before returning it makes debugging much easier. Using $0 instead of using a named parameter is convenient, but I prefer not to do this unless the closure is very simple.<\/p>\n<h4 id=\"map\">Map<\/h4>\n<p><code>filter<\/code> takes an array of objects and returns a sub-array containing every element which returned true for the checks inside the filter body.<\/p>\n<p><code>map<\/code> changes the elements in an array and can return an array of the same type or an array of different types.<\/p>\n<p>Here is a function to square every integer in an array in the old style, using a mutable array to accumulate the result:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">squareNumbers<\/span>(<span style=\"color:#66d9ef\">_<\/span> numbers: [Int]) -&gt; [Int] {\n    <span style=\"color:#66d9ef\">var<\/span> squares: [Int] = []\n\n    <span style=\"color:#66d9ef\">for<\/span> number <span style=\"color:#66d9ef\">in<\/span> numbers {\n        squares.append(number <span style=\"color:#f92672\">*<\/span> number)\n    }\n\n    <span style=\"color:#66d9ef\">return<\/span> squares\n}\n\n<span style=\"color:#66d9ef\">let<\/span> numbers = [ <span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">3<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">6<\/span> ]\nsquareNumbers(numbers)\n<\/code><\/pre><\/div><p>And doing the same thing using <code>map<\/code>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">squareNumbersUsingMap<\/span>(<span style=\"color:#66d9ef\">_<\/span> numbers: [Int]) -&gt; [Int] {\n    <span style=\"color:#66d9ef\">let<\/span> squares = numbers.map { $0 <span style=\"color:#f92672\">*<\/span> $0 }\n    <span style=\"color:#66d9ef\">return<\/span> squares\n}\n<\/code><\/pre><\/div><p>In this case, the type of the data did not change: integers went in, integers came out.\nBut <code>map<\/code> can change the type as well.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">squareRoots<\/span>(<span style=\"color:#66d9ef\">_<\/span> numbers: [Int]) -&gt; [Double] {\n    <span style=\"color:#66d9ef\">let<\/span> roots = numbers.map { number <span style=\"color:#66d9ef\">in<\/span>\n        sqrt(Double(number))\n    }\n    <span style=\"color:#66d9ef\">return<\/span> roots\n}\n\nsquareRoots(numbers)\n<\/code><\/pre><\/div><p>And there is a final twist to <code>map<\/code> that used to be called <code>flatMap<\/code> but is now called <code>compactMap<\/code> and that allows us to get rid of optionals as we map through an array.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">convertStringsToInts<\/span>(<span style=\"color:#66d9ef\">_<\/span> strings: [String]) -&gt; [Int] {\n    <span style=\"color:#66d9ef\">let<\/span> ints = strings.compactMap { <span style=\"color:#66d9ef\">return<\/span> Int($0) }\n    <span style=\"color:#66d9ef\">return<\/span> ints\n}\n\n<span style=\"color:#66d9ef\">let<\/span> strings = [ <span style=\"color:#e6db74\">&#34;1&#34;<\/span>, <span style=\"color:#e6db74\">&#34;two&#34;<\/span>, <span style=\"color:#e6db74\">&#34;&#34;<\/span>, <span style=\"color:#e6db74\">&#34;0.34&#34;<\/span>, <span style=\"color:#e6db74\">&#34;65&#34;<\/span>, <span style=\"color:#e6db74\">&#34;-93&#34;<\/span>, <span style=\"color:#e6db74\">&#34;4e8&#34;<\/span> ]\nconvertStringsToInts(strings)\n<\/code><\/pre><\/div><p>The conversion of <code>String<\/code> to <code>Int<\/code> may fail and so returns an optional. If this function had used <code>map<\/code> instead of <code>compactMap<\/code>, the result would have been an array of optional Ints: <code>[Int?]<\/code>. By using <code>compactMap<\/code>, every <code>nil<\/code> value was dropped and only valid integers are included.<\/p>\n<h4 id=\"reduce\">Reduce<\/h4>\n<p>The final tool in the immutability toolbox is <code>reduce<\/code> and this is one that took me a while to wrap my head around.<\/p>\n<p>Imagine that you wanted to add up all the integers in an array. Here is a way to do it using a mutable variable and a loop:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">sumNumbers<\/span>(<span style=\"color:#66d9ef\">_<\/span> numbers: [Int]) -&gt; Int {\n    <span style=\"color:#66d9ef\">var<\/span> total = <span style=\"color:#ae81ff\">0<\/span>\n\n    <span style=\"color:#66d9ef\">for<\/span> num <span style=\"color:#66d9ef\">in<\/span> numbers {\n        total <span style=\"color:#f92672\">+=<\/span> num\n    }\n\n    <span style=\"color:#66d9ef\">return<\/span> total\n}\n\n<span style=\"color:#66d9ef\">let<\/span> numbers = [ <span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">3<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">6<\/span> ]\nsumNumbers(numbers)\n<\/code><\/pre><\/div><p>I can&rsquo;t use <code>filter<\/code> or <code>map<\/code> here because I want to end up with a single value after applying some logic to every item in the array. So here is where I use <code>reduce<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">sumNumbersUsingReduce<\/span>(<span style=\"color:#66d9ef\">_<\/span> numbers: [Int]) -&gt; Int {\n\n    <span style=\"color:#66d9ef\">let<\/span> total = numbers.reduce(<span style=\"color:#ae81ff\">0<\/span>) { (cumulativeTotal, nextValue) <span style=\"color:#66d9ef\">in<\/span>\n        <span style=\"color:#66d9ef\">return<\/span> cumulativeTotal <span style=\"color:#f92672\">+<\/span> nextValue\n    }\n    <span style=\"color:#66d9ef\">return<\/span> total\n}\n\nsumNumbersUsingReduce(numbers)\n<\/code><\/pre><\/div><p>The <code>reduce<\/code> function takes 2 parameters. The first is the starting value - in this case it is zero. The second paramter is a function (I am using a closure) this in turn takes 2 parameters and here is where it gets complicated. Inside the closure function, the 2 parameters are the current result and the next value from the loop. And what you return from this closure is going to be the new cumulative value which will either be fed back into the loop, or returned as the final result. The first time through the loop, the first parameter will be the initial value as set in the reduce function call.<\/p>\n<p>To see how this happens, here is a version sprinkled with <code>print<\/code> statements showing what happens each time through the loop:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">sumNumbersReduceDebug<\/span>(<span style=\"color:#66d9ef\">_<\/span> numbers: [Int]) -&gt; Int {\n    <span style=\"color:#66d9ef\">let<\/span> total = numbers.reduce(<span style=\"color:#ae81ff\">0<\/span>) { (cumulativeTotal, nextValue) <span style=\"color:#66d9ef\">in<\/span>\n        print(<span style=\"color:#e6db74\">&#34;cumulativeTotal = <\/span><span style=\"color:#e6db74\">\\(<\/span>cumulativeTotal<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n        print(<span style=\"color:#e6db74\">&#34;nextValue = <\/span><span style=\"color:#e6db74\">\\(<\/span>nextValue<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n        print(<span style=\"color:#e6db74\">&#34;about to return <\/span><span style=\"color:#e6db74\">\\(<\/span>cumulativeTotal<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> + <\/span><span style=\"color:#e6db74\">\\(<\/span>nextValue<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> = <\/span><span style=\"color:#e6db74\">\\(<\/span>cumulativeTotal <span style=\"color:#f92672\">+<\/span> nextValue<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> which will become the next culmulative or the final value&#34;<\/span>)\n\n        <span style=\"color:#66d9ef\">return<\/span> cumulativeTotal <span style=\"color:#f92672\">+<\/span> nextValue\n    }\n    print(<span style=\"color:#e6db74\">&#34;final result = <\/span><span style=\"color:#e6db74\">\\(<\/span>total<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n    <span style=\"color:#66d9ef\">return<\/span> total\n}\n\n<span style=\"color:#66d9ef\">let<\/span> shortNumbers = [ <span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">3<\/span>, <span style=\"color:#ae81ff\">8<\/span> ]\n\nsumNumbersReduceDebug(shortNumbers)\n<\/code><\/pre><\/div><p>This produces a log showing:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-text\" data-lang=\"text\">cumulativeTotal = 0\nnextValue = 5\nabout to return 0 + 5 = 5 which will become the next culmulative or the final value\ncumulativeTotal = 5\nnextValue = 3\nabout to return 5 + 3 = 8 which will become the next culmulative or the final value\ncumulativeTotal = 8\nnextValue = 8\nabout to return 8 + 8 = 16 which will become the next culmulative or the final value\nfinal result = 16\n<\/code><\/pre><\/div><h3 id=\"using-functions-as-building-blocks\">Using functions as building blocks<\/h3>\n<p>This one is more a matter of style than of any particular programming technique. Basically, keep each function small and break your code into small chunks with obvious naming. This makes your code easier to read, test and debug and it beomes vastly more reusable.<\/p>\n<p>Consider this totally made-up function:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">configureDisplay<\/span>(<span style=\"color:#66d9ef\">for<\/span> userId: String?) {\n    <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> userId = userId <span style=\"color:#66d9ef\">else<\/span> {\n        showLoginScreen()\n        <span style=\"color:#66d9ef\">return<\/span>\n    }\n\n    displayUserData(<span style=\"color:#66d9ef\">for<\/span>: userId)\n    <span style=\"color:#66d9ef\">let<\/span> userType = getPermissions(<span style=\"color:#66d9ef\">for<\/span>: userId)\n\n    populateMenus(<span style=\"color:#66d9ef\">for<\/span>: userType)\n    loadInitialData(<span style=\"color:#66d9ef\">for<\/span>: userId)\n\n    playSound(.welcome)\n}\n\nconfigureDisplay(<span style=\"color:#66d9ef\">for<\/span>: <span style=\"color:#e6db74\">&#34;abc123&#34;<\/span>)\nconfigureDisplay(<span style=\"color:#66d9ef\">for<\/span>: <span style=\"color:#66d9ef\">nil<\/span>)\n<\/code><\/pre><\/div><p>Is it easy to read?\nCan you work out what it does? Now imagine all that functionality in a single huge function - would that be as good to use?<\/p>\n<p>As a way of encouraging shorter functions, which leads inevitably to this sort of structured code, I strongly recommend using SwiftLint to check your code. I wrote a <a href=\"https:\/\/troz.net\/post\/2018\/swiftlint\/\">post about this<\/a> a while ago which you might find useful.<\/p>\n<h4 id=\"naming\">Naming<\/h4>\n<p>The other key thing to mention and it is a point that Apple makes very strongly, is to name your functions and their parameters so as to make them as readable as possible from the calling site. You write a function once, but you most likely call it multiple times, so it is the calling site that needs to be really easy to read.<\/p>\n<p>Returning to the game example, here is a dummy function to show damage caused to a target:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">displayDamage<\/span>(damage: Int, target: String) {}\n\ndisplayDamage(damage: <span style=\"color:#ae81ff\">31<\/span>, target: <span style=\"color:#e6db74\">&#34;Ogre&#34;<\/span>)\n<\/code><\/pre><\/div><p>There is nothing really wrong with the function, but calling it is a bit clunky and doesn&rsquo;t read well with the repeated use of the word &lsquo;damage&rsquo;.<\/p>\n<p>What about this version?<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">display<\/span>(damage: Int, doneTo target: String) {}\n\ndisplay(damage: <span style=\"color:#ae81ff\">42<\/span>, doneTo: <span style=\"color:#e6db74\">&#34;Wolf&#34;<\/span>)\n<\/code><\/pre><\/div><p>There are no repeated words in the caller and by using two labels for the second parameter, the calling site can read almost like a sentence, but inside the function, <code>target<\/code> is still a more logical name.<\/p>\n<p>A third alternative is to use an un-named parameter if the naming logic is implicit in the function name itself:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">displayDamage<\/span>(<span style=\"color:#66d9ef\">_<\/span> damage: Int, doneTo target: String) {}\n\ndisplayDamage(<span style=\"color:#ae81ff\">12<\/span>, doneTo: <span style=\"color:#e6db74\">&#34;Orc&#34;<\/span>)\n<\/code><\/pre><\/div><hr>\n<h2 id=\"closures\">Closures<\/h2>\n<p>As promised above, a very quick explanation of closures, which really deserve their own post&hellip;<\/p>\n<p>In Swift, as in many languages, functions can be passed as parameters to other functions. As an example, I have set up 2 functions to perform a simple calculation on a given integer:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">cube<\/span>(<span style=\"color:#66d9ef\">_<\/span> number: Int) -&gt; Int {\n    <span style=\"color:#66d9ef\">return<\/span> number <span style=\"color:#f92672\">*<\/span> number <span style=\"color:#f92672\">*<\/span> number\n}\ncube(<span style=\"color:#ae81ff\">3<\/span>)\n\n<span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">square<\/span>(<span style=\"color:#66d9ef\">_<\/span> number: Int) -&gt; Int {\n    <span style=\"color:#66d9ef\">return<\/span> number <span style=\"color:#f92672\">*<\/span> number\n}\nsquare(<span style=\"color:#ae81ff\">3<\/span>)\n<\/code><\/pre><\/div><p>Now imagine that you wanted to create a more general function that could call either one of these functions with any number:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">doCalculation<\/span>(<span style=\"color:#66d9ef\">_<\/span> number: Int, calculation: (Int) -&gt; Int) -&gt; Int {\n    <span style=\"color:#66d9ef\">return<\/span> calculation(number)\n}\n<\/code><\/pre><\/div><p><code>doCalculation<\/code> takes 2 parameters. The first one is easy - it is just an integer. The second one is weird! For every parameter of a function, you have to supply the type of that parameter. Usually this is quite straight-forward: Int, String, MyCustomClass etc. But what is the <code>type<\/code> of a function? Option-clicking on the word <code>cube<\/code> in my function definition, I see this:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/FunctionType.png\" alt=\"Function type\"><\/p>\n<p>And ignoring the parameter labels, this basically provides the function type: Int inside parentheses for the input, then the arrow, then Int again for the return type. So the type definition for the <code>cube<\/code> function is <code>(Int) -&gt; Int<\/code>. And when I define the type for the calculation parameter in the <code>doCalculation<\/code> function, this is exactly what I put. The last part of the function definition is specifiying the overall return type as an Int.<\/p>\n<p>Using the <code>cube<\/code> and <code>square<\/code> functions inside <code>doCalculation<\/code> works like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">doCalculation(<span style=\"color:#ae81ff\">7<\/span>, calculation: square)\ndoCalculation(<span style=\"color:#ae81ff\">4<\/span>, calculation: cube)\n<\/code><\/pre><\/div><p>But what if I didn&rsquo;t want to define all the functions I might call in advance? Then I can send the function body to the <code>doCalculation<\/code> function instead of using a pre-built function. This way of using a function inside another function is referred to as a closure.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">doCalculation(<span style=\"color:#ae81ff\">6<\/span>, calculation: { number <span style=\"color:#66d9ef\">in<\/span>\n    <span style=\"color:#66d9ef\">return<\/span> number <span style=\"color:#f92672\">*<\/span> <span style=\"color:#ae81ff\">12<\/span>\n})\n<\/code><\/pre><\/div><p>The <code>doCalculation<\/code> function in unchanged, but instead of passing it a reference to a function, I am directly passing it the instructions it should use to get the result. As with any function, the instructions are contained within a set of curly braces. The input to this function is listed after the opening curly brace followed by the keyword <code>in<\/code>. Then the function body does whatever it needs to and returns the result.<\/p>\n<p>You may have heard the term <code>trailing closure<\/code>. This refers to a function where the last parameter is a function. If that function is called using a closure, there is a short-hand way of writing this, omitting the closure&rsquo;s parameter name and moving the closing parenthesis to before the opening curly brace.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">doCalculation(<span style=\"color:#ae81ff\">16<\/span>) { number <span style=\"color:#66d9ef\">in<\/span>\n    <span style=\"color:#66d9ef\">return<\/span> number <span style=\"color:#f92672\">%<\/span> <span style=\"color:#ae81ff\">3<\/span>\n}\n<\/code><\/pre><\/div><p>With the <code>filter<\/code>, <code>map<\/code> and <code>reduce<\/code> functions I showed above, this is the way their logic was supplied but here is how the filter example would look without using a closure:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">checkName<\/span>(<span style=\"color:#66d9ef\">_<\/span> name: String) -&gt; Bool {\n    <span style=\"color:#66d9ef\">return<\/span> name.count <span style=\"color:#f92672\">&gt;<\/span> <span style=\"color:#ae81ff\">3<\/span> <span style=\"color:#f92672\">&amp;&amp;<\/span> <span style=\"color:#f92672\">!<\/span>name.contains(<span style=\"color:#e6db74\">&#34; &#34;<\/span>)\n}\n\n<span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">checkPlayerNamesUsingFunction<\/span>(names: [String]) -&gt; [String] {\n    <span style=\"color:#66d9ef\">let<\/span> validNames = names.filter(checkName)\n    <span style=\"color:#66d9ef\">return<\/span> validNames\n}\n\n<span style=\"color:#66d9ef\">let<\/span> allNames = [ <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Slinky&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Buzz Lightyear&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Hamm&#34;<\/span> ]\n<span style=\"color:#66d9ef\">let<\/span> checkedNames = checkPlayerNamesUsingFunction(names: allNames)\n<\/code><\/pre><\/div><p>Which methods you use are up to you - they all work. If you have a function that will be called in many different places, maybe it makes more sense to define it once and pass around a reference to that function. If not, a closure has the advantage that it keeps everything together. There is more to closures, particularly to do with variable scope, but I think this post has gone on long enough already&hellip;. maybe next time.<\/p>","url":"https:\/\/troz.net\/post\/2018\/functional-programming\/","date":550642733},{"title":"World Time in Words iOS Update","content":"<p>Its been a long time since the last update to Time In Words for iOS but after prompting by Apple (<em>update or we will remove it from the App Store<\/em>), I finally did it. I was never really happy with the last design of Time in Words for iOS, particularly for the iPad, so this was a good opportunity to do a complete re-design, bringing the app more into alignment with its Mac counterpart. And it got a new name to match its new direction and is now called World Time in Words.<\/p>\n<p><a href=\"http:\/\/itunes.apple.com\/app\/time-in-words\/id498403851\">World Time in Words v 5.0<\/a> is available from the App Store.<\/p>\n<hr>\n<p>In 2015, I released <a href=\"https:\/\/troz.net\/post\/2015\/time-in-words-4.0\/\">Time In Words v 4.0<\/a> for iOS. This was a big change as I had dropped the original QlockTwo concept and switched the emphasis to world time conversions that would be easy to read and understand. This bit worked out well, but the paging interface was not a great success - it made it too tedious to find the zone you were interested in.<\/p>\n<p>The <a href=\"https:\/\/troz.net\/time-in-words-for-mac\/\">Mac version<\/a> is a menu bar app that shows the selected time zones as separate menu items. iOS apps don&rsquo;t have menus, but the closest thing to this is a table, so that is what I went with.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS.jpg\" alt=\"Basic display\"><\/p>\n<p>As before, you can add, remove or re-order the time zones and the top three zones can be shown in your Today widgets.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS-1.jpg\" alt=\"Edit zones\"><\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS-4.jpg\" alt=\"Today widget\"><\/p>\n<p>But the feature that I use most in the Mac app is &ldquo;What time will it be when&hellip;&rdquo;. In the iOS app, for reasons of space, the button is labelled &ldquo;What time will it be?&rdquo; but the functionality is the same: drag the slider to adjust the hour in your local time zone and see what that hour will be in your selected world zones. This is incredibly useful when you have family, friends and colleagues all over the world and really don&rsquo;t want to call them at the wrong time of day.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS-2.jpg\" alt=\"What time will it be\"><\/p>\n<p>The iPad version of the app is identical at this stage, but I am thinking of adjusting the interface so as to take advantage of the increased real estate. If other work doesn&rsquo;t get in the way, this may happen&hellip;<\/p>","url":"https:\/\/troz.net\/post\/2018\/world-time-in-words-ios-update\/","date":550629706},{"title":"Privacy Policy","content":"<p>TL;DR: I don&rsquo;t track you either on my web site or through my apps. If you want to contact me, please do so but I will not initiate any contacts.<\/p>\n<p>As anyone who gets email would realise by now, the EU has introduced a <a href=\"https:\/\/www.eugdpr.org\">General Data Protection Regulation<\/a> designed to enhance online privacy. You will have been getting lots of emails announcing new privacy policies or asking you to opt-in to existing arrangements.<\/p>\n<p>So here is my version of those emails (which you will not get by email because I do not store any user data):<\/p>\n<ul>\n<li>None of my apps store data off your device.<\/li>\n<li>I do not have any user data except for data specifically sent to me via web forms, direct email or in-app email.<\/li>\n<li>If you have signed up to beta test one of my apps, you did give me your email address. No tests are currently on-going, but please contact me if you would rather I removed you from any future beta tests.<\/li>\n<li>My web sites are now totally free of trackers and analytics software.<\/li>\n<\/ul>\n<p>Most of my apps have a &ldquo;Contact the Developer&rdquo; button that creates an email that I will answer. If you do not want me to have your name and email address, do not use these buttons.<\/p>\n<p>My web site has a <a href=\"http:\/\/localhost:1313\/contact\/\">contact page<\/a> - if you use it, I will see your name and email address and I will respond. Again, if you do not want me to have this data, do not use this page.<\/p>\n<p>Since I no longer have any analytics, I would really appreciate hearing if you find any of my posts useful or interesting.<\/p>","url":"https:\/\/troz.net\/post\/2018\/privacy-policy\/","date":548985116},{"title":"App Updates","content":"<p>Just a quick post to let you know about some recent app updates&hellip;<\/p>\n<h2 id=\"man-reader\">Man Reader<\/h2>\n<p><a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Man Reader v 1.10<\/a> was released on 11 May 2018.<\/p>\n<p>I had to update <a href=\"https:\/\/troz.net\/manreader\/\">Man Reader<\/a> in November 2017 because of a really strange &ldquo;feature&rdquo; that arrived with macOS High Sierra. Man Reader displays the man pages as HTML which allows the tabs and internal links to work using anchor tags. These had worked for years, but under High Sierra, they just stopped working.<\/p>\n<p>I eventually discovered that it was because I was loading the text directly into the WebView using:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\">[self.web.mainFrame loadHTMLString:manText baseURL:nil];\n<\/code><\/pre><\/div><p>With no baseURL, the anchor links were all defaulting to <code>about:blank<\/code> and going nowhere. The solution was to save the text to a temporary file and then load using:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\">NSURLRequest <span style=\"color:#f92672\">*<\/span>request <span style=\"color:#f92672\">=<\/span> [NSURLRequest requestWithURL: tempFile];\n[self.web.mainFrame loadRequest: request];\n<\/code><\/pre><\/div><p>Needless to say, this took me ages to work out, including a lengthy excursion into using <code>WKWebView<\/code> to see if the more modern web view would solve the problem.<\/p>\n<p>The second update (May 2018) was in response to a crash report from a user. I had great difficulty tracking this one down and even now, I cannot see how it can have happened, but it was in relation to the utility apps that are displayed in the toolbar.<\/p>\n<p>For each app, Man Reader checks to see if the app bundle exists, then it checks for a bundle identifier. It appears that this can come back as nil which I had not realised. And trying to insert an item with a identifier of <code>nil<\/code> into the toolbar caused a crash.<\/p>\n<p>As you can see from the code, ManReader is written in Objective-C. Going back to Objective-C from Swift is painful! And I know that this crash could not have happened if the app had been written in Swift as the identifier would have been an optional and I would have been forced to check that it was not nil before using.<\/p>\n<p>On the plus side, Objective-C apps are tiny in comparison to Swift apps. And the Mac App Store review process set a new record for me. I submitted the app at 10:58 am and it was on sale at 12:03 pm the same day - 66 minutes from start to finish.<\/p>\n<hr>\n<h2 id=\"sequenza-vii\">Sequenza VII<\/h2>\n<p>The other app that I updated recently is <a href=\"https:\/\/itunes.apple.com\/us\/app\/sequenza-vii\/id730234638?mt=8&amp;uo=4\">Sequenza VII<\/a>. Version 1.2 was released on 23 April 2018.<\/p>\n<p>This is an app with a very limited audience - specifically oboe players who want to learn to play Berio&rsquo;s weird music. However Apple sent me a notice saying that as it hadn&rsquo;t been updated for ages, it would be removed from the store within 30 days unless I did something.<\/p>\n<p>Updating it to use the iPhone X display was surprisingly difficult. I set the minimum system version to 11.0 and changed the storyboards to use the latest Xcode but the horns on either side of the notch were still being left blank. In the end, the trick I found was to create a new Launch storyboard - that seemed to fool the system into re-considering all the layouts.<\/p>","url":"https:\/\/troz.net\/post\/2018\/app-updates\/","date":548983377},{"title":"Wow Stats","content":"<h1 id=\"wow-stats\">WoW Stats<\/h1>\n<h3 id=\"do-you-play-world-of-warcraft4\">Do you play <a href=\"https:\/\/worldofwarcraft.com\/\">World of Warcraft<\/a>?<\/h3>\n<p>Have you ever agonised over a new piece of gear - are those stats better or worse for my class and specialization?<\/p>\n<p>Is your computer festooned with sticky notes reminding you that your prot pally needs haste over mastery but the enhancement shaman needs agility?<\/p>\n<p>Get rid of the notes and use the <a href=\"https:\/\/itunes.apple.com\/app\/wow-stats\/id1364247768\">WoW Stats<\/a> app instead.<\/p>\n<p><a href=\"https:\/\/itunes.apple.com\/app\/wow-stats\/id1364247768\"><img src=\"https:\/\/troz.net\/icons\/wow-stats128.png\" alt=\"WoW Stats in the App Store\"><\/a><\/p>\n<p>Data comes from <a href=\"http:\/\/www.noxxic.com\/wow\/\">Noxxic<\/a> and is updated automatically with each new patch.<\/p>\n<p>And you can follow the direct links to the pages for your class and spec on <a href=\"http:\/\/www.noxxic.com\/wow\/\">Noxxic<\/a> or <a href=\"https:\/\/www.icy-veins.com\/wow\/\">Icy Veins<\/a> for more info from within the app.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/wow-stats.png\"><img src=\"https:\/\/troz.net\/images\/wow-stats-small.png\" alt=\"WoW Stats\"><\/a><\/p>\n<p>Click for a larger image&hellip;<\/p>\n<p>Yes, my main is a Beast Master Hunter - Axelady on Khaz&rsquo;goroth if anyone wants to say hello. And if you have to ask why a hunter is called Axelady, you haven&rsquo;t been a hunter for as long as I have!<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Axe.png\" alt=\"Axelady\"><\/p>\n","url":"https:\/\/troz.net\/wow-stats\/","date":544153383},{"title":"Consistent Swift Style","content":"<ul>\n<li>Why is important to style your code?<\/li>\n<li>How do you decide on a style?<\/li>\n<li>Is there a way to enforce this style automatically?<\/li>\n<\/ul>\n<h2 id=\"what-is-style-in-swift\">What is style in Swift?<\/h2>\n<p>Style applies to writing in any programming language and refers to the way you structure your code.<\/p>\n<p>For example, how to you arrange braces?<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">if<\/span> theValue <span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">10<\/span> {\n    <span style=\"color:#75715e\">\/\/ do one thing<\/span>\n} <span style=\"color:#66d9ef\">else<\/span> {\n    <span style=\"color:#75715e\">\/\/ do the other thing<\/span>\n}\n<\/code><\/pre><\/div><p>or<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">if<\/span> theValue <span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">10<\/span>\n{\n    <span style=\"color:#75715e\">\/\/ do one thing<\/span>\n}\n<span style=\"color:#66d9ef\">else<\/span>\n{\n    <span style=\"color:#75715e\">\/\/ do the other thing<\/span>\n}\n<\/code><\/pre><\/div><p>or anything in between?<\/p>\n<p>Do you use camelCase or snake_case?<\/p>\n<p>Do you always start class names with an uppercase letter?<\/p>\n<p>And of course there is the Great Debate: tabs or spaces? And how many?<\/p>\n<h2 id=\"why-is-important-to-style-your-code\">Why is important to style your code?<\/h2>\n<p>You only write code once, but you &amp; others will read it many times.<\/p>\n<p>As I tell students, in six months time some poor sucker is going to have to read this code, and worse still, that poor sucker might be you, so make it readable.<\/p>\n<p>There is a cognitive load involved in reading code but you can lighten that load by using consistent patterns that your brain can recognise quickly without having to re-analyse them each time.<\/p>\n<h2 id=\"how-do-you-decide-on-a-style\">How do you decide on a style?<\/h2>\n<p>Do a search online for <a href=\"https:\/\/encrypted.google.com\/search?hl=en&amp;q=Swift%20style%20guide\">Swift style guide<\/a> and you will get numerous results, although you do have to dodge the sites dedicated to Taylor Swift&rsquo;s dress sense! I like the <a href=\"https:\/\/github.com\/raywenderlich\/swift-style-guide\">Ray Wenderlich guide<\/a> although its emphasis is on styles that read well in print and in web pages. The <a href=\"https:\/\/github.com\/linkedin\/swift-style-guide\">LinkedIn guide<\/a> is also good. <a href=\"https:\/\/github.com\/github\/swift-style-guide\">GitHub<\/a> also has a style guide but it hasn&rsquo;t been updated recently. However it contains some good general advice.<\/p>\n<p>But in the end, you have to decide your own style. The important thing then is to be consistent. I don&rsquo;t care whether you use camelCase or snake_case, tabs or spaces, but if you use a mixture your code will be harder to read, so pick a style and stick to it.<\/p>\n<h2 id=\"is-there-a-way-to-enforce-this-style-automatically\">Is there a way to enforce this style automatically?<\/h2>\n<p>This is where <a href=\"https:\/\/github.com\/realm\/SwiftLint\">SwiftLint<\/a> comes into the picture. SwiftLint is a tool that can check your code and look for style violations. While it comes with a default set of rules, you can configure these rules to suit your own style.<\/p>\n<h3 id=\"installing-and-running-swiftlint\">Installing and Running SwiftLint<\/h3>\n<p>To install SwiftLint, I recommend using <a href=\"https:\/\/brew.sh\">HomeBrew<\/a>. Once you have HomeBrew installed, open Terminal and type <code>brew install swiftlint<\/code>. You can update it any time using <code>brew upgrade swiftlint<\/code>.<\/p>\n<p>You can run SwiftLint directly from the Terminal. <code>cd<\/code> to the folder containing your Xcode project and type <code>swiftlint<\/code>. For a brand new iOS project, you will probably get a result similar to this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-text\" data-lang=\"text\">Linting Swift files in current working directory\nLinting &#39;ViewController.swift&#39; (1\/2)\nLinting &#39;AppDelegate.swift&#39; (2\/2)\nViewController.swift:23: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nViewController.swift:25: warning: Trailing Newline Violation: Files should have a single trailing newline. (trailing_newline)\nAppDelegate.swift:16: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nAppDelegate.swift:44: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nAppDelegate.swift:46: warning: Trailing Newline Violation: Files should have a single trailing newline. (trailing_newline)\nAppDelegate.swift:17: warning: Line Length Violation: Line should be 120 characters or less: currently 144 characters (line_length)\nAppDelegate.swift:23: error: Line Length Violation: Line should be 120 characters or less: currently 285 characters (line_length)\nAppDelegate.swift:24: warning: Line Length Violation: Line should be 120 characters or less: currently 159 characters (line_length)\nAppDelegate.swift:28: error: Line Length Violation: Line should be 120 characters or less: currently 218 characters (line_length)\nAppDelegate.swift:29: warning: Line Length Violation: Line should be 120 characters or less: currently 141 characters (line_length)\nAppDelegate.swift:33: warning: Line Length Violation: Line should be 120 characters or less: currently 155 characters (line_length)\nAppDelegate.swift:37: warning: Line Length Violation: Line should be 120 characters or less: currently 194 characters (line_length)\nAppDelegate.swift:41: warning: Line Length Violation: Line should be 120 characters or less: currently 128 characters (line_length)\nDone linting! Found 13 violations, 2 serious in 2 files.\n<\/code><\/pre><\/div><p><em>I have removed the full path that will be listed for each file just to make this fit better.<\/em><\/p>\n<p>These reports show the file and line number, whether this is an error or a warning, a description of the error and the name of the SwiftLint rule that caused the warning or error.<\/p>\n<p>You could now go through and fix each of these but there are 2 solutions to make things easier:\nTry entering this in the Terminal window: <code>swiftlint autocorrect<\/code>.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-text\" data-lang=\"text\">Correcting Swift files in current working directory\nCorrecting &#39;ViewController.swift&#39; (1\/2)\nCorrecting &#39;AppDelegate.swift&#39; (2\/2)\nViewController.swift:22:1 Corrected Vertical Whitespace\nViewController.swift:23 Corrected Trailing Newline\nAppDelegate.swift:15:1 Corrected Vertical Whitespace\nAppDelegate.swift:43:1 Corrected Vertical Whitespace\nAppDelegate.swift:43 Corrected Trailing Newline\nDone correcting 2 files!\n<\/code><\/pre><\/div><p>And now if you run <code>swiftlint<\/code> again you will only get <code>Done linting! Found 8 violations, 2 serious in 2 files.<\/code> and all the remaining issues are for <code>Line Length Violation<\/code> This shows that autocorrect cannot fix everything and while it is good on spacing, it has trouble with more complex issues. But it is still worth doing as it can do a lot of the tedious fixes that creep into Xcode projects.<\/p>\n<h3 id=\"incorporating-swiftlint-into-xcode\">Incorporating SwiftLint into Xcode<\/h3>\n<p>The next thing to do to make your life easier is to add SwiftLint to your Xcode project so that it can run automatically whenever you do a build.<\/p>\n<p>Open your project in Xcode and select the project itself at the top of the Navigator on the left. Select the target for the main app and click the Build Phases tab along the top. Click the + button at the top left of the existing build phases and choose &lsquo;New Run Script Phase&rsquo;. Expand the newly added phase and paste in the following script:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color:#66d9ef\">if<\/span> which swiftlint &gt;\/dev\/null; <span style=\"color:#66d9ef\">then<\/span>\n  swiftlint autocorrect\n  swiftlint\n<span style=\"color:#66d9ef\">else<\/span>\n  echo <span style=\"color:#e6db74\">&#34;warning: SwiftLint not installed, download from https:\/\/github.com\/realm\/SwiftLint&#34;<\/span>\n<span style=\"color:#66d9ef\">fi<\/span>\n<\/code><\/pre><\/div><p>Your Xcode window should look something like this:<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/SwiftLineRunScript.png\"><img src=\"https:\/\/troz.net\/images\/SwiftLineRunScript.png\" alt=\"SwiftLint Run Script phase\"><\/a><\/p>\n<p>If you think this looks like it is running SwiftLint twice, you are correct. The first time through it corrects what it can and the second pass reports all remaining issues. This is still faster than manually correcting the easy stuff. So now you will see any violations in the Xcode issue navigator when you do a build and you can click the entry to go directly to the code.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/IssuesNavigator.png\" alt=\"SwiftLint errors & warnings in Xcode issues navigator\"><\/p>\n<h3 id=\"configuring-swiftlint\">Configuring SwiftLint<\/h3>\n<p>Now you are all set to SwiftLint all your code, but how do you decide what styles SwiftLint should enforce? Go back to Terminal, make the Terminal window as wide as possible and run <code>swiftlint rules<\/code> which will return a table like this (click to see full-sized image):<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/swiftlint_rules.png\"><img src=\"https:\/\/troz.net\/images\/swiftlint_rules.png\" alt=\"SwiftLint Rules\"><\/a><\/p>\n<p>For details on what each rule does, check out the entries in <a href=\"https:\/\/github.com\/realm\/SwiftLint\/blob\/master\/Rules.md\">Rules.md<\/a><\/p>\n<p>As an example, look at the rules for line_length:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-text\" data-lang=\"text\">+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+\n| identifier                               | opt-in | correctable | enabled in your config | kind        | configuration       |\n+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+\n| line_length                              | no     | no          | yes                    | metrics     | warning: 120, er... |\n+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+\n<\/code><\/pre><\/div><p>And by making my Terminal window full width, I can see the configuration column contains <code>warning: 120, error: 200, ignores urls: false, ignores function declarations: false, ignores comments: false<\/code>.<\/p>\n<ul>\n<li>The rule name (identifier) is line_length - this is what appears in the issue navigator or Terminal.<\/li>\n<li>It is not an opt-in rule, meaning that it is enabled by default.<\/li>\n<li>It is not correctable by autocorrect.<\/li>\n<li>It is enabled in this configuration.<\/li>\n<li>And then comes the configuration:\n<ul>\n<li>a line of more than 120 characters will generate a warning<\/li>\n<li>a line with more than 200 characters will generate an error and stop the build<\/li>\n<li>this rule will not ignore URLs, function declarations or comments<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>To set your own configurations, you need to create a <code>.swiftlint.yml<\/code> file in the same folder as your Xcode project. The leading period makes the file invisible, so you will need to create and edit it using Terminal.<\/p>\n<p>In the Terminal, <code>cd<\/code> to the folder containing your Xcode project file and run <code>touch .swiftlint.yml<\/code> to create the invisible file. You can edit the file in Terminal using <code>nano<\/code>, <code>vim<\/code> or whatever you prefer, but you can also open it in any text editor. I prefer to use Atom so I open the file by running this command: <code>atom .swiftlint.yml<\/code>.<\/p>\n<p>The SwiftLint ReadMe has a section about <a href=\"https:\/\/github.com\/realm\/SwiftLint#configuration\">configuration<\/a> which shows the format and the various general headings you can use, as well as how to configure an individual rule.<\/p>\n<p>Here is my .swiftlint.yml file:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-yml\" data-lang=\"yml\"><span style=\"color:#66d9ef\">disabled_rules<\/span>: <span style=\"color:#75715e\"># rule identifiers to exclude from running<\/span>\n<span style=\"color:#66d9ef\">included<\/span>: <span style=\"color:#75715e\"># paths to include during linting. `--path` is ignored if present. takes precendence over `excluded`.<\/span>\n<span style=\"color:#66d9ef\">excluded<\/span>: <span style=\"color:#75715e\"># paths to ignore during linting. overridden by `included`.<\/span>\n  - Carthage\n  - Pods\n<span style=\"color:#66d9ef\">opt_in_rules<\/span>:\n  - closure_end_indentation\n  - closure_spacing\n  - contains_over_first_not_nil\n  - empty_count\n  - explicit_init\n  - fatal_error_message\n  - force_unwrapping\n  - literal_expression_end_indentation\n  - multiline_arguments\n  - multiline_parameters\n  - operator_usage_whitespace\n  - overridden_super_call\n  - private_outlet\n  - prohibited_super_call\n  - trailing_closure\n  - unneeded_parentheses_in_closure_argument\n<span style=\"color:#66d9ef\">function_body_length<\/span>:\n  - <span style=\"color:#ae81ff\">60<\/span> <span style=\"color:#75715e\"># warning<\/span>\n  - <span style=\"color:#ae81ff\">100<\/span> <span style=\"color:#75715e\"># error<\/span>\n<span style=\"color:#66d9ef\">line_length<\/span>:\n  - <span style=\"color:#ae81ff\">150<\/span> <span style=\"color:#75715e\"># warning<\/span>\n  - <span style=\"color:#ae81ff\">200<\/span> <span style=\"color:#75715e\"># error<\/span>\n<span style=\"color:#66d9ef\">cyclomatic_complexity<\/span>:\n  <span style=\"color:#66d9ef\">ignores_case_statements<\/span>: <span style=\"color:#66d9ef\">true<\/span>\n<\/code><\/pre><\/div><ul>\n<li>No rules are disabled by default.<\/li>\n<li><code>included<\/code> is blank which means it checks every folder&hellip;<\/li>\n<li>&hellip; except for the ones listed in the <code>excluded<\/code> section.<\/li>\n<li><code>opt-in-rules<\/code>: I went through the list of rules with <code>opt-in<\/code> equal to <code>yes<\/code> and enabled all I thought useful.<\/li>\n<li><code>function_body_length<\/code> - the default warning length is 40 but I allow myself 60 as that fits on my screen so I can always see the entire function without scrolling.<\/li>\n<li><code>line_length<\/code> - with a bigger screen, I lengthen both the warning and error lengths.<\/li>\n<li><code>cyclomatic_complexity<\/code> checks for functions that are getting so complex that the compiler might run into trouble. I have this on with the default warning &amp; error limits, but I set it to ignore <code>case<\/code> statements as they can often trigger this without really being too complex.<\/li>\n<\/ul>\n<p>Now that my .swiftlint.yml file is edited, doing a build uses those settings and for a new iOS project, I am now down to 2 errors and 3 warnings, all due to long lines in AppDelegate.swift.<\/p>\n<p>The other main way to configure SwiftLint is by disabling specific rules in my code.<\/p>\n<p>As an example, I have an <code>enum<\/code> for direction:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">enum<\/span> <span style=\"color:#a6e22e\">Direction<\/span> {\n  <span style=\"color:#66d9ef\">case<\/span> up, down, <span style=\"color:#66d9ef\">left<\/span>, <span style=\"color:#66d9ef\">right<\/span>\n}\n<\/code><\/pre><\/div><p>When I build this, SwiftLint gives a warning:\n<code>Identifier Name Violation: Enum element name should be between 3 and 40 characters long: 'up' (identifier_name)<\/code><\/p>\n<p>This tells me that <code>up<\/code> is too short a word to use as an identifier according to the <code>identifier_name<\/code> rule. In this case, <code>up<\/code> is the obvious identifier to use, so I want SwiftLint to let it pass. But I don&rsquo;t want to check my configuration file, because I want it to catch other short identifier names.<\/p>\n<p>The solution is to add this comment to my code, before the <code>case<\/code> line:<\/p>\n<p><code>\/\/ swiftlint:disable next identifier_name<\/code><\/p>\n<p>This tells SwiftLint to ignore the next <code>identifier_name<\/code> warning or error it sees and now my code builds without error.<\/p>\n<p>Rules can also be disabled or enabled by file. Check out the <a href=\"https:\/\/github.com\/realm\/SwiftLint#disable-rules-in-code\">Disable rules in code<\/a> section of the SwiftLint ReadMe for more details.<\/p>\n<h2 id=\"what-are-the-benefits\">What are the benefits?<\/h2>\n<p>For me, SwiftLint enforces a number of good habits:<\/p>\n<ul>\n<li>Files are kept relatively short.<\/li>\n<li>Functions are always small enough to fit on a single screen.<\/li>\n<li>Variable names &amp; function names cannot be too short and non-descriptive.<\/li>\n<li>Braces, indentation and white-space are always consistent.<\/li>\n<\/ul>\n<p>And sometimes the warnings make me think of a better way to do things.<\/p>","url":"https:\/\/troz.net\/post\/2018\/swiftlint\/","date":544145721},{"title":"Icon Builder 5","content":"<p><a href=\"https:\/\/troz.net\/icon-builder\/\">Icon Builder 5.0<\/a> is now available from the <a href=\"http:\/\/itunes.apple.com\/app\/icon-builder\/id552293482\">Mac App Store<\/a>. This is a complete re-write for better compatibility with Apple&rsquo;s latest icon requirements. Read on to see what I have fixed and how&hellip;<\/p>\n<hr>\n<h2 id=\"problems\">Problems<\/h2>\n<p>When I came to create a new iOS app recently, I found out that Icon Builder had fallen behind Apple&rsquo;s requirements in three ways:<\/p>\n<ol>\n<li>The 1024 x 1024 marketing icon is now supposed to be inside the app&rsquo;s icon set.<\/li>\n<li>Icon files must have their color profile set to sRGB (P3 is also valid for iOS apps).<\/li>\n<li>iOS icon files must have no transparent pixels and the alpha channel must be removed from the files.<\/li>\n<\/ol>\n<p>When I set to work fixing these problems I soon ran into issues with the existing version of Icon Builder which was created 6 years ago.<\/p>\n<ul>\n<li>It was written in Objective-C which I am increasingly finding difficult and un-safe to write.<\/li>\n<li>The app was written when I was very much a beginner in Mac apps and this is obvious from the code&hellip;<\/li>\n<li>There was a lot of legacy code left over from previous changes and extensions.<\/li>\n<\/ul>\n<p>So I decided that the most interesting thing to do would be to start almost from scratch and re-write the app in Swift using better techniques.<\/p>\n<h2 id=\"the-re-write\">The Re-write<\/h2>\n<p>Now instead of the Massive View Controller, I have a larger set of small files, each with their own responsibility. Enums and structs dictate the various requirements for the different devices or app types. Other structs deal with creating the images, the folder management and writing out the files. An NSImage extension handles the resizing and reformatting of the images. This is now an app that I would not be ashamed to show anyone, except perhaps for the need to add more unit tests.<\/p>\n<h2 id=\"adding-a-color-profile\">Adding a color profile<\/h2>\n<p>But then we get to the new features needed. Adding the 1024x1024 icon to the app icon set was easy, especially after the re-factoring. But what about the color profile?<\/p>\n<p>This was not as easy as I expected - there is no built in command to apply a profile but here is the solution that I finally found:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">NSImage<\/span> {\n\n  <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">convertImageTo_sRGB<\/span>() <span style=\"color:#66d9ef\">throws<\/span> -&gt; Data {\n      <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> colorSpace = CGColorSpace(name: CGColorSpace.sRGB),\n          <span style=\"color:#66d9ef\">let<\/span> cgi = <span style=\"color:#66d9ef\">self<\/span>.cgImage(forProposedRect: <span style=\"color:#66d9ef\">nil<\/span>,\n                                 context: <span style=\"color:#66d9ef\">nil<\/span>,\n                                 hints: <span style=\"color:#66d9ef\">nil<\/span>) <span style=\"color:#66d9ef\">else<\/span> {\n                                  <span style=\"color:#66d9ef\">throw<\/span> ImageError.cantMakeCgImage\n      }\n\n      <span style=\"color:#66d9ef\">let<\/span> ci = CIImage(cgImage: cgi)\n\n      <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> pngData = CIContext().pngRepresentation(of: ci,\n                                                        format: kCIFormatRGBA8,\n                                                        colorSpace: colorSpace) <span style=\"color:#66d9ef\">else<\/span> {\n          <span style=\"color:#66d9ef\">throw<\/span> ImageError.cantConvertToPng\n      }\n      <span style=\"color:#66d9ef\">return<\/span> pngData\n  }\n\n}\n<\/code><\/pre><\/div><ul>\n<li>This takes the NSImage and converts it to a CGImage, first checking that the appropriate color space exists.<\/li>\n<li>Then it uses the Core Graphics CGImage to create a Core Image CIImage.<\/li>\n<li>There is a new API in macOS 10.13 to extract the png data from a CIImage while assigning a color profile.<\/li>\n<li>This Data can then be written directly to a file and there you have a PNG with an attached color profile.<\/li>\n<\/ul>\n<h2 id=\"transparency\">Transparency<\/h2>\n<p>Now problems 1 &amp; 2 have been solved. Problem 3 was the most difficult. It turned out to be a two-part problem because an image file can have no transparent pixels but still have an alpha channel in the file data.<\/p>\n<p>At first, I thought maybe I could just circumvent the whole problem by converting the images to JPEGs which have no transparency or alpha channel. Using the code above, I just changed it to getting the <code>jpegRepresentation<\/code> instead and saving with a .jpg file extension.<\/p>\n<p>While this solved the alpha channel problem, the transparent parts of the icon just went black which was a not a good look.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Transparent-Jpeg.png\" alt=\"Transparent image converted to JPEG\"><\/p>\n<p><em>For anyone horrified at my use of force-unwrapping, I never do this in a production app but in a playground, it makes the code shorter and it doesn&rsquo;t really matter if I get a crash there.<\/em><\/p>\n<h3 id=\"converting-transparent-pixels-to-white\">Converting transparent pixels to white<\/h3>\n<p>So the first step must be to set the transparent parts of the image to another color. Searching for solutions online, most of the ones I came up with were very slow (processing each pixel) or so complicated that I didn&rsquo;t understand them, and I hate just copy-pasting code that I don&rsquo;t understand at all.<\/p>\n<p>But eventually I found something that I morphed into this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">NSImage<\/span> {\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">makeAlphaWhite<\/span>() -&gt; NSImage {\n        <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> imageData = <span style=\"color:#66d9ef\">self<\/span>.tiffRepresentation,\n            <span style=\"color:#66d9ef\">let<\/span> imageRep = NSBitmapImageRep(data: imageData),\n            <span style=\"color:#66d9ef\">let<\/span> jpegData = imageRep.representation(using: .jpeg, properties: [\n                NSBitmapImageRep.PropertyKey.compressionFactor: NSNumber(value: <span style=\"color:#ae81ff\">1.0<\/span>)\n                ]),\n            <span style=\"color:#66d9ef\">let<\/span> jpegImage = NSImage(data: jpegData) <span style=\"color:#66d9ef\">else<\/span> {\n                <span style=\"color:#66d9ef\">return<\/span> image\n        }\n        <span style=\"color:#66d9ef\">return<\/span> jpegImage\n    }\n\n}\n<\/code><\/pre><\/div><p>It used basically the same trick of converting the image into a JPEG but doing it this way via <code>NSBitmapImageRep<\/code> turned the transparent pixels white instead of black. And as you can see, this gave a much better looking image:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/MakeAlphaWhite.png\" alt=\"Transparent portions converted to white\"><\/p>\n<p>Now I was able to continue with my plans to have JPEGs rule the world! This worked really well in my early tests but then I came to try a Stickers app and the icons didn’t work. I couldn&rsquo;t even drag them in manually! Back to the Apple docs and I see that icons must be PNGs.<\/p>\n<p>When I changed the transparent pixels to white, added the color space and then saved the PNG data, I got an image that looked correct but the file still contained an alpha channel. So I had to come up with a method that re-wrote the PNG data in such a way that it never contained any alpha data at all.<\/p>\n<h3 id=\"removing-the-alpha-channel\">Removing the alpha channel<\/h3>\n<p>Graphics experts are probably groaning aloud by now, but I did eventually arrive at a solution, however hacky:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">NSImage<\/span> {\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">convertImageTo_sRGB_noAlpha<\/span>() <span style=\"color:#66d9ef\">throws<\/span> -&gt; Data {\n        <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> colorSpace = CGColorSpace(name: CGColorSpace.sRGB),\n            <span style=\"color:#66d9ef\">let<\/span> cgi = <span style=\"color:#66d9ef\">self<\/span>.cgImage(forProposedRect: <span style=\"color:#66d9ef\">nil<\/span>,\n                                   context: <span style=\"color:#66d9ef\">nil<\/span>,\n                                   hints: <span style=\"color:#66d9ef\">nil<\/span>) <span style=\"color:#66d9ef\">else<\/span> {\n                                    <span style=\"color:#66d9ef\">throw<\/span> ImageError.cantMakeCgImage\n        }\n\n        <span style=\"color:#66d9ef\">let<\/span> ci = CIImage(cgImage: cgi)\n        <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> jpgData = CIContext().jpegRepresentation(of: ci,\n                                                           colorSpace: colorSpace) <span style=\"color:#66d9ef\">else<\/span> {\n            <span style=\"color:#66d9ef\">throw<\/span> ImageError.cantConvertToJpg\n        }\n        <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> jpegImage = NSImage(data: jpgData) <span style=\"color:#66d9ef\">else<\/span> {\n            <span style=\"color:#66d9ef\">throw<\/span> ImageError.cantConvertToJpgImage\n        }\n        <span style=\"color:#66d9ef\">let<\/span> pngData = <span style=\"color:#66d9ef\">try<\/span> jpegImage.convertImageTo_sRGB()\n        <span style=\"color:#66d9ef\">return<\/span> pngData\n    }\n\n}\n<\/code><\/pre><\/div><ul>\n<li>Take the image <strong>after<\/strong> changing the transparent pixels to white.<\/li>\n<li>Convert it to JPEG data with the required color space.<\/li>\n<li>Convert the JPEG data back to an image - this will contain <strong>NO<\/strong> alpha data.<\/li>\n<li>Use the original routine to convert this JPEG into PNG data with the correct color space.<\/li>\n<\/ul>\n<p>Running this in the playground looks like this:\n<img src=\"https:\/\/troz.net\/images\/TransparentPng.png\" alt=\"Creating non-transparent PNG in playground\"><\/p>\n<p>And as you can see from the file info, it results in a file with the correctly assigned color profile and no alpha channel:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/FileInfo.png\" alt=\"Final result file info\"><\/p>\n<p>The double shuffle sounds time-consuming and in-efficient but it really doesn&rsquo;t take long. In my tests, by far the longest part of creating an icon set is opening the file dialog.<\/p>\n<h2 id=\"future-plans\">Future plans<\/h2>\n<ul>\n<li>Add more unit tests.<\/li>\n<li>Work out how to replace the transparent pixels with a selected color.<\/li>\n<li>Offer better cropping and image positioning options.<\/li>\n<\/ul>\n<h2 id=\"references\">References<\/h2>\n<p>For resizing and cropping images, I use <a href=\"https:\/\/mattgemmell.com\/imagecrop-source-code\/\">Matt Gemmell&rsquo;s NSImage+MGCropExtensions<\/a> and for further reading, I recommend Apple&rsquo;s Human Interface Guidelines concerning app icons for <a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/icons-and-images\/app-icon\/\">iOS<\/a> and <a href=\"https:\/\/developer.apple.com\/macos\/human-interface-guidelines\/icons-and-images\/app-icon\/\">macOS<\/a>.<\/p>\n<blockquote>\n<p>Note: here is Australia we use the spelling <strong>colour<\/strong> but for consistency with the code samples, I have used <strong>color<\/strong> throughout the text.<\/p>\n<\/blockquote>","url":"https:\/\/troz.net\/post\/2018\/icon-builder-5\/","date":540605958},{"title":"NCSS 2018","content":"<p>I gave a Masterclass on Swift at the NCSS Summer School 2018 in the University of Sydney on 9th January 2018. This post contains useful links for use in relation to the material covered during my class.<\/p>\n<hr>\n<h3 id=\"online-sandboxes\">Online Sandboxes<\/h3>\n<ul>\n<li>\n<p><a href=\"https:\/\/eval.weheartswift.com\/eval\/playground\/swift-sandbox\">We ❤️ Swift Sandbox<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/swiftlang.ng.bluemix.net\/#\/repl\">IBM Swift Sandbox<\/a><\/p>\n<\/li>\n<\/ul>\n<hr>\n<h3 id=\"resources\">Resources<\/h3>\n<ul>\n<li><a href=\"https:\/\/gist.github.com\/trozware\/bc582b9a49feb7bbd3adce8ea049c9d3\">Gist of Code Samples<\/a><\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/github.com\/trozware\/ncss2018\/blob\/master\/Presentation.pdf\">Slides from Presentation<\/a><\/li>\n<\/ul>\n<hr>\n<h3 id=\"contact-details\">Contact Details<\/h3>\n<ul>\n<li>\n<p>Email: <a href=\"mailto:sarah@troz.net?subject=NCSS%202018\">sarah@troz.net<\/a><\/p>\n<\/li>\n<li>\n<p>Twitter: <a href=\"https:\/\/twitter.com\/trozware\">@trozware<\/a><\/p>\n<\/li>\n<\/ul>\n<hr>\n<h3 id=\"useful-links\">Useful Links<\/h3>\n<ul>\n<li>\n<p><a href=\"https:\/\/itunes.apple.com\/au\/book\/swift-programming-language\/id881256329?mt=11\">The Swift Programming Language<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/swift.org\">Swift.org<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.raywenderlich.com\/132258\/top-5-ios-swift-newsletters\">Newsletters<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.raywenderlich.com\/category\/swift\">Tutorials<\/a><\/p>\n<\/li>\n<\/ul>","url":"https:\/\/troz.net\/ncss2018\/","date":536808815},{"title":"Mark Time","content":"<!-- raw HTML omitted -->\n<p><a href=\"https:\/\/itunes.apple.com\/us\/app\/mark-time\/id1305580742?mt=8\">Mark Time<\/a> is an application for Celestial Navigation that solves the\nproblem of how to take an accurate time reading to go with each sextant\nsighting. Here is how it was developed&hellip;<\/p>\n<hr>\n<p>A day in the life of a software developer - &ldquo;it would be great if there was an\napp that did&hellip;&rdquo;<\/p>\n<p>One of the family is learning celestial navigation and was struggling with the\nproblem that you either need a partner or more than 2 hands. The key factor is\nthat you need to record the exact time at the moment when you take your\nsighting. And this time has to be in UTC to make your subsequent calculations\nwork.<\/p>\n<p>Since this is a very simple app, I decided it would be fun to describe the\ndevelopment process from first specifications to release in the App Store.<\/p>\n<h3 id=\"the-basic-specs\">The Basic Specs<\/h3>\n<ul>\n<li>tap anywhere on the screen to record the time<\/li>\n<li>convert the time to Universal Time (UT)<\/li>\n<li>display that time in a specific format: DD:HH:MM:SS<\/li>\n<li>store the last 5 tap times<\/li>\n<\/ul>\n<p>A <code>UITapGestureRecognizer<\/code> over the entire view solved the first requirement.\nThe native <code>Date<\/code> object handles time zone conversions perfectly, and then it\nwas a matter of configuring a <code>DateFormatter<\/code> with a custom format string to\nprovide the required date display.<\/p>\n<p>The last 5 times are stored in <code>UserDefaults<\/code> and displayed in reverse order so\nthe most recent is always at the top.<\/p>\n<h3 id=\"ui-considerations\">UI considerations<\/h3>\n<ul>\n<li>colour scheme must work in bright sunlight<\/li>\n<li>text should use dynamic sizing so it works if people adjust the text size on\ntheir iPhones<\/li>\n<li>the UI elements must be out of the way of the new iPhone X system gestures.<\/li>\n<li>while it will most likely be used on iPhones, allow for iPads as well<\/li>\n<\/ul>\n<p>I had done extensive tests of colour schemes when developing my golf scoring app\n<a href=\"https:\/\/troz.net\/19th-hole\/\">19th Hole<\/a>, so I already had the answer to the colours question: dark grey\nbackground with white text.<\/p>\n<p>Allowing for dynamic type should have been easy - choose a font style e.g. body,\nheadline, title 1 and set it to adjust automatically. But with a display that is\nmainly numeric, the display looked terrible because the numbers in the default\nSan Francisco are non-proportional. So I switched to Helvetica Neue and watched\nfor dynamic font size changes manually.<\/p>\n<p>The iPhone X should be fine since I used the new safe area layout guides.<\/p>\n<p>For iPad, I didn&rsquo;t make a lot of UI changes since I don&rsquo;t expect it to be used\nmuch, but the display is bigger and probably easier to read.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/MarkTime1.png\" alt=\"Mark Time\"><\/p>\n<h3 id=\"refinements\">Refinements<\/h3>\n<p>As always, once the first few iterations have been through the testing process,\nthere were a few things that needed changing and then feature creep set in&hellip;<\/p>\n<ul>\n<li>change the date format to be more readable<\/li>\n<li>change the basic tap gesture so that it triggers on tap down, not tap up<\/li>\n<li>add a button to clear all the stored data<\/li>\n<li>display the current time in UTC and in the same format<\/li>\n<li>cheat mode - record latitude and longitude for each time so the calculations\ncan be checked<\/li>\n<li>change the format for showing the latitude and longitude<\/li>\n<li>sound &amp; haptics to provide feedback<\/li>\n<li>settings<\/li>\n<\/ul>\n<p>The date format was DD:HH:MM:SS so for 12th December at 1:01:46 pm, this would\nshow 12:13:01:46 which we decided was a bit confusing. One tended to assume the\nfirst section was actually the hours. Under the new scheme, that same date\ndisplays as 12d 13h 01m 46.654s. The extra precision on the seconds was to show\nthat the time really was changing if you tapped multiple times quickly.<\/p>\n<p>To make the time record immediately, I removed the <code>UITapGestureRecognizer<\/code> and\nplaced <code>UIButtons<\/code> covering all the relevant active areas. They respond on Touch\nDown for a much faster reaction.<\/p>\n<p>Usually, I make a separate View Controller for preferences. This time, because\nthe app needed access to the standard Settings app for Location services, I\ndecided to add the app&rsquo;s preferences to the app&rsquo;s page in the Settings app. This\nworked really well, and made the app itself smaller and simpler.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/MarkTime3.png\" alt=\"Mark Time\"><\/p>\n<p>In cheat mode, the location is recorded at every tap and then the info button\nbeside each time shows the details. This needed to handle the permissions\nrequired for accessing the user&rsquo;s location. The latitude and longitude are shown\nin decimal format and at first, I also showed them in DMS (degrees, minutes,\nseconds) format. I found out that for navigation calculations, they prefer to\nsee degrees and decimal minutes, no seconds. And rather oddly, this is displayed\nsomething like this: 153° 22&rsquo;.84 E<\/p>\n<p>Sounds and haptics were added, configurable through Settings. The sound was a\nnice loud double-beep designed to be clearly audible to tell you when you had\nrecorded a time.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/MarkTime2.png\" alt=\"Mark Time\"><\/p>\n<h3 id=\"release\">Release<\/h3>\n<p>After numerous rounds of TestFlight, I was ready to release. The app was\nsubmitted to iTunes Connect and ready for review on Dec 9, 2017 at 7:36 PM. It\nmoved into review on Dec 11, 2017 at 8:07 AM and was ready for sale on Dec 11,\n2017 at 10:19 AM. So less than 39 hours from start to finish of the review\nprocess for a new app - things have certainly changed!<\/p>\n<p>The app is free - you can get it from the <a href=\"https:\/\/itunes.apple.com\/us\/app\/mark-time\/id1305580742?mt=8\">iTunes App Store<\/a>.<\/p>","url":"https:\/\/troz.net\/post\/2017\/marktime\/","date":534726847},{"title":"Moving to Hugo","content":"<p>Yesterday, I came to update my blog: I had a new post in draft form and I wanted\nto update the Swift code to version 4. However installing High Sierra had\nremoved <a href=\"https:\/\/jekyllrb.com\" title=\"Jekyll\">Jekyll<\/a> which is the site generator that I had been using. I\nre-installed Jekyll but found that it had been updated from version 2 to version\n3.<\/p>\n<hr>\n<h2 id=\"jekyll-problems\">Jekyll Problems<\/h2>\n<p>Then my problems started: missing dependencies due to the basic Jekyll install\nno longer including certain features, and then syntax errors due to changes in\nthe way things are done, particularly to do with pagination.<\/p>\n<p>I tried to fix this myself, then thought that maybe the theme I was using had\nalready solved these issues so I tried re-installing that. It wanted to add\nabout 25 more gems and then failed to install - sigh - spend some time rolling\nthat back&hellip;<\/p>\n<p>At this point I decided that if Jekyll was going to cause me a lot of trouble,\nit might be worth looking at an alternative.<\/p>\n<p>My main criteria were the ability to import my Jekyll site and the ability to\nhost on <a href=\"https:\/\/pages.github.com\/\" title=\"GitHub Pages\">GitHub Pages<\/a>. After checking out the options, I decided to have a\nlook at <a href=\"https:\/\/gohugo.io\" title=\"Hugo\">Hugo<\/a>.<\/p>\n<hr>\n<h2 id=\"moving-to-hugo\">Moving to Hugo<\/h2>\n<p>One of the most lauded features of Hugo is speed. I had found with Jekyll that\nwhen I saved an edited page, it took about 5 seconds before the edits could be\nreloaded into the browser. Hugo is supposedly fast and does auto reloads.<\/p>\n<p>Following the <a href=\"https:\/\/gohugo.io\/getting-started\/quick-start\/\" title=\"Hugo Quick Start\">Quick Start<\/a> guide, I installed Hugo. Importing my Jekyll site\nworked easily and so fast I wasn&rsquo;t sure anything had happened, transferring my\nposts to <code>contents\/posts<\/code> and my other files (status pages, images etc.) to\n<code>static<\/code>.<\/p>\n<p>Then the main exercise appeared to be choosing a theme which would provide not\nonly the visuals but the capabilities of the site.<\/p>\n<p>So I drew up a list of demands for any theme I chose:<\/p>\n<h3 id=\"must-have-features\">Must Have Features<\/h3>\n<ul>\n<li>Responsive<\/li>\n<li>Blog style:\n<ul>\n<li>front page with recent posts<\/li>\n<li>tags<\/li>\n<li>archive page<\/li>\n<\/ul>\n<\/li>\n<li>Written using Markdown<\/li>\n<li>Static pages for apps listing, about, contact etc.<\/li>\n<li>Syntax highlighting<\/li>\n<li>Social links<\/li>\n<li>Google Analytics<\/li>\n<\/ul>\n<h3 id=\"would-be-nice-features\">Would Be Nice Features<\/h3>\n<ul>\n<li>Disqus commenting<\/li>\n<li>Twitter cards<\/li>\n<li>JSON Feed<\/li>\n<li>Searching within the site<\/li>\n<\/ul>\n<p>The Hugo themes page <a href=\"https:\/\/themes.gohugo.io\">https:\/\/themes.gohugo.io<\/a> has themes listed by capabilities,\nbut no way that I could see to combine a selection of capabilities.<\/p>\n<p>Some of the features like Google Analytics or Disqus comments, I could probably\nadd myself using templates from theme that did include them, if the template I\nchose did not.<\/p>\n<p>Conveniently, nearly all these seem to come with an exampleSite folder that\ncontains the configuration info.<\/p>\n<hr>\n<h2 id=\"configuring-a-theme\">Configuring a Theme<\/h2>\n<p>After testing out several alternatives, I decided to go with <a href=\"https:\/\/github.com\/olOwOlo\/hugo-theme-even\" title=\"Even\">Even<\/a> - at\nleast to start with. I installed the theme and copied the contents of the\nexample <code>config.toml<\/code> to my own <code>config.toml<\/code> file and started configuring.<\/p>\n<p>I wasn&rsquo;t happy with some of the fonts, but soon worked out how to change the CSS\nin the theme and then re-build it to apply the changes. And I changed the theme\ncolour from the default red to &ldquo;Cobalt Blue&rdquo;.<\/p>\n<p>Most of the other changes were done using the <code>config.toml<\/code> file. I was able to\nset up menus, configure the social media links I wanted to show, set date\nformats, set the number of items to show per page and so on.<\/p>\n<p>I had a couple of more static pages that I wanted to show, so I added their\nMarkdown files to the content folder.<\/p>\n<p>One nice feature which I had missed in Jekyll (or at least the way I had it set\nup) was the ability to separate blog posts from more static web pages. Each of\nmy apps has an information\/support page that does not accept comments and\ndoesn&rsquo;t need to be listed in the Archives. By moving these Markdown files from\n<code>contents\/posts<\/code> to <code>contents\/pages<\/code>, I was able to achieve this.<\/p>\n<p>Adding Google Analytics and Disqus commenting was as easy as entering my IDs in\nthe relevant places in the <code>config.toml<\/code> file.<\/p>\n<p>I had to do some editing of my imported posts from Jekyll - mainly getting rid\nof references to <code>{{ site.url }}<\/code> so that images and internal links would work.\nAnd sometimes I just needed to re-save a file to make Hugo re-evaluate it (there\nis probably a command to force a complete re-build if I looked for it.)<\/p>\n<hr>\n<h2 id=\"working-out-the-structure\">Working out the Structure<\/h2>\n<p>One thing that I was puzzled by was what templates the various pages are\ngenerated from.<\/p>\n<p>The main page is easy enough as the theme folder has a layouts folder with an\n<code>index.html<\/code> file containing the templating. When a post is displayed, that\nlooks like it comes from <code>layouts\/posts\/single.html<\/code> while\n<code>layouts\/posts\/summary.html<\/code> contains the templating for each entry in the index\npage.<\/p>\n<p>But clicking on the Archives link in the me takes me to <a href=\"https:\/\/troz.net\/post\/\">https:\/\/troz.net\/post\/<\/a>\nand there is no <code>post.html<\/code> file in layouts. There is a <code>post<\/code> folder, but it\ncontains the <code>single.html<\/code> &amp; <code>summary.html<\/code> files described already.<\/p>\n<p>Delving ever deeper, <code>layouts\/_default\/section.html<\/code> appears to contains the\nArchives page template. But how does that relate to the <a href=\"https:\/\/troz.net\/post\/\">https:\/\/troz.net\/post\/<\/a>\nlink? And the Tags template is in <code>layouts\/_default\/terms.html<\/code> but appears in\n<a href=\"https:\/\/troz.net\/tags\/\">https:\/\/troz.net\/tags\/<\/a>. Checking the Hugo documentation for creating a theme, I\nfind the information I need. Hugo has a selection of file paths that it checks\nfor such templates, and these file paths match some of those. So now I know\nwhere to go to customise further.<\/p>\n<p>One feature that I really like about the Even theme is the ability to have a\ntable of contents displayed beside each blog post if your page is wide enough.\nIt takes the headers in the post and uses them to make the table. I may need to\nadd or edit the headers in some posts, but I really like this feature.<\/p>\n<p>And if you want a laugh, test out the 404 page - here is a <a href=\"https:\/\/troz.net\/bad-link\/\" title=\"404\">bad link<\/a> - which\ngenerates a random text emoji each time!<\/p>\n<hr>\n<h2 id=\"publishing\">Publishing<\/h2>\n<p>I wanted to use my existing GitHub Pages setup, so I replaced the site files in\nmy local repository with the new Hugo site files. I generated the static site\nfiles using <code>hugo<\/code> in Terminal, then pushed the pages to GitHub. All I had to do\nthen was change the settings so that GitHub Pages knew my site was coming from\nthe <code>docs<\/code> folder and I was live with the new site.<\/p>\n<hr>\n<h2 id=\"final-thoughts\">Final Thoughts<\/h2>\n<p>So how am I going with my check list?<\/p>\n<ul>\n<li>Responsive - ALMOST, not Hugo&rsquo;s fault<\/li>\n<li>Blog style - YES<\/li>\n<li>Written using Markdown - YES<\/li>\n<li>Static pages for apps listing, about, contact etc. - YES<\/li>\n<li>Syntax highlighting - YES<\/li>\n<li>Social links - YES<\/li>\n<li>Google Analytics - YES<\/li>\n<li>Disqus commenting - YES<\/li>\n<li>Twitter cards - NO<\/li>\n<li>JSON Feed - NO<\/li>\n<li>Searching within the site - NO<\/li>\n<\/ul>\n<p>The Hugo generated pages are all responsive and look great on my iPhone, but my\nold static page for listing my apps does not look good, so I need to re-design\nthat.<\/p>\n<p>Twitter cards - I have found some articles on how to set that up, so it is\npossible, but I haven&rsquo;t done it yet.<\/p>\n<p>JSON Feed is not working. There are themes that apparently have this, but I\nhaven&rsquo;t yet worked out how to implement it - hopefully later.<\/p>\n<p>In-site search - this was something I was able to get in my old WordPress site,\nbut not in Jekyll. There are Hugo themes listed that support search, but they\nseem to just give a link to Google or DuckDuckGo. Maybe this can be edited to\nrestrict it to the site, but I dislike using such searches, so I will not add a\nsearch unless it works internally. One theme I found uses <a href=\"https:\/\/www.algolia.com\" title=\"Algolia\">Algolia<\/a> to search\nthe site, so I will investigate that.<\/p>\n<p>Overall, I am impressed. The transition was relatively easy, especially\nconsidering that I didn&rsquo;t take the time to learn anything about Hugo first, but\njust blundered in and tried to work it out on the fly.<\/p>\n<p>The speed of generating pages and the live reload while developing make Hugo a\npleasure to work with. Now all I have to do is write some interesting posts&hellip;<\/p>\n<p>And I want to tidy up the URLs, headers and tags for the older pages as well as\ninvestigating Twitter cards, search &amp; JSON Feed.<\/p>","url":"https:\/\/troz.net\/post\/2017\/moving-to-hugo\/","date":533634177},{"title":"Marktime","content":"<!-- raw HTML omitted -->\n<p>Mark Time is now available now from the <a href=\"https:\/\/itunes.apple.com\/us\/app\/mark-time\/id1305580742?mt=8\">iTunes App Store<\/a> for iPhone and\niPad as an assistant for celestial navigators.<\/p>\n<p>Mark Time is an application for Celestial Navigation that solves the problem of\nhow to take an accurate time reading to go with each sextant sighting.<\/p>\n<p>By simply tapping the screen you can record the exact time UTC as you take your\nsight, so you have no chance of making an error with the conversion, and this\ntime is stored in one of five registers.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/MarkTime1.png\" alt=\"Mark Time\"><\/p>\n<p>Very useful when you have an assistant, and ideal for taking readings when you\nare on your own.<\/p>\n<p>As you record a time you hear a confirmation sound and feel a vibration, so\nthere is no need even to look at the screen. In addition the actual latitude and\nlongitude at each time can be accessed later to verify your calculations. These\noptions are all configurable in Settings to suit your own preferences.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/MarkTime2.png\" alt=\"Mark Time\"><\/p>\n<p><strong>Location permissions:<\/strong> On startup, the app will request permission to access\nyour location. This is how the latitude and longitude data is gathered to\nprovide this data if you wish.<\/p>\n<p><strong>Support:<\/strong> If you have any questions about this app, please use the Contact\nlink above to get in touch.<\/p>","url":"https:\/\/troz.net\/marktime\/","date":533364533},{"title":"JSON Parsing in Swift 4","content":"<p><strong>Updated:<\/strong> 3rd September 2017.<\/p>\n<ul>\n<li>Checked syntax using Xcode 9.0 beta 6.<\/li>\n<li>Added section on <a href=\"#nulls\">allowing for nulls<\/a>.<\/li>\n<\/ul>\n<hr>\n<p>Since <strong>JSON<\/strong> has become the de facto standard for data transfers around the\ninternet, there has always been a lot of interest in Swift libraries to parse\nJSON into Swift classes or structs. Searching for &ldquo;swift json library&rdquo; on\n<a href=\"https:\/\/github.com\/search?q=swift+json+library\">GitHub<\/a> discovers <!-- raw HTML omitted -->77<!-- raw HTML omitted --> 86 repositories. So why are there so many? And\nwhat has Swift 4 done to <em>sherlock<\/em> them all?<\/p>\n<p>The problem has always been converting loosely typed JSON to strictly typed\nSwift which involves a lot of type casting, checking, optionals etc. Swift has\nalways provided access to the Objective-C methods for converting JSON to and\nfrom NSData, NSDictionary and NSArray. (These are now called Data, Dictionary\nand Array, but those labels are so universal, that I sometimes feel a more\nspecific nomenclature would be useful. Have you tried doing a search for\n&lsquo;Data&rsquo;?)<\/p>\n<p>For sample data, I am using <a href=\"https:\/\/jsonplaceholder.typicode.com\/users\">https:\/\/jsonplaceholder.typicode.com\/users<\/a> which\nreturns 10 user objects in this format:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-json\" data-lang=\"json\">{\n  <span style=\"color:#f92672\">&#34;id&#34;<\/span>: <span style=\"color:#ae81ff\">1<\/span>,\n  <span style=\"color:#f92672\">&#34;name&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Leanne Graham&#34;<\/span>,\n  <span style=\"color:#f92672\">&#34;username&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Bret&#34;<\/span>,\n  <span style=\"color:#f92672\">&#34;email&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Sincere@april.biz&#34;<\/span>,\n  <span style=\"color:#f92672\">&#34;address&#34;<\/span>: {\n    <span style=\"color:#f92672\">&#34;street&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Kulas Light&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;suite&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Apt. 556&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;city&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Gwenborough&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;zipcode&#34;<\/span>: <span style=\"color:#e6db74\">&#34;92998-3874&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;geo&#34;<\/span>: {\n      <span style=\"color:#f92672\">&#34;lat&#34;<\/span>: <span style=\"color:#e6db74\">&#34;-37.3159&#34;<\/span>,\n      <span style=\"color:#f92672\">&#34;lng&#34;<\/span>: <span style=\"color:#e6db74\">&#34;81.1496&#34;<\/span>\n    }\n  },\n  <span style=\"color:#f92672\">&#34;phone&#34;<\/span>: <span style=\"color:#e6db74\">&#34;1-770-736-8031 x56442&#34;<\/span>,\n  <span style=\"color:#f92672\">&#34;website&#34;<\/span>: <span style=\"color:#e6db74\">&#34;hildegard.org&#34;<\/span>,\n  <span style=\"color:#f92672\">&#34;company&#34;<\/span>: {\n    <span style=\"color:#f92672\">&#34;name&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Romaguera-Crona&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;catchPhrase&#34;<\/span>: <span style=\"color:#e6db74\">&#34;Multi-layered client-server neural-net&#34;<\/span>,\n    <span style=\"color:#f92672\">&#34;bs&#34;<\/span>: <span style=\"color:#e6db74\">&#34;harness real-time e-markets&#34;<\/span>\n  }\n}\n<\/code><\/pre><\/div><p>The goal will be to convert this to an instance of this matching Swift struct:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">User<\/span> {\n    <span style=\"color:#66d9ef\">let<\/span> id: Int\n    <span style=\"color:#66d9ef\">let<\/span> name: String\n    <span style=\"color:#66d9ef\">let<\/span> username: String\n    <span style=\"color:#66d9ef\">let<\/span> email: String\n    <span style=\"color:#66d9ef\">let<\/span> phone: String\n    <span style=\"color:#66d9ef\">let<\/span> website: String\n    <span style=\"color:#66d9ef\">let<\/span> address: Address\n    <span style=\"color:#66d9ef\">let<\/span> company: Company\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Address<\/span> {\n        <span style=\"color:#66d9ef\">let<\/span> street: String\n        <span style=\"color:#66d9ef\">let<\/span> suite: String\n        <span style=\"color:#66d9ef\">let<\/span> city: String\n        <span style=\"color:#66d9ef\">let<\/span> zipcode: String\n        <span style=\"color:#66d9ef\">let<\/span> geo: Coordinates\n\n        <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Coordinates<\/span> {\n            <span style=\"color:#66d9ef\">let<\/span> lat: Double\n            <span style=\"color:#66d9ef\">let<\/span> lng: Double\n        }\n    }\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Company<\/span> {\n        <span style=\"color:#66d9ef\">let<\/span> name: String\n        <span style=\"color:#66d9ef\">let<\/span> catchPhrase: String\n        <span style=\"color:#66d9ef\">let<\/span> bs: String\n    }\n}\n<\/code><\/pre><\/div><p>The first thing to note is that the Swift struct (and its embedded structs) use\nmultiple different types: Int, String, Double, Address, Coordinates, Company.\nThe JSON data only has strings and numbers and even then, some of the numbers\nare really strings - look at the lat &amp; lng entries. So converting from JSON to a\nstruct and back again has always been problematic, but let&rsquo;s give it a go using\nbuilt-in Swift 3 processing with no external libraries.<\/p>\n<h2 id=\"decoding-in-swift-3\">Decoding in Swift 3<\/h2>\n<p>You can insert this into a playground or <a href=\"https:\/\/github.com\/trozware\/json\">download my playground<\/a> and check\nout the Swift 3 JSON page:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">Foundation<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> sampleDataAddress = <span style=\"color:#e6db74\">&#34;https:\/\/jsonplaceholder.typicode.com\/users&#34;<\/span>\n<span style=\"color:#66d9ef\">let<\/span> url = URL(string: sampleDataAddress)<span style=\"color:#f92672\">!<\/span>\n<span style=\"color:#66d9ef\">let<\/span> jsonData = <span style=\"color:#66d9ef\">try<\/span>! Data(contentsOf: url)\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">User<\/span> {\n    <span style=\"color:#66d9ef\">let<\/span> id: Int\n    <span style=\"color:#66d9ef\">let<\/span> name: String\n    <span style=\"color:#66d9ef\">let<\/span> username: String\n    <span style=\"color:#66d9ef\">let<\/span> email: String\n    <span style=\"color:#66d9ef\">let<\/span> phone: String\n    <span style=\"color:#66d9ef\">let<\/span> website: String\n    <span style=\"color:#66d9ef\">let<\/span> address: Address\n    <span style=\"color:#66d9ef\">let<\/span> company: Company\n\n    <span style=\"color:#66d9ef\">init<\/span>?(dict: [String: Any]) {\n        <span style=\"color:#66d9ef\">guard<\/span>\n            <span style=\"color:#66d9ef\">let<\/span> id = dict[<span style=\"color:#e6db74\">&#34;id&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? Int,\n            <span style=\"color:#66d9ef\">let<\/span> name = dict[<span style=\"color:#e6db74\">&#34;name&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n            <span style=\"color:#66d9ef\">let<\/span> username = dict[<span style=\"color:#e6db74\">&#34;username&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n            <span style=\"color:#66d9ef\">let<\/span> email = dict[<span style=\"color:#e6db74\">&#34;email&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n            <span style=\"color:#66d9ef\">let<\/span> phone = dict[<span style=\"color:#e6db74\">&#34;phone&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n            <span style=\"color:#66d9ef\">let<\/span> website = dict[<span style=\"color:#e6db74\">&#34;website&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n            <span style=\"color:#66d9ef\">let<\/span> addressDict = dict[<span style=\"color:#e6db74\">&#34;address&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? [String: Any],\n            <span style=\"color:#66d9ef\">let<\/span> address = Address(dict: addressDict),\n            <span style=\"color:#66d9ef\">let<\/span> companyDict = dict[<span style=\"color:#e6db74\">&#34;company&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? [String: Any],\n            <span style=\"color:#66d9ef\">let<\/span> company = Company(dict: companyDict)\n            <span style=\"color:#66d9ef\">else<\/span> {\n                <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">nil<\/span>\n        }\n\n        <span style=\"color:#66d9ef\">self<\/span>.id = id\n        <span style=\"color:#66d9ef\">self<\/span>.name = name\n        <span style=\"color:#66d9ef\">self<\/span>.username = username\n        <span style=\"color:#66d9ef\">self<\/span>.email = email\n        <span style=\"color:#66d9ef\">self<\/span>.phone = phone\n        <span style=\"color:#66d9ef\">self<\/span>.website = website\n        <span style=\"color:#66d9ef\">self<\/span>.address = address\n        <span style=\"color:#66d9ef\">self<\/span>.company = company\n    }\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Address<\/span> {\n        <span style=\"color:#66d9ef\">let<\/span> street: String\n        <span style=\"color:#66d9ef\">let<\/span> suite: String\n        <span style=\"color:#66d9ef\">let<\/span> city: String\n        <span style=\"color:#66d9ef\">let<\/span> zipcode: String\n        <span style=\"color:#66d9ef\">let<\/span> geo: Coordinates\n\n        <span style=\"color:#66d9ef\">init<\/span>?(dict: [String: Any]) {\n            <span style=\"color:#66d9ef\">guard<\/span>\n                <span style=\"color:#66d9ef\">let<\/span> street = dict[<span style=\"color:#e6db74\">&#34;street&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                <span style=\"color:#66d9ef\">let<\/span> suite = dict[<span style=\"color:#e6db74\">&#34;suite&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                <span style=\"color:#66d9ef\">let<\/span> city = dict[<span style=\"color:#e6db74\">&#34;city&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                <span style=\"color:#66d9ef\">let<\/span> zipcode = dict[<span style=\"color:#e6db74\">&#34;zipcode&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                <span style=\"color:#66d9ef\">let<\/span> geoDict = dict[<span style=\"color:#e6db74\">&#34;geo&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? [String: Any],\n                <span style=\"color:#66d9ef\">let<\/span> geo = Coordinates(dict: geoDict) <span style=\"color:#66d9ef\">else<\/span> {\n                    <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">nil<\/span>\n            }\n\n            <span style=\"color:#66d9ef\">self<\/span>.street = street\n            <span style=\"color:#66d9ef\">self<\/span>.suite = suite\n            <span style=\"color:#66d9ef\">self<\/span>.city = city\n            <span style=\"color:#66d9ef\">self<\/span>.zipcode = zipcode\n            <span style=\"color:#66d9ef\">self<\/span>.geo = geo\n        }\n\n        <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Coordinates<\/span> {\n            <span style=\"color:#66d9ef\">let<\/span> lat: Double\n            <span style=\"color:#66d9ef\">let<\/span> lng: Double\n\n            <span style=\"color:#66d9ef\">init<\/span>?(dict: [String: Any]) {\n                <span style=\"color:#66d9ef\">guard<\/span>\n                    <span style=\"color:#66d9ef\">let<\/span> latString = dict[<span style=\"color:#e6db74\">&#34;lat&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                    <span style=\"color:#66d9ef\">let<\/span> lat = Double(latString),\n                    <span style=\"color:#66d9ef\">let<\/span> lngString = dict[<span style=\"color:#e6db74\">&#34;lng&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                    <span style=\"color:#66d9ef\">let<\/span> lng = Double(lngString) <span style=\"color:#66d9ef\">else<\/span> {\n                        <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">nil<\/span>\n                }\n                <span style=\"color:#66d9ef\">self<\/span>.lat = lat\n                <span style=\"color:#66d9ef\">self<\/span>.lng = lng\n            }\n        }\n    }\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Company<\/span> {\n        <span style=\"color:#66d9ef\">let<\/span> name: String\n        <span style=\"color:#66d9ef\">let<\/span> catchPhrase: String\n        <span style=\"color:#66d9ef\">let<\/span> bs: String\n\n        <span style=\"color:#66d9ef\">init<\/span>?(dict: [String: Any]) {\n            <span style=\"color:#66d9ef\">guard<\/span>\n                <span style=\"color:#66d9ef\">let<\/span> name = dict[<span style=\"color:#e6db74\">&#34;name&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                <span style=\"color:#66d9ef\">let<\/span> catchPhrase = dict[<span style=\"color:#e6db74\">&#34;catchPhrase&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String,\n                <span style=\"color:#66d9ef\">let<\/span> bs = dict[<span style=\"color:#e6db74\">&#34;bs&#34;<\/span>] <span style=\"color:#66d9ef\">as<\/span>? String <span style=\"color:#66d9ef\">else<\/span> {\n                    <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">nil<\/span>\n            }\n\n            <span style=\"color:#66d9ef\">self<\/span>.name = name\n            <span style=\"color:#66d9ef\">self<\/span>.catchPhrase = catchPhrase\n            <span style=\"color:#66d9ef\">self<\/span>.bs = bs\n        }\n    }\n}\n\n<span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> json = <span style=\"color:#66d9ef\">try<\/span>? JSONSerialization.jsonObject(with: jsonData, options: []) {\n    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> jsonArray = json <span style=\"color:#66d9ef\">as<\/span>? [[String: Any]] {\n        <span style=\"color:#66d9ef\">let<\/span> users = jsonArray.flatMap {\n            User(dict: $0)\n        }\n        users.count\n        dump(users.first)\n    }\n}\n<\/code><\/pre><\/div><p>I don&rsquo;t actually expect you to go through all this code in detail, but I\nincluded it here to make it obvious how verbose this method is.<\/p>\n<p>The first 3 lines get the data, and I have force-unwrapped the URL and the Data\nwhich I would not do in a production app but which is OK while testing in a\nplayground. Then there is a declaration of the Users struct with all its sub\nstructs. Each one has a failable init that tries to parse the JSON dictionary\nand returns nil if the data doesn&rsquo;t match, by way of a lengthy set of guard\nstatements. The basic layout of each struct is the same but it is very verbose.\nAnd as an extra step, the lat and lng properties need to be converted from\nStrings to Doubles.<\/p>\n<p>I have to confess that it took quite come time to get this right &hellip; lots of\nguard statements to check that the data can be converted to the required types\nwhich meant that any typos produced an empty array. The sub-structs have to be\nextracted from the JSON as Dictionaries and then initialised by themselves.<\/p>\n<h2 id=\"decoding-in-swift-4\">Decoding in Swift 4<\/h2>\n<p>So this works, and I get an array of Users objects. But it isn&rsquo;t pretty and it\ntakes a lot of code to do the processing. So now I am going to move on to doing\nthis in Swift 4. I am using Xcode 9.0 beta 6 (9M214v) so if you have a later\nversion, you may need to adapt to any changes.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">User<\/span>: Codable {\n    <span style=\"color:#66d9ef\">let<\/span> id: Int\n    <span style=\"color:#66d9ef\">let<\/span> name: String\n    <span style=\"color:#66d9ef\">let<\/span> username: String\n    <span style=\"color:#66d9ef\">let<\/span> email: String\n    <span style=\"color:#66d9ef\">let<\/span> phone: String\n    <span style=\"color:#66d9ef\">let<\/span> website: String\n    <span style=\"color:#66d9ef\">let<\/span> address: Address\n    <span style=\"color:#66d9ef\">let<\/span> company: Company\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Address<\/span>: Codable {\n        <span style=\"color:#66d9ef\">let<\/span> street: String\n        <span style=\"color:#66d9ef\">let<\/span> suite: String\n        <span style=\"color:#66d9ef\">let<\/span> city: String\n        <span style=\"color:#66d9ef\">let<\/span> zipcode: String\n        <span style=\"color:#66d9ef\">let<\/span> geo: Coordinates\n\n        <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Coordinates<\/span>: Codable {\n            <span style=\"color:#66d9ef\">let<\/span> lat: String\n            <span style=\"color:#66d9ef\">let<\/span> lng: String\n        }\n    }\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Company<\/span>: Codable {\n        <span style=\"color:#66d9ef\">let<\/span> name: String\n        <span style=\"color:#66d9ef\">let<\/span> catchPhrase: String\n        <span style=\"color:#66d9ef\">let<\/span> bs: String\n    }\n}\n\n<span style=\"color:#66d9ef\">let<\/span> jsonDecoder = JSONDecoder()\n<span style=\"color:#66d9ef\">let<\/span> users = <span style=\"color:#66d9ef\">try<\/span>? jsonDecoder.decode(Array&lt;User&gt;.<span style=\"color:#66d9ef\">self<\/span>,\n                                    from: jsonData)\n<\/code><\/pre><\/div><p>Ignoring the complexities of converting latitude and longitude to Doubles, I get\nvastly simpler code. I declare all the structs as conforming to the <code>Codable<\/code>\nprotocol and then I can remove all the init methods and just let <code>JSONDecoder<\/code>\ndo its magic. I just have to tell it what data type to expect - in this case an\nArray of Users. I don&rsquo;t have to worry about the initial conversion of the JSON\ndata to a Dictionary or looping through the elements using flatMap.<\/p>\n<p><em>In the playground, I used a do&hellip;catch structure to check the result of the\ndecode function, but I have used try? here to keep the code short.<\/em><\/p>\n<h2 id=\"changing-data-types\">Changing data types<\/h2>\n<p>The lat &amp; lng coordinates are stored in the JSON as Strings, but need to be\nconverted to Doubles for the Swift struct.<\/p>\n<p>This requires a custom init method for the Coordinates struct to do the\nconversion from String to Double.<\/p>\n<p>So here is the complete code for Swift 4 - again, if you don&rsquo;t want to create\nyour own playground, you can <a href=\"https:\/\/github.com\/trozware\/json\">use mine<\/a>, this time looking at the Swift 4\nJSON page:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">Foundation<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> sampleDataAddress = <span style=\"color:#e6db74\">&#34;https:\/\/jsonplaceholder.typicode.com\/users&#34;<\/span>\n<span style=\"color:#66d9ef\">let<\/span> url = URL(string: sampleDataAddress)<span style=\"color:#f92672\">!<\/span>\n<span style=\"color:#66d9ef\">let<\/span> jsonData = <span style=\"color:#66d9ef\">try<\/span>! Data(contentsOf: url)\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">User<\/span>: Codable {\n    <span style=\"color:#66d9ef\">let<\/span> id: Int\n    <span style=\"color:#66d9ef\">let<\/span> name: String\n    <span style=\"color:#66d9ef\">let<\/span> username: String\n    <span style=\"color:#66d9ef\">let<\/span> email: String\n    <span style=\"color:#66d9ef\">let<\/span> phone: String\n    <span style=\"color:#66d9ef\">let<\/span> website: String\n    <span style=\"color:#66d9ef\">let<\/span> address: Address\n    <span style=\"color:#66d9ef\">let<\/span> company: Company\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Address<\/span>: Codable {\n        <span style=\"color:#66d9ef\">let<\/span> street: String\n        <span style=\"color:#66d9ef\">let<\/span> suite: String\n        <span style=\"color:#66d9ef\">let<\/span> city: String\n        <span style=\"color:#66d9ef\">let<\/span> zipcode: String\n        <span style=\"color:#66d9ef\">let<\/span> geo: Coordinates\n\n        <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Coordinates<\/span>: Codable {\n            <span style=\"color:#66d9ef\">let<\/span> lat: Double\n            <span style=\"color:#66d9ef\">let<\/span> lng: Double\n\n            <span style=\"color:#66d9ef\">init<\/span>(from decoder: Decoder) <span style=\"color:#66d9ef\">throws<\/span> {\n                <span style=\"color:#66d9ef\">let<\/span> values = <span style=\"color:#66d9ef\">try<\/span> decoder.container(keyedBy: CodingKeys.<span style=\"color:#66d9ef\">self<\/span>)\n                <span style=\"color:#66d9ef\">let<\/span> latString = <span style=\"color:#66d9ef\">try<\/span> values.decode(String.<span style=\"color:#66d9ef\">self<\/span>, forKey: .lat)\n                <span style=\"color:#66d9ef\">let<\/span> lngString = <span style=\"color:#66d9ef\">try<\/span> values.decode(String.<span style=\"color:#66d9ef\">self<\/span>, forKey: .lng)\n                lat = Double(latString) ?? <span style=\"color:#ae81ff\">0<\/span>\n                lng = Double(lngString) ?? <span style=\"color:#ae81ff\">0<\/span>\n            }\n        }\n    }\n\n    <span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Company<\/span>: Codable {\n        <span style=\"color:#66d9ef\">let<\/span> name: String\n        <span style=\"color:#66d9ef\">let<\/span> catchPhrase: String\n        <span style=\"color:#66d9ef\">let<\/span> bs: String\n    }\n}\n\n<span style=\"color:#66d9ef\">let<\/span> jsonDecoder = JSONDecoder()\n<span style=\"color:#66d9ef\">let<\/span> users = <span style=\"color:#66d9ef\">try<\/span>? jsonDecoder.decode(Array&lt;User&gt;.<span style=\"color:#66d9ef\">self<\/span>, from: jsonData)\n\nusers?.count\ndump(users?.first)\n<\/code><\/pre><\/div><p>For comparative purposes, I counted the lines of code in each, removing the\ncommon boiler plate of the top of each and the two lines for displaying the\nresults in the playground. I also removed the blank lines which I always use a\nlot in my code for readability but which are not relevant when comparing code\nefficiency:<\/p>\n<table>\n<thead>\n<tr>\n<th>Version<\/th>\n<th align=\"right\">Lines<\/th>\n<th align=\"right\">Lines if lat &amp; lng are Strings<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>Swift 3<\/td>\n<td align=\"right\">95<\/td>\n<td align=\"right\">93<\/td>\n<\/tr>\n<tr>\n<td>Swift 4<\/td>\n<td align=\"right\">35<\/td>\n<td align=\"right\">28<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<h2 id=\"encoding\">Encoding<\/h2>\n<p>Encoding back to JSON is very similar. In the Swift 3 version, I would have\nwritten a method for each struct that created a Dictionary and then used\nJSONSerialization to convert the Dictionary back to JSON. This is very verbose\nand tedious to write so I am not going to bother to demonstrate it here.<\/p>\n<p>But in Swift 4, this is even easier than decoding. Add this code to the end of\nyour Swift 4 JSON playground or playground page:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> users = users {\n    <span style=\"color:#66d9ef\">let<\/span> jsonEncoder = JSONEncoder()\n    jsonEncoder.outputFormatting = .prettyPrinted\n\n    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> backToJson = <span style=\"color:#66d9ef\">try<\/span>? jsonEncoder.encode(users) {\n        <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> jsonString = String(data: backToJson, encoding: .utf8) {\n            print(jsonString)\n        }\n    }\n}\n<\/code><\/pre><\/div><p>The <code>JSONEncoder<\/code> returns Data and I have converted that to a String for\nchecking. I set JSONEncoder&rsquo;s outputFormatting property to .prettyPrinted get a\nmore readable String.<\/p>\n<p>Notice how the encoded data is not quite the same as I received because the lat\n&amp; lng properties are now Doubles. In a production app, if I needed to be able to\nconvert back to JSON, I probably would have left them as Strings so as to enable\ndata transfer in both directions. I would add computed properties to the struct\nto convert these Strings to Doubles as I needed them.<\/p>\n<h2 id=\"advanced-decoding\">Advanced Decoding<\/h2>\n<p>Now that we have the basics, I want to look at three more features: changing\nproperty names, date handling and allowing for nulls.<\/p>\n<h2 id=\"changing-property-names\">Changing Property Names<\/h2>\n<p>In these examples I used exactly the same names for the properties as were used\nin the JSON. In the Swift 3 version, it would have been easy to change the\nproperty names, since the data for each property was being extracted manually.\nIn Swift 4, if you want the decoder to change names, you have to tell it what\nyou want.<\/p>\n<p>Make a new playground or playground page and replace the contents with this - or\ngo to the Swift 4 Extras page on <a href=\"https:\/\/github.com\/trozware\/json\">my playground<\/a>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">Foundation<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> jsonString = <span style=\"color:#e6db74\">&#34;&#34;&#34;\n<\/span><span style=\"color:#e6db74\">{\n<\/span><span style=\"color:#e6db74\">&#34;<\/span>name1<span style=\"color:#e6db74\">&#34;: &#34;<\/span>Jane<span style=\"color:#e6db74\">&#34;,\n<\/span><span style=\"color:#e6db74\">&#34;<\/span>name2<span style=\"color:#e6db74\">&#34;: &#34;<\/span>Smith<span style=\"color:#e6db74\">&#34;\n<\/span><span style=\"color:#e6db74\">}\n<\/span><span style=\"color:#e6db74\">&#34;&#34;&#34;<\/span>\n<span style=\"color:#66d9ef\">let<\/span> jsonData = jsonString.data(using: .utf8)<span style=\"color:#f92672\">!<\/span>\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Person<\/span>: Codable {\n    <span style=\"color:#66d9ef\">let<\/span> firstName: String\n    <span style=\"color:#66d9ef\">let<\/span> lastName: String\n}\n\n<span style=\"color:#66d9ef\">let<\/span> jsonDecoder = JSONDecoder()\n<span style=\"color:#66d9ef\">let<\/span> person = <span style=\"color:#66d9ef\">try<\/span>? jsonDecoder.decode(Person.<span style=\"color:#66d9ef\">self<\/span>, from: jsonData)\ndump(person)\n<\/code><\/pre><\/div><p>This uses the new multi-line literals in Swift 4 to assemble the JSON string\nwhich is amazingly useful as it allows quotes to be embedded in the string\nwithout having to escape them. As you can see, the JSON property names are not\nvery helpful, so I want to change them in my Person struct. At the moment,\n<code>person<\/code> is nil because I have not given the decoder any clues to help it\ntranslate the names. To do that, I have to add a CodingKeys enum to the Person\nstruct and it tells the decoder what names in the JSON match up to what\nproperties in the struct.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Person<\/span>: Codable {\n    <span style=\"color:#66d9ef\">let<\/span> firstName: String\n    <span style=\"color:#66d9ef\">let<\/span> lastName: String\n\n    <span style=\"color:#66d9ef\">enum<\/span> <span style=\"color:#a6e22e\">CodingKeys<\/span>: String, CodingKey {\n        <span style=\"color:#66d9ef\">case<\/span> firstName = <span style=\"color:#e6db74\">&#34;name1&#34;<\/span>\n        <span style=\"color:#66d9ef\">case<\/span> lastName = <span style=\"color:#e6db74\">&#34;name2&#34;<\/span>\n    }\n}\n<\/code><\/pre><\/div><p>And that&rsquo;s all I have to do. Now the JSON is correctly converted to a Person. As\nan exercise, use JSONEncoder to get back to JSON from the Person. You will see\nthat the JSON correctly names the elements using &ldquo;name1&rdquo; and &ldquo;name2&rdquo;.<\/p>\n<h2 id=\"date-handling\">Date Handling<\/h2>\n<p>Next let&rsquo;s look at dates - add this code to the playground:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> jsonString2 = <span style=\"color:#e6db74\">&#34;&#34;&#34;\n<\/span><span style=\"color:#e6db74\">{\n<\/span><span style=\"color:#e6db74\">&#34;<\/span>name<span style=\"color:#e6db74\">&#34;: &#34;<\/span>My New Project<span style=\"color:#e6db74\">&#34;,\n<\/span><span style=\"color:#e6db74\">&#34;<\/span>created<span style=\"color:#e6db74\">&#34;: &#34;<\/span><span style=\"color:#ae81ff\">2017<\/span><span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">06<\/span><span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">18<\/span>T06:<span style=\"color:#ae81ff\">28<\/span>:<span style=\"color:#ae81ff\">25<\/span>Z<span style=\"color:#e6db74\">&#34;\n<\/span><span style=\"color:#e6db74\">}\n<\/span><span style=\"color:#e6db74\">&#34;&#34;&#34;<\/span>\n<span style=\"color:#66d9ef\">let<\/span> jsonData2 = jsonString2.data(using: .utf8)<span style=\"color:#f92672\">!<\/span>\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Project<\/span>: Codable {\n    <span style=\"color:#66d9ef\">let<\/span> name: String\n    <span style=\"color:#66d9ef\">let<\/span> created: Date\n}\n\n<span style=\"color:#66d9ef\">let<\/span> jsonDecoder2 = JSONDecoder()\n<span style=\"color:#66d9ef\">let<\/span> project = <span style=\"color:#66d9ef\">try<\/span>? jsonDecoder2.decode(Project.<span style=\"color:#66d9ef\">self<\/span>, from: jsonData2)\n\ndump(project)\n<\/code><\/pre><\/div><p>When this runs, <code>project<\/code> is nil because the decoder has no idea how to get from\nthe String &ldquo;2017-06-18T06:28:25Z&rdquo; to a Date object. Add this line after creating\n<code>jsonDecoder2<\/code>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">jsonDecoder2.dateDecodingStrategy = .iso8601\n<\/code><\/pre><\/div><p>Now the date can be converted and an instance of the Project struct will be\ncreated.<\/p>\n<p>And to get back to the JSON, converting the Date back to ISO8601 format:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> jsonEncoder = JSONEncoder()\njsonEncoder.dateEncodingStrategy = .iso8601\n\n<span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> backToJson = <span style=\"color:#66d9ef\">try<\/span>? jsonEncoder.encode(project) {\n    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> jsonString = String(data: backToJson, encoding: .utf8) {\n        print(jsonString)\n    }\n}\n<\/code><\/pre><\/div><p><!-- raw HTML omitted --><!-- raw HTML omitted --><\/p>\n<h2 id=\"allowing-for-nulls\">Allowing For Nulls<\/h2>\n<p>JSON data will often include <strong>null<\/strong> where there is no value for a particular\nproperty name. When using JSONDecoder or JSONEncoder, this can be allowed for by\nusing Optionals. If you are not clear about Optionals, have a look at my\nprevious article: <a href=\"https:\/\/troz.net\/post\/2016-02-12-learning-swift-optionals\/\">Learning Swift - Optionals<\/a>.<\/p>\n<p>The crucial step is to declare the properties of the Swift object as optionals\nif you think they could get a null value.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Role<\/span>: Codable {\n    <span style=\"color:#66d9ef\">let<\/span> firstName: String\n    <span style=\"color:#66d9ef\">let<\/span> lastName: String\n    <span style=\"color:#66d9ef\">let<\/span> nickName: String?\n}\n\n<span style=\"color:#66d9ef\">let<\/span> jsonStringWithNulls = <span style=\"color:#e6db74\">&#34;&#34;&#34;\n<\/span><span style=\"color:#e6db74\">[\n<\/span><span style=\"color:#e6db74\">    {\n<\/span><span style=\"color:#e6db74\">        &#34;<\/span>firstName<span style=\"color:#e6db74\">&#34;: &#34;<\/span>Sally<span style=\"color:#e6db74\">&#34;,\n<\/span><span style=\"color:#e6db74\">        &#34;<\/span>lastName<span style=\"color:#e6db74\">&#34;: &#34;<\/span>Sparrow<span style=\"color:#e6db74\">&#34;,\n<\/span><span style=\"color:#e6db74\">        &#34;<\/span>nickName<span style=\"color:#e6db74\">&#34;: null\n<\/span><span style=\"color:#e6db74\">    },\n<\/span><span style=\"color:#e6db74\">    {\n<\/span><span style=\"color:#e6db74\">        &#34;<\/span>firstName<span style=\"color:#e6db74\">&#34;: &#34;<\/span>Doctor<span style=\"color:#e6db74\">&#34;,\n<\/span><span style=\"color:#e6db74\">        &#34;<\/span>lastName<span style=\"color:#e6db74\">&#34;: &#34;<\/span>Who<span style=\"color:#e6db74\">&#34;,\n<\/span><span style=\"color:#e6db74\">        &#34;<\/span>nickName<span style=\"color:#e6db74\">&#34;: &#34;<\/span>The Doctor<span style=\"color:#e6db74\">&#34;\n<\/span><span style=\"color:#e6db74\">    }\n<\/span><span style=\"color:#e6db74\">]\n<\/span><span style=\"color:#e6db74\">&#34;&#34;&#34;<\/span>\n<span style=\"color:#66d9ef\">let<\/span> jsonDataWithNulls = jsonStringWithNulls.data(using: .utf8)<span style=\"color:#f92672\">!<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> jsonDecoder3 = JSONDecoder()\n<span style=\"color:#66d9ef\">let<\/span> roles = <span style=\"color:#66d9ef\">try<\/span>? jsonDecoder3.decode(Array&lt;Role&gt;.<span style=\"color:#66d9ef\">self<\/span>, from: jsonDataWithNulls)\ndump(roles)\n<\/code><\/pre><\/div><p>In this example (which you can find in the Swift 4 Extras page on <a href=\"https:\/\/github.com\/trozware\/json\">my\nplayground<\/a>), I have declared a struct called Role with 3 String properties.\nThe 3rd String - nickName - is an Optional so it may be a String or it may be\nnil.<\/p>\n<p>The JSON contains 2 elements - one has a nickName value and the other has it as\nnull. Because the matching property in the Swift struct is an optional, this\nworks as expected and the nickName property for Sally Sparrow is decoded as nil.\nIf you remove the question mark to make nickName non-optional, the decoding will\nfail.<\/p>\n<p>Going back to JSON from a Swift object with optionals works much the same except\nthat it does not specifically mark items as null, it just leaves them out.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> jsonEncoder2 = JSONEncoder()\njsonEncoder2.outputFormatting = .prettyPrinted\n\n<span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> backToJsonWithNulls = <span style=\"color:#66d9ef\">try<\/span>? jsonEncoder2.encode(roles) {\n    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> jsonString = String(data: backToJsonWithNulls, encoding: .utf8) {\n        print(jsonString)\n    }\n}\n<\/code><\/pre><\/div><h2 id=\"property-lists\">Property Lists<\/h2>\n<p>As well as JSONDecoder and JSONEncoder, Swift 4 has introduced\nPropertyListDecoder and PropertyListEncoder, so let&rsquo;s take a quick look at that.<\/p>\n<p>Add this to the bottom of the last playground as it uses the Project struct and\ndata:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> plistEncoder = PropertyListEncoder()\nplistEncoder.outputFormat = .xml\n<span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> plist = <span style=\"color:#66d9ef\">try<\/span>? plistEncoder.encode(project) {\n    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> plistString = String(data: plist, encoding: .utf8) {\n        print(plistString)\n    }\n\n    <span style=\"color:#66d9ef\">let<\/span> plistDecoder = PropertyListDecoder()\n    <span style=\"color:#66d9ef\">let<\/span> project2 = <span style=\"color:#66d9ef\">try<\/span>? plistDecoder.decode(Project.<span style=\"color:#66d9ef\">self<\/span>, from: plist)\n\n    dump(project2)\n}\n<\/code><\/pre><\/div><p>I don&rsquo;t see this is being quite as useful as the JSON Encoding &amp; Decoding, but I\nmention it here for completeness.<\/p>\n<h2 id=\"codable\">Codable<\/h2>\n<p>In all the Swift 4 examples above, I set the structs to conform to <code>Codable<\/code>.\nReading Apple&rsquo;s docs, I see that <code>Codable<\/code> is actually a typealias referring to\n2 separate protocols:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-Swift\" data-lang=\"Swift\"><span style=\"color:#66d9ef\">typealias<\/span> Codable = Decodable <span style=\"color:#f92672\">&amp;<\/span> Encodable\n<\/code><\/pre><\/div><p>If you only need to convert data one way, it will be more efficient to set your\nstruct or class as confirming to only one of these protocols. For example, if\nyou download JSON data from an API but never need to send it back, just conform\nto Decodable to transform the JSON data into your data structure.<\/p>\n<p>Much more information can be found in the <a href=\"https:\/\/developer.apple.com\/documentation\/swift\/encoding_decoding_and_serialization\">Apple documentation<\/a>.<\/p>","url":"https:\/\/troz.net\/post\/2017\/json-parsing-in-swift-4\/","date":519436800},{"title":"Posting from my new iPad","content":"<p>Last week I got a 10.5” iPad Pro. I have had an iPad ever since the original\nrelease, but I have to confess to mainly using it for content consumption rather\nthan creation. Since I am usually close to a Mac anyway, there didn’t seem a lot\nof point. But now that iOS 11 is really addressing the issue of making the iPad\na &ldquo;pro&rdquo; device, I decided to give it a try.<\/p>\n<p>So here I am, sitting in an armchair with my iPad on my lap, writing this post\nand working out the details as I go. Any typos are due to the cat trying to\ncompete with the iPad for space on my lap!<\/p>\n<h2 id=\"ipad\">iPad<\/h2>\n<p>As already mentioned, I have a new iPad Pro. I also have an Apple Pencil which I\nuse for taking notes. I do not have a keyboard, so I am using the on-screen\nkeyboard right now.<\/p>\n<p>I don’t usually install beta versions of operating systems, but iOS 11 is a huge\npart of making the iPad more professional, so I have installed it. As you would\nexpect, there are a few issues (apps quitting, layout issues especially when\nrotating) but so far I am loving it.<\/p>\n<h2 id=\"writing\">Writing<\/h2>\n<p>My site is published on <a href=\"https:\/\/pages.github.com\/\">GitHub Pages<\/a> using <a href=\"http:\/\/jekyllrb.com\/\">Jekyll<\/a> with all the posts\nand pages written in Markdown. One key feature is that every post or page\nrequires a chunk of &ldquo;front matter&rdquo; that must be formatted correctly for the\nJekyll parser to interpret it and create the static content. After a bit of\nresearch, it looked like <a href=\"http:\/\/omz-software.com\/editorial\/\">Editorial<\/a> was going to be the best option for an\neditor app. I moved my site files to Dropbox, linked my Dropbox account to\nEditorial and I was ready to start writing.<\/p>\n<p>I didn’t want to create the front matter manually for each post. On my Mac I\nhave a text expander snippet that handles that but copying from <a href=\"http:\/\/mattgemmell.com\/using-the-ipad-for-blogging-with-jekyll\/\">Matt Gemell’s\npost<\/a> on the topic, I created an Editorial workflow to create a new post. As\na side-note, Matt has a series of posts on using an iPad which I have found very\nuseful and inspirational.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Workflow.jpeg\" alt=\"Editorial workflow\"><\/p>\n<p>Text entry and editing is a task that I have always felt was too difficult in\niOS, particularly when it came to selecting text and moving the cursor. However\nthere are now several improvements. As with iOS 10, a two-fingered press on the\nkeyboard transforms it into a trackpad for moving the cursor. If you already\nhave text selected, this moves the selection handles. The new iOS 11 keyboard\nhas a really nice feature for entering non-alphabetic characters. The keys now\nshow a small grey character above the main character. Drag down on the key to\nmove the small character into the main key and type it. For example, drag down\non the h key to type (.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/keyboard-drag.png\" alt=\"Keyboard drag\"><\/p>\n<p>Editorial has its own editing helpers. There is an additional toolbar above the\nkeyboard with a tab key as well as frequently used Markdown modifiers. And\nswiping across this toolbar moves the cursor. This is a much slower move than\nwhen using the keyboard as a trackpad so might be better for more precise\nmovements.<\/p>\n<h3 id=\"adding-links\">Adding Links:<\/h3>\n<p>I have referenced a few sites now, so I guess it is time to work out how to link\nto them. I always use Markdown’s referenced link method, with the links\ncollected at the foot of the document, so that is what I plan to do here. To set\ntext as a link, I selected it and used the Editorial toolbar to type an opening\nsquare bracket which surrounded the selection in square brackets. Then I moved\nthe cursor to after the closing bracket and typed another opening square\nbracket. This auto-closed and I was able to type a number which will be the\nreference.<\/p>\n<p>Next step is to find the relevant URLs - drag &amp; drop with multi-tasking to the\nrescue! Swipe up from the bottom of the screen to see the new Dock. This also\nmakes the keyboard disappear. Hold down on the Safari icon until you grab it,\nthen drag it up into the Editorial window. Now it is open as an overlay.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/safari-overlay.png\" alt=\"Safari as overlay\"><\/p>\n<p>At this point, I have several options:<\/p>\n<ul>\n<li>Swiping from the left or right of the overlay window lets me position it to\nthe right or left of the screen, still as an overlay.<\/li>\n<li>Dragging from the bar at the top of the overlap allows me to convert to split\nscreen mode, and I can then drag the divider to adjust the ratios.<\/li>\n<li>Swiping all the way to the right disappears the overlay, but swiping back from\nthe right edge returns it. Since I want to copy and paste some links, this\nlooks like the best option right now.<\/li>\n<\/ul>\n<p>This swiping conflicts slightly with Editorial&rsquo;s swiping from the side to see a\npreview. Swipe from off the edge for the overlap and from well inside the edge\nfor preview.<\/p>\n<p>And here my plans come crashing down. I can drag from Safari&rsquo;s address bar into\nthe Editorial document, but the drop doesn’t take. I guess I need an update to\nEditorial for this to work. But I can still use the old style copy and paste to\nget the links.<\/p>\n<h3 id=\"images\">Images<\/h3>\n<p>So now I have my links, but I want to insert a few images. I used iOS 11’s new\nscreen shot abilities. Press the usual home button &amp; power button combination to\ntake a screen shot and it appears as a small picture in the bottom left of the\nscreen. Tap it to start editing: markup, crop etc. Then I used the sharing\nbutton to save the picture to Dropbox, putting it inside the images folder in my\nweb site folder.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/screenshot.jpeg\" alt=\"Editing a screenshot\"><\/p>\n<p>I want to insert an image link but I have just worked out that I saved this\nMarkdown file in the root folder instead of the _posts folder. I can’t see a way\nto move it from inside Editorial, so I will swap to the Dropbox app to move the\nfile - be right back&hellip; (I see now how I could have done this in Editorial.)<\/p>\n<p>Ok, this file is in the right place and the images are in the right folder, so\nhow to add an image link? Checking back at previous posts, I see that the format\nI use for inserting an image is: <code>![Alt text][#]<\/code> and the reference at the foot\nof the page is like<code>[#]: \/images\/image_name.jpg<\/code> but I don’t want to have to\nremember that every time, so I think it is time for some snippets. Tapping the\nlightning icon on the Editorial keyboard lets me edit and create snippets, so I\nhave made one for the image link and one for the image reference. Time to scroll\nback up the page and try them out.<\/p>\n<p>I opened the Dropbox app in an overlay so that I could find the file names for\nthe images I just saved, then I created the links. The images don’t appear in\nthe preview but that is expected because Jekyll has not parsed the addresses.\nLooking at the information about the images in Dropbox, I see that they are far\ntoo big. I need a way to resize them. The screen shot editor doesn’t have a way\nto resize apart from cropping, at least not in this beta.<\/p>\n<p><a href=\"https:\/\/workflow.is\/\">Workflow<\/a> is another Pro level app that I have never really used, but it\nseems that it might do the job. I tried a few workflows to edit the size of an\nimage from a Dropbox file and save it back, but they although they appeared to\ncomplete, the image file remained the same size. So then I went to the Workflow\nGallery and found a workflow called Quick Resize Screenshot. When editing a\nscreen shot, I can use the sharing button to run the workflow and then I can\nsave the smaller images to Dropbox for use in the page. For the large images\nthat I have already saved, I will resize them on my Mac before publishing.<\/p>\n<h2 id=\"publishing\">Publishing<\/h2>\n<p>This brings me to the final step - publishing the changes to GitHub Pages.\nJekyll is a system that creates static web pages from the Markdown and other\nfiles. on my Mac, I run the <code>jekyll build<\/code> command in Terminal and the pages are\ncreated or re-generated as required. Then I use <code>git<\/code> to commit my changes and\npush them to GitHub which serves them.<\/p>\n<p>There appear to be Editorial workflows written in Python that use the GitHub\nAPIs to upload files, but this wouldn’t work well for me. Because of the\nstructure of my site, many different pages need to be re-generated when I\npublish a new post, so I will keep the publishing phase on my Mac. However there\nis no need to make it any more difficult than necessary, so I have written a\nshell script to do the work.<\/p>\n<p>The script takes an optional commit message parameter, builds the site, commits\nchanges and pushes then to GitHub. I have only tested this when no files had\nchanged, so this post will be the first real test. Shell scripting is outside my\ncomfort zone, so we will have to see how that works.<\/p>\n<h2 id=\"summary\">Summary<\/h2>\n<p>So now I have a workflow on my iPad that uses Editorial, Dropbox and Workflow.\nThis allows me to do 100% of the writing task. Then I have a single shell script\non my Mac that does the publishing part. I can edit and create posts anywhere. I\ncan easily use split screen or screen overlays to add links. iOS 11 makes\ncreating and annotating screen shots very easy.<\/p>\n<p>I am hoping for an update to Editorial that will allow it to accept drag &amp; drop.\nThe ability to resize screen shots before saving them would also be really\nuseful.<\/p>\n<p>Sometimes my posts are more code-based and need access to Xcode and in those\ncases, I will stick to my Mac, especially considering Xcode’s new ability to\nconnect directly to GitHub which will make it great for publishing Swift\nplaygrounds. But for more narrative-style posts like this one, I will use my\niPad and see how I can improve my workflow and expand my tool set.<\/p>\n<p>It feels good to be using the iPad as a content creation device at last.<\/p>\n<h2 id=\"extra-notes-from-a-mac\">Extra Notes from a Mac:<\/h2>\n<p>Since this was my first time writing a blog post using an iPad and this\nworkflow, I decided that I should test the results before publishing, so I\nswitched back to the Mac and in Terminal, ran <code>jekyll serve<\/code> so that I could see\nthe results. There were a few issues mainly to do with the formatting of the\nfront matter. The three dashes at the top &amp; bottom of the front matter had\nbecome munged into an emdash plus a dash, so that didn’t work. Jekyll is also\nfussy about the spaces in the tag &amp; summary lines and it doesn&rsquo;t handle\nnon-alphanumerics in the summary text.<\/p>\n<p>I also used the Mac to shrink some of the images that I had saved before working\nout how to reduce the size of screen shots.<\/p>\n<p>So I need to check the structure of the front matter workflow before next time,\nbut this post is ready to go with only minor editing on the Mac side. Now to\ntest my shell script&hellip;<\/p>\n","url":"https:\/\/troz.net\/post\/2017\/posting-from-my-new-ipad\/","date":519350400},{"title":"JSON Feed for TrozWare","content":"<p><a href=\"https:\/\/jsonfeed.org\/2017\/05\/17\/announcing_json_feed\">jsonfeed.org<\/a> has announced a new format for web site feeds, designed as an\nalternative to RSS. TrozWare has had an XML RSS feed for years, but I don&rsquo;t\nthink anyone ever uses it (I certainly don&rsquo;t), so today I have replaced it with\na JSON feed, which you can access through the\n<!-- raw HTML omitted --><!-- raw HTML omitted --> button at the top of every page.<\/p>\n<p>I am sure many JSON Feed viewers will appear soon, but the only one I know about\nso far is at <a href=\"http:\/\/json-feed-viewer.herokuapp.com\">http:\/\/json-feed-viewer.herokuapp.com<\/a>. As soon as this update\nto my site goes live, I will apply to have TrozWare added to the list of sites\non this page. Meanwhile, you can paste in the URL: <code>https:\/\/troz.net\/feed.json<\/code>.<\/p>\n<p>This site is constructed using Jekyll, so I am very grateful to Niclas Darville\nfor his very easy to follow <a href=\"https:\/\/ndarville.com\/blog\/2017\/05\/19\/json-feed-for-jekyll\/\">guide<\/a>. However it is still well worth reading\nthrough the <a href=\"https:\/\/jsonfeed.org\/version\/1\">official specs<\/a> to see what else you want to add, or if you want\nto remove anything. I had to tweak a few settings to make it work for my\nconfiguration, and I added some more objects, but Niclas got me off to a flying\nstart.<\/p>\n<p>Two things to watch out for:<\/p>\n<ol>\n<li>Make sure your feed is producing valid JSON (I had an extra comma that was\nbreaking it&hellip;).<\/li>\n<li>As third-party apps &amp; sites may be displaying your content, you need to make\nsure that you are not using relative URLs for images and internal links. I\nwas using relative image URLs like <code>\/images\/WorkHelp1.png<\/code> but that showed a\nbroken link in the feed viewer, so I have changed all such links to\n<code>\/images\/WorkHelp1.png<\/code>. Hopefully that will work correctly on my local test\nserver as well as when published. <!-- raw HTML omitted --><!-- raw HTML omitted --><\/li>\n<\/ol>\n<p><img src=\"https:\/\/jsonfeed.org\/graphics\/icon.png\" alt=\"JSON Feed icon\"><\/p>\n<p>JSON Feed offers a nice icon which I would have liked to use, but I could not\nwork out a way to make it play nicely with the existing icons on my pages which\nall use <a href=\"http:\/\/fontawesome.io\">Font Awesome<\/a> icons. So I ended up just using the existing Feed\nicon. Hopefully Font Awesome will soon add a JSON Feed icon to their already\nimpressive list.<\/p>\n<p>If anyone still wants to use the <a href=\"https:\/\/troz.net\/index.xml\">RSS feed<\/a>, it is no longer linked to the\nbuttons at the top of the pages, but you can access it manually.<\/p>","url":"https:\/\/troz.net\/post\/2017\/json-feed-for-trozware\/","date":516931200},{"title":"Blackmail Marketing","content":"<p>I use my iPad to play games as a form of relaxation. Nearly all the games I play\nare puzzle apps with levels that can be played in a few minutes. Nearly all of\nthem are free to install. So how do they make money?<\/p>\n<p>Now I would be the last person you should consult about marketing but it has\nalways seemed to me that the best way to market your product is to convince\npeople that it offers something they want so that they are prepared to pay for\nit.<\/p>\n<p>This is not the currently favored approach for mobile apps - at least certainly\nnot for games. No, the theory at the moment is to cause so much frustration and\nannoyance that people give you money to make it stop. Blackmail marketing.<\/p>\n<p>A frequently used method is showing ads, sometimes just banner ads but more\noften full screen video ads that run for up to 30 seconds. If you interrupt the\nad, you don&rsquo;t get the reward.<\/p>\n<ul>\n<li>Every goal reached triggers an ad.<\/li>\n<li>Quitting and resuming the app triggers an ad.<\/li>\n<li>Wanting to play another level triggers an ad.<\/li>\n<\/ul>\n<p>The theory is that you get so annoyed with this that you pay money to disable\nthe ads.<\/p>\n<p>The other common tactic is the delay. A tower defence game needs you to build a\ntower? OK, that will take 12 hours real time and you can&rsquo;t proceed until it&rsquo;s\nfinished. Or you can spend 12 gems which are sold as an in-app purchase. Maybe\nyou can only play 3 levels and then you need to recharge: again, pay up or wait.\nYou keep dying on that level? You&rsquo;re out of lives. Pay up or wait until\ntomorrow. These delays are completely artificial. They have nothing to do with\ngame play but are solely designed to infuriate you enough to get you to pay.<\/p>\n<p>So when, and perhaps more importantly why, did mobile app marketing become so\nnegative? What happened to making your customers happy? Do unhappy customers\nspend more?<\/p>\n<p>Financially, it appears that irritating your users is a successful strategy.\nNearly all the top grossing games in the App Store are &ldquo;free to play&rdquo; in that\nthe initial download costs nothing. But these big studios are raking in enormous\nsums of money, so many people are persuaded to spend significant money by these\ninfuriating schemes.<\/p>\n<p>A large part of this must be due to the various App Stores driving prices to the\nbottom. Gone are the days when the price of a mobile app was other than risible.\nSo app developers have four choices:<\/p>\n<ol>\n<li>Do it as a hobby or learning exercise.<\/li>\n<li>Distribute apps as a form of self–promotion for other work.<\/li>\n<li>Work for someone who pays you a real wage to develop apps.<\/li>\n<li>Join the blackmailers.<\/li>\n<\/ol>\n<p>So how does this relate to indy developers like me? I care about my users and\nwant them to be happy.<\/p>\n<p>I have tried several different approaches to app distribution:<\/p>\n<ul>\n<li>\n<p>Totally free gets by far the most downloads but is economically ridiculous\nunless the app adds value to your business in some other way.<\/p>\n<\/li>\n<li>\n<p>A tip jar gets you nothing.<\/p>\n<\/li>\n<li>\n<p>In-app purchases (in my limited experience) make less than selling the app\nup-front for a small price.<\/p>\n<\/li>\n<li>\n<p>Banner ads with no method of forcing people to watch them generate almost no\nrevenue.<\/p>\n<\/li>\n<\/ul>\n<p>So that leaves me with where I am today - selling apps for a few dollars and\nnothing more. Happily, I have found that Mac users are more prepared to pay a\nfew dollars for an app, so I have shut down many of my iOS apps and am\nconcentrating on the Mac app market.<\/p>\n<p>Am I letting my principles stand in the way of mobile app profits? Should I just\njoin the gang and start blackmailing my customers? If so, what form should this\ntake?<\/p>\n<p>At the moment, I am considering banner ads on the screen with an in-app purchase\nto disable them entirely. I read a suggestion for a less invasive method of\ndoing this by creating your own ads for your other apps. This might be what I\nend up doing.<\/p>\n<p>I would welcome any suggestions, advice or comments. Please join the discussion\nbelow or contact me using one of the links at the top of the page.<\/p>\n","url":"https:\/\/troz.net\/post\/2017\/blackmail-marketing\/","date":510624000},{"title":"NCSS 2017","content":"<p>I gave a Masterclass on Swift at the NCSS Summer School 2017 in Sydney on 8th\nJanuary 2017. This post contains useful links for use during and after my class.<\/p>\n<ul>\n<li><a href=\"https:\/\/swiftlang.ng.bluemix.net\/#\/repl\">IBM Swift Sandbox<\/a><\/li>\n<\/ul>\n<hr>\n<h2 id=\"sandbox-code-samples\">Sandbox Code Samples<\/h2>\n<ul>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/58670662da20a814737c3562\">Strings<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/5868463fb5619f13e0a940af\">Optionals<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/5868954cb5619f13e0a940bd\">Functions<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/5866f31fda20a814737c353b\">Closures<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/5866f48bda20a814737c353c\">Objects<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/5866ed80da20a814737c3538\">Protocols<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"http:\/\/swiftlang.ng.bluemix.net\/#\/repl\/5866fc4dda20a814737c3557\">Generics<\/a><\/p>\n<\/li>\n<\/ul>\n<hr>\n<h2 id=\"contact-details\">Contact Details:<\/h2>\n<ul>\n<li>\n<p>Email: <a href=\"mailto:sarah@troz.net?subject=NCSS%202017\">sarah@troz.net<\/a><\/p>\n<\/li>\n<li>\n<p>Twitter: <a href=\"https:\/\/twitter.com\/trozware\">@trozware<\/a><\/p>\n<\/li>\n<li>\n<p>Slides:\n<a href=\"https:\/\/www.dropbox.com\/s\/09r19my3d6jk5jt\/NCSS%202017%20Swift%20MC.pdf?dl=0\">NCSS 2017 Swift MC.pdf<\/a><\/p>\n<\/li>\n<\/ul>\n<hr>\n<h2 id=\"useful-links\">Useful Links:<\/h2>\n<ul>\n<li>\n<p><a href=\"https:\/\/itunes.apple.com\/au\/book\/swift-programming-language\/id881256329?mt=11\">The Swift Programming Language<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/swift.org\">Swift.org<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.raywenderlich.com\/132258\/top-5-ios-swift-newsletters\">Newsletters<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.raywenderlich.com\">Tutorials<\/a><\/p>\n<\/li>\n<\/ul>","url":"https:\/\/troz.net\/ncss2017\/","date":505353600},{"title":"Looking for beta testers","content":"<p>I am looking for beta testers for my latest Mac app: <strong><a href=\"https:\/\/troz.net\/work\/\">Work<\/a><\/strong>.<\/p>\n<p><strong>Work<\/strong> is a project organizer app for developers, designers, students or any\nprofessional who works with multiple projects involving files &amp; folders, web\npages, email addresses and lists of tasks. Click the link above for more\ninformation and help for getting started.<\/p>\n<p><strong>Work<\/strong> requires macOS 10.12 or OS X 10.11.<\/p>\n<hr>\n<p>If you would like to test this app, please <a href=\"mailto:work@troz.net?subject=Work%20beta%20test\">contact me<\/a>, giving details of\nyour Mac and operating system. The easiest way to do this is to select <strong>About\nThis Mac<\/strong> in the Apple menu and send me a screen shot of the window that\nappears.<\/p>\n<p>All beta testers will receive a free license to Work when it is released. If you\nreport a legitimate bug or provide valuable feed-back, you will also receive a\nfree license to your choice of one of my <a href=\"https:\/\/troz.net\/apps\/\">other apps<\/a>.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/looking-for-beta-testers\/","date":501033600},{"title":"Work","content":"<p><strong>Work<\/strong> is a project organizer app for developers, designers, students or any\nprofessional who works with multiple projects involving files &amp; folders, web\npages, email addresses and lists of tasks.<\/p>\n<p><strong>Work<\/strong> requires macOS 10.12 or OS X 10.11 and will be available from the Mac\nApp Store soon.<\/p>\n<hr>\n<p>We all know what it is like to be in the middle of a project or rushing to\ncomplete an assignment&hellip;<\/p>\n<p>We have files scattered all over the place, email addresses of team members or\nclients, web pages with specifications or useful information, tasks scribbled on\nsticky notes or scraps of paper.<\/p>\n<p>Wouldn&rsquo;t it be better if there was one place where you could have quick and easy\naccess to all these items, but without having to change the way you work? With\nthe <strong>Work<\/strong> app, you can regain control - the app helps you get to what you\nwant so you save time.<\/p>\n<hr>\n<p>Here is the project document you will see when you select <strong>Work Help<\/strong> from the\n<strong>Help<\/strong> menu:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WorkHelp1.png\" alt=\"Work\"><\/p>\n<p>It gathers together some useful links to information about <strong>Work<\/strong> and my other\napps or to allow you to contact me. In <strong>Work<\/strong> documents for my apps, I\nassemble the project files I need to open, images, web page addresses etc. My\nmost frequently used links are starred so I can focus on them whenever I want a\nshorter list.<\/p>\n<p>Drag files or folders into the window to link them to your <strong>Work<\/strong> document.\nCopy a web address or email address and use <strong>Add Web\/Email<\/strong> to quickly create\na new link entry with the copied address.<\/p>\n<p>Switching to <strong>Tasks<\/strong> mode allows you to focus on your tasks list. Tasks can be\ngrouped, re-ordered and marked as complete. Use the <strong>View<\/strong> menu to hide\ncompleted tasks if you want a more compact list. Use the <strong>Edit<\/strong> menu or the\ntoolbar buttons to edit groups - this allows you to create your own custom\ngroupings.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WorkHelp2.png\" alt=\"Work - Tasks\"><\/p>\n<hr>\n<p><strong>Work<\/strong> doesn&rsquo;t move or rename any of your files - it merely links all these\nthings together for fast, convenient and searchable access. It even tracks files\nor folders if you move them later.<\/p>\n<p>Make a <strong>Work<\/strong> document for every project, drag in the relevant files or\nfolders, add web page addresses and email addresses, make your own task lists.<\/p>\n<p>Create groups to gather items together, adjust the display to view only the\nentries you want, use quick look to get a fast glimpse of files or web pages.<\/p>\n<p>Work also supports the Touch Bar on the new MacBook Pros:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Work_TB.png\" alt=\"Work - TouchBar\"><\/p>\n<hr>\n<p>Select <strong>Work Help<\/strong> from the <strong>Help<\/strong> menu to see the special <strong>Work<\/strong> document\npictured above. Use the links to keep in touch and step through the sequence of\ntasks to learn the basics of using the app.<\/p>\n","url":"https:\/\/troz.net\/work\/","date":500947200},{"title":"Another Man Reader Update...","content":"<p>A quick update to <a href=\"https:\/\/troz.net\/manreader\/\">Man Reader<\/a> to version 1.8 is now available through the\n<a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Mac App Store<\/a>.<\/p>\n<p>The main reason for this version was that Man Reader was not previously\ndetecting man pages installed by third-party IDEs in the Applications folder.\nThere was also an issue with Man Reader failing to display the text of the\npreviously selected man page on app launch.<\/p>\n<ul>\n<li>More complete search for man pages, including in third-party IDEs.<\/li>\n<li>Fix for glitch when displaying previously selected page on launch.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2016\/another-man-reader-update\/","date":499996800},{"title":"Man Reader Update","content":"<p><a href=\"https:\/\/troz.net\/manreader\/\">Man Reader<\/a> has just been updated to version 1.7 and is available through\nthe <a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Mac App Store<\/a>.<\/p>\n<p>The main reason for this update was to make the app work well with macOS Sierra,\nas I found that version 1.6 was sometimes crashing on launch. While doing this,\nthe update was rejected by the App Store reviewers because it crashed on OS X\n10.10. Since I no longer have a Mac running 10.10, I decided to set the minimum\nsupported system version to OS X 10.11. If you need support for older versions,\nyou should still be able to download version 1.6 which will work back to 10.7.<\/p>\n<p>I also took the opportunity to fix some graphical issues, dealing with different\ncolor schemes:<\/p>\n<ul>\n<li>The man page list now shows alternating colors even when not using the default\nscheme.<\/li>\n<li>When scrolling the man pages past the top or the bottom with a non-white\nbackground, you should no longer see white blocks top &amp; bottom.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2016\/man-reader-update\/","date":497923200},{"title":"Podcasting","content":"<p>I have recently started what I hope will be a weekly podcast with my friend and\ncolleague, <a href=\"https:\/\/twitter.com\/jerrydaniels\">Jerry Daniels<\/a>. Each podcast will be about 30 minutes in length.<\/p>\n<p>We will discuss Macs, iPhones, iPads, macOS, iOS, programming and anything\ntech-related that we find interesting. I hope you will find it entertaining and\ninformative, so please join us.<\/p>\n<p>We are using <a href=\"https:\/\/zcast.co\/zcasts\">ZCast<\/a> which has an iPhone app that makes it super easy to get\ntogether and record our chats. It doesn&rsquo;t allow any post-processing, but really\nlowers the barrier to entry into the world of podcasting.<\/p>\n<p>If you get the <a href=\"https:\/\/itunes.apple.com\/app\/zcast-podcast-from-your-phone!\/id1041586670\">ZCast app for iPhone<\/a>, go to the ZCasters tab and search for\n&ldquo;Trozware&rdquo; or &ldquo;Jerry Daniels&rdquo; to find all our podcasts. Or use these links to\nlisten in your browser.<\/p>\n<ul>\n<li><a href=\"https:\/\/zcast.co\/j\/ZyB8yK4z86\">The new macOS<\/a><\/li>\n<li><a href=\"https:\/\/zcast.co\/j\/ewQe6x6E4d\">Hands-on with iPhone 7<\/a><\/li>\n<li><a href=\"https:\/\/zcast.co\/j\/A9zvLAAEa3\">Hands on iOS 10<\/a><\/li>\n<\/ul>\n<p>Since the first one was recorded using my name instead of my <a href=\"https:\/\/twitter.com\/trozware\">@trozware<\/a>\nTwitter account, I will embed it here as it will not show up if you search for\n&ldquo;Trozware&rdquo;.<\/p>\n<!-- raw HTML omitted -->\n","url":"https:\/\/troz.net\/post\/2016\/podcasting\/","date":497836800},{"title":"Dice Pass Updated","content":"<p><a href=\"https:\/\/troz.net\/dicepass\/\">Dice Pass 1.1<\/a> is now available from the <a href=\"https:\/\/itunes.apple.com\/app\/dice-pass\/id997688302\">Mac App Store<\/a>.<\/p>\n<h2 id=\"what-does-dice-pass-do\">What does Dice Pass do?<\/h2>\n<p>Dice Pass is a utility to app to generate random passphrases based on the\n<a href=\"http:\/\/world.std.com\/~reinhold\/diceware.html\">Diceware<\/a> system. Diceware uses a table of pre-defined words, each assigned\na 5 digit code number containing the digits 1 to 6. The official way to generate\na phrase is to roll 5 dice for each word you want in your passphrase and then\nconsult the words table to find the matching word.<\/p>\n<p>The resulting phrase uses real words or common abbreviations so it is easier to\nremember than a random collection of characters. At the same time, the random\nselection of words makes the generated passphrase much more secure as it avoids\nthe human tendency to pick words with personal meaning.<\/p>\n<p>Dice Pass allows you to select the number of words in your passphrase,\nre-generate the entire passphrase any time, re-roll a single word in your\npassphrase or set the dice rolls manually for maximum security and randomness.<\/p>\n<h2 id=\"whats-new-in-version-11\">What&rsquo;s New in Version 1.1:<\/h2>\n<p>You can now select from three word lists in the Word Lists menu:<\/p>\n<ul>\n<li>original Diceware list<\/li>\n<li>Beale list (fewer Americanisms and obscure words)<\/li>\n<li>Diceware 8k list (a list of words that is a whole power of two in length)<\/li>\n<\/ul>\n<p>You can also import your own word list if you prefer.<\/p>\n<p>Dice Pass 1.1 is compatible with macOS Sierra.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/dice-pass-updated\/","date":495763200},{"title":"How much work does Icon Builder save you?","content":"<p><a href=\"https:\/\/troz.net\/icon-builder\/\">Icon Builder<\/a> is a Mac app that takes a single image file and creates all\nthe different image sizes that you need to make a set of icons for your app:\nMac, iPhone, iPad, iOS Universal or Apple Watch.<\/p>\n<p>Version 4, released 16 September 2016 is available through the <a href=\"https:\/\/itunes.apple.com\/app\/icon-builder\/id552293482\">Mac App\nStore<\/a>.<\/p>\n<h2 id=\"whats-new-in-version-4\">What&rsquo;s New in Version 4:<\/h2>\n<ul>\n<li>Added support for iMessage apps and Sticker Pack apps.<\/li>\n<li>Added support for creating Mac .icns files.<\/li>\n<li>Better removal of alpha channel for Apple Watch icons.<\/li>\n<li>Clearer usage instructions in ReadMe files.<\/li>\n<li>iTunes Artwork folders will no longer be over-written with the latest image\nfiles.<\/li>\n<li>Supports macOS Sierra and Xcode 8<\/li>\n<\/ul>\n<p><img src=\"https:\/\/troz.net\/images\/IconBuilder.png\" alt=\"Icon Builder\"><\/p>\n<p>While working on version 4 and accommodating all these new icon sets (and\nwishing I had the time to re-write the app in Swift&hellip;), I counted up all the\nicon files that Icon Builder makes for each app type:<\/p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">App Type<\/th>\n<th align=\"right\">Number of Icons<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td align=\"left\">Mac<\/td>\n<td align=\"right\">10<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iPhone<\/td>\n<td align=\"right\">8<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iPhone supporting pre iOS 7<\/td>\n<td align=\"right\">11<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iPad<\/td>\n<td align=\"right\">9<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iPad supporting pre iOS 7<\/td>\n<td align=\"right\">13<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iOS Universal<\/td>\n<td align=\"right\">14<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iOS Universal supporting pre iOS 7<\/td>\n<td align=\"right\">20<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">Apple Watch (also requires iOS app icons)<\/td>\n<td align=\"right\">8<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">Sticker Pack app<\/td>\n<td align=\"right\">11<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iMessages app<\/td>\n<td align=\"right\">14<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">iMessages app Messages extension<\/td>\n<td align=\"right\">9<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>So as you can see, Icon Builder is doing a lot of work for you. It also names\nall the icon files using the expected format, stores them in an concept folder,\ncreates the JSON file that identifies them all to Xcode and optionally installs\nthem in your Xcode project automatically. That’s a lot of value for dragging in\nan icon and clicking a button!<\/p>\n<p>So next time your designer sends you the twentieth tweaked icon for the day,\ndon&rsquo;t get mad. Just drop it into Icon Builder and sit back while it does all the\nwork. (No need to tell the designer that&hellip;)<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/how-much-work-does-icon-builder-save-you\/","date":495763200},{"title":"Retiring old apps","content":"<p>With the release of iOS 10 and the need to update iOS apps to suit, I have\ndecided it is time to retire some of my lesser-performing apps as it is not\nworth the effort required to maintain them.<\/p>\n<p>At the moment, the following iOS apps are no longer available:<\/p>\n<ul>\n<li>A Knight&rsquo;s Move<\/li>\n<li>Dice Pass<\/li>\n<li>Pic-a-POD<\/li>\n<li>Quick Score - Tennis<\/li>\n<\/ul>\n<p>For the first three listed there, the Mac versions are still available:<\/p>\n<ul>\n<li><a href=\"https:\/\/itunes.apple.com\/app\/a-knights-move\/id533321133\">A Knight&rsquo;s Move for Mac<\/a><\/li>\n<li><a href=\"https:\/\/itunes.apple.com\/app\/dice-pass\/id997688302\">Dice Pass for Mac<\/a><\/li>\n<li><a href=\"https:\/\/itunes.apple.com\/app\/pic-a-pod\/id477909802\">Pic-a-POD for Mac<\/a><\/li>\n<\/ul>\n<p>If you bought any of these apps and would like a promo code for the Mac version,\nsend me a screen shot of the app running on your iPhone or iPad and I will send\nyou a code.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/retiring-old-apps\/","date":495590400},{"title":"Man Reader updated to 1.6","content":"<p>Man Reader has been updated to version 1.6 with the permissions needed for\nfinding all available man pages and a fix for search terms being over-written\nafter a background update.<\/p>\n<p><a href=\"https:\/\/troz.net\/manreader\/\">Man Reader 1.6<\/a> is now available through the <a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Mac App Store<\/a>.<\/p>\n<h3 id=\"change-log\">Change Log:<\/h3>\n<ul>\n<li>Permissions fix when searching for available man pages.<\/li>\n<li>Fixed error with new search term being over-written.<\/li>\n<li>Sand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.<\/li>\n<\/ul>\n<p>This version fixes a problem with sand-boxing permissions potentially not\nallowing access to all the installed man pages on your system. This should now\nbe fixed but if you discover any man pages that are available through Terminal\nbut not through Man Read, please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20not%20detecting%20some%20man%20pages\">email me the details<\/a> and help me make Man\nReader better.<\/p>\n<p>There was also an issue with a previous search being restored after a background\nupdate, even if a new search term had been entered. This has been fixed.<\/p>\n<p>If you previously had downloaded the Man Reader (no SB) version of the app from\nthis site, please revert to the App Store version which you would have needed to\nhave bought in order to use the downloaded app. If you bought the app from\nPaddle, <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\">contact me<\/a> and I will transfer you to the App Store version.\nNeither of these other versions will be supported or updated any more.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/man-reader-updated-to-1.6\/","date":490320000},{"title":"Dice Pass Mac Update","content":"<p>I recently got an email from someone who had purchased <a href=\"https:\/\/troz.net\/dicepass\/\">Dice Pass<\/a> for Mac\nfrom the <a href=\"https:\/\/itunes.apple.com\/app\/dice-pass\/id997688302\">Mac App Store<\/a> but had been unable to get it to run. This person\nwas using OS X 10.9.3.<\/p>\n<p>I checked the App Store specifications and it showed that 10.9 was the minimum\nsystem requirement, so it should have worked. But going back to my Xcode\nproject, I found that it was set to a minimum of OS X 10.10.<\/p>\n<p>I tried to re-compile for OS X 10.9 but this failed as the app uses several\nfeatures that are not available prior to 10.10.<\/p>\n<p>The minimum system version as displayed in the App Store is supposedly deduced\nautomatically by the App Store servers from the app&rsquo;s binary. Somehow this was\nincorrect in the App Store, so some people may have bought that app and found\nthat it did not work despite them having what was listed as a compatible system.<\/p>\n<p>If you bought Dice Pass for OS X 10.9 and are unable to run it, I have two\npossible solutions for you:<\/p>\n<ol>\n<li>Upgrade your operating system to at least 10.10.<\/li>\n<li>Ask Apple for a refund since it was their error that caused you to buy an app\nthat you cannot run.<\/li>\n<\/ol>\n<p>I have updated the app in the App Store changing nothing but the version number\nand it is now showing the correct minimum system requirement. My apologies if\nyou have been inconvenienced by this error.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/dice-pass-mac-update\/","date":489196800},{"title":"Learning Swift - Sets","content":"<p>Sets are the forgotten collection type in many languages, including Swift. I\nthink most developers use Arrays without really considering the advantages of\nusing a Set but they have some amazingly useful features that should make them a\npart of any progammer&rsquo;s toolkit.<\/p>\n<p>If you want to follow along with a playground, you can download it <a href=\"https:\/\/github.com\/trozware\/sets\">here<\/a>.<\/p>\n<h2 id=\"what-is-a-set\">What is a Set?<\/h2>\n<p><strong>A Set is an un-ordered collection of unique items.<\/strong> That&rsquo;s it - nothing more\nthan that. So it is very similar to an Array, but it is not indexed like an\nArray and it cannot contain more than one of each entry.<\/p>\n<h2 id=\"creating-a-set\">Creating a Set<\/h2>\n<p>Creating a Set is as easy as creating an Array:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">var<\/span> myArray = [<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;hamster&#34;<\/span>, <span style=\"color:#e6db74\">&#34;dog&#34;<\/span>]\n<span style=\"color:#66d9ef\">var<\/span> mySet: Set = [<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;hamster&#34;<\/span>, <span style=\"color:#e6db74\">&#34;dog&#34;<\/span>]\n<\/code><\/pre><\/div><p>If you are running these commands in a playground, notice that the differences\nbetween the 2 results:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">[<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;hamster&#34;<\/span>, <span style=\"color:#e6db74\">&#34;dog&#34;<\/span>]    <span style=\"color:#75715e\">\/\/ myArray<\/span>\n{<span style=\"color:#e6db74\">&#34;hamster&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;dog&#34;<\/span>}           <span style=\"color:#75715e\">\/\/ mySet<\/span>\n<\/code><\/pre><\/div><ol>\n<li>The Array is shown wrapped in square brackets, the Set is shown wrapped in\ncurly braces. This is just a visual clue and doesn&rsquo;t really mean anything.\nYou cannot initialize a set using curly braces.<\/li>\n<li>All the supplied elements of the Array are listed, but the Set has removed\nthe duplicate &ldquo;dog&rdquo; element. This did not cause an error or warning, it just\nhappened quietly.<\/li>\n<\/ol>\n<p>When initializing a Set, you must add <code>: Set<\/code> to distinguish it from an array\ninitialization. In the example above, I did not specify the data type of the\nelements in the Set as the Swift compiler was able to infer this from the\ncontents. But if initializing an empty array, the data type must be specified.\nTo check how to do this, I option-clicked on <code>mySet<\/code> to see what the Swift\ncompiler thought it was.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/set_types.png\" alt=\"Sets\"><\/p>\n<p>So mySet is actually <code>Set&lt;String&gt;<\/code>. This means that to create an empty Set, you\nneed to use something like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">var<\/span> emptySetOfStrings: Set&lt;String&gt; = [] <span style=\"color:#66d9ef\">var<\/span>\nemptySetOfInts: Set&lt;Int&gt; = []\n<\/code><\/pre><\/div><h2 id=\"adding-and-removing-elements\">Adding and removing elements<\/h2>\n<p>If you have been using an Array to store unique values, then you have probably\nwritten code like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#f92672\">!<\/span>myArray.contains(<span style=\"color:#e6db74\">&#34;cat&#34;<\/span>) {\n  myArray.append(<span style=\"color:#e6db74\">&#34;cat&#34;<\/span>)\n}\n<\/code><\/pre><\/div><p>With Sets, you don&rsquo;t have to care. Just use <code>insert()<\/code> and let the Set work out\nwhether to add the item or not.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">mySet.insert(<span style=\"color:#e6db74\">&#34;goldfish&#34;<\/span>)\n<span style=\"color:#75715e\">\/\/ goldfish added: {&#34;hamster&#34;, &#34;cat&#34;, &#34;dog&#34;, &#34;goldfish&#34;}<\/span>\nmySet.insert(<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>)\n<span style=\"color:#75715e\">\/\/ dog already there: {&#34;hamster&#34;, &#34;cat&#34;, &#34;dog&#34;, &#34;goldfish&#34;}<\/span>\n<\/code><\/pre><\/div><p>Removing elements is also easier than in Arrays. For an Array, you first have to\nfind the index of the element and remove it by index:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#75715e\">\/\/ myArray.remove(&#34;hamster&#34;) \/\/ will not compile<\/span>\n<span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> index = myArray.index(of: <span style=\"color:#e6db74\">&#34;hamster&#34;<\/span>) {\n  myArray.remove(at: index)\n}\n<\/code><\/pre><\/div><p>But in a Set, you can remove any element easily and trying to remove an element\nthat doesn&rsquo;t exist will fail without an error.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">mySet.remove(<span style=\"color:#e6db74\">&#34;hamster&#34;<\/span>)   <span style=\"color:#75715e\">\/\/ returns &#34;hamster&#34;<\/span>\nmySet.remove(<span style=\"color:#e6db74\">&#34;canary&#34;<\/span>)    <span style=\"color:#75715e\">\/\/ returns nil<\/span>\n<\/code><\/pre><\/div><h2 id=\"converting-between-sets-and-arrays\">Converting between Sets and Arrays<\/h2>\n<p>Sometimes you need to be able to switch between the two. My most recent example\nwas when I wanted to store data from a Set in a plist. Sets are not property\nlist types but Arrays are, so I converted the Set to an Array before storing it\nin the plist. When reading the data in from the plist, I converted it back to a\nSet.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> myArrayAsSet = Set(myArray)\n<span style=\"color:#66d9ef\">let<\/span> mySetAsArray = Array(mySet)\n<\/code><\/pre><\/div><p>One useful side-effect of these easy conversions is the ability to &lsquo;unique&rsquo; an\nArray in a single line. This may be inefficient for large arrays, but works very\nwell for small ones. Just be careful if the order of the elements is important\nas you cannot guarantee the order of elements in a Set.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> myArrayUniqued = Array(Set(myArray))\n<span style=\"color:#75715e\">\/\/ [&#34;cat&#34;, &#34;dog&#34;]<\/span>\n<\/code><\/pre><\/div><h2 id=\"iterating-over-elements-in-a-set\">Iterating over elements in a Set<\/h2>\n<p>As with an Array, you can use a <code>for element in set<\/code> structure, or you can use\n<code>enumerated()<\/code>. But you cannot subscript a Set.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> animal <span style=\"color:#66d9ef\">in<\/span> mySet {\n  print(animal)\n}\n\n<span style=\"color:#66d9ef\">for<\/span> (index, animal) <span style=\"color:#66d9ef\">in<\/span> mySet.enumerated() {\n  print(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> = <\/span><span style=\"color:#e6db74\">\\(<\/span>animal<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n}\n\n<span style=\"color:#75715e\">\/\/ will not compile<\/span>\n<span style=\"color:#75715e\">\/\/ for index in 0 ..&lt; mySet.count {<\/span>\n<span style=\"color:#75715e\">\/\/   print(&#34;\\(index) = \\(mySet[index])&#34;)<\/span>\n<span style=\"color:#75715e\">\/\/ }<\/span>\n<\/code><\/pre><\/div><hr>\n<h2 id=\"where-sets-get-really-interesting\">Where Sets get really interesting<\/h2>\n<p>Remember in school when you learnt about Venn diagrams with pretty interlocking\ncircles? Sets can do the same things, although you will have to do your own\npretty drawings :-)<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> set1: Set = [<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n<span style=\"color:#66d9ef\">let<\/span> set2: Set = [<span style=\"color:#e6db74\">&#34;cow&#34;<\/span>, <span style=\"color:#e6db74\">&#34;horse&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n\n<span style=\"color:#66d9ef\">let<\/span> intersect = set1.intersection(set2)\n<span style=\"color:#75715e\">\/\/ {&#34;pig&#34;}<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> subtract = set1.subtracting(set2)\n<span style=\"color:#75715e\">\/\/ {&#34;cat&#34;, &#34;dog&#34;}<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> union = set1.union(set2)\n<span style=\"color:#75715e\">\/\/ {&#34;pig&#34;, &#34;cat&#34;, &#34;dog&#34;, &#34;cow&#34; &#34;horse&#34;}<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> xor = set1.symmetricDifference(set2)\n<span style=\"color:#75715e\">\/\/ {&#34;cat&#34;, &#34;dog&#34;, &#34;cow&#34;, &#34;horse&#34;}<\/span>\n<\/code><\/pre><\/div><p>In the code example above, we have two Sets of animals, with one animal in\ncommon.<\/p>\n<ul>\n<li><code>intersection()<\/code> lists the elements in common.<\/li>\n<li><code>subtracting()<\/code> lists the elements in one Set after removing all elements that\nare in the other.<\/li>\n<li><code>union()<\/code> joins all the elements without duplicates.<\/li>\n<li><code>symmetricDifference()<\/code> lists the elements that are in one or other of the\nSets but not in both. (Swift 3 renamed this function from <code>exclusiveOr()<\/code>)<\/li>\n<\/ul>\n<p>Here is my best attempt at a pretty drawing to show how these go together:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/sets_1.png\" alt=\"Sets\"><\/p>\n<hr>\n<p>The next fun trick is working out sub-sets, super-sets and disjoint sets.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> set1: Set = [<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n<span style=\"color:#66d9ef\">let<\/span> set2: Set = [<span style=\"color:#e6db74\">&#34;cow&#34;<\/span>, <span style=\"color:#e6db74\">&#34;horse&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n\n<span style=\"color:#66d9ef\">let<\/span> smallSet: Set = [<span style=\"color:#e6db74\">&#34;pig&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cow&#34;<\/span>]\n\nsmallSet.isSubset(of: set1)   <span style=\"color:#75715e\">\/\/ false<\/span>\nsmallSet.isSubset(of: set2)   <span style=\"color:#75715e\">\/\/ true<\/span>\n<\/code><\/pre><\/div><p><code>smallSet<\/code> is <strong>not<\/strong> a subset of <code>set1<\/code> because it contains an element that is\nnot in <code>set1<\/code>. <code>smallSet<\/code> <strong>is<\/strong> a subset of <code>set2<\/code> because every element in\n<code>smallSet<\/code> is also in <code>set2<\/code>.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/sets_2.png\" alt=\"Sets\"><\/p>\n<p>If you want to get technical, a Set should not be considered a subset of an\nidentical Set. The default <code>isSubset(of:)<\/code> allows this, but you can use\n<code>isStrictSubset(of:)<\/code> if you prefer.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">set1.isSubset(of: set1)         <span style=\"color:#75715e\">\/\/ true<\/span>\nset1.isStrictSubset(of: set1)   <span style=\"color:#75715e\">\/\/ false<\/span>\n<\/code><\/pre><\/div><p>Superset works just the same but in reverse so the diagram above explains it\ntoo:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> set1: Set = [<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n<span style=\"color:#66d9ef\">let<\/span> set2: Set = [<span style=\"color:#e6db74\">&#34;cow&#34;<\/span>, <span style=\"color:#e6db74\">&#34;horse&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n\n<span style=\"color:#66d9ef\">let<\/span> smallSet: Set = [<span style=\"color:#e6db74\">&#34;pig&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cow&#34;<\/span>]\n\nset1.isSuperset(of: smallSet)       <span style=\"color:#75715e\">\/\/ false<\/span>\nset2.isSuperset(of: smallSet)       <span style=\"color:#75715e\">\/\/ true<\/span>\n\nset1.isSuperset(of: set1)           <span style=\"color:#75715e\">\/\/ true<\/span>\nset1.isStrictSuperset(of: set1)     <span style=\"color:#75715e\">\/\/ false<\/span>\n<\/code><\/pre><\/div><p><code>set1<\/code> is <strong>not<\/strong> a superset of <code>smallSet<\/code> because it does not contain every\nelement in <code>smallSet<\/code>. <code>set2<\/code> <strong>is<\/strong> a superset of <code>smallSet<\/code> because every\nelement in <code>smallSet<\/code> is also in <code>set2<\/code>.<\/p>\n<p>The <code>isSuperset(of:)<\/code> and <code>isStrictSuperset(of:)<\/code> functions allow or reject\nidentical sets.<\/p>\n<p>The final comparison tool that might be useful is <code>isDisjoint(with:)<\/code> which\nreturns true only if the two Sets have no elements in common i.e. if there is no\noverlap in the circles.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> set1: Set = [<span style=\"color:#e6db74\">&#34;dog&#34;<\/span>, <span style=\"color:#e6db74\">&#34;cat&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n<span style=\"color:#66d9ef\">let<\/span> set2: Set = [<span style=\"color:#e6db74\">&#34;cow&#34;<\/span>, <span style=\"color:#e6db74\">&#34;horse&#34;<\/span>, <span style=\"color:#e6db74\">&#34;pig&#34;<\/span>]\n\n<span style=\"color:#66d9ef\">let<\/span> otherSet: Set = [<span style=\"color:#e6db74\">&#34;duck&#34;<\/span>, <span style=\"color:#e6db74\">&#34;chicken&#34;<\/span>]\n\nset1.isDisjoint(with: set2)       <span style=\"color:#75715e\">\/\/ false<\/span>\nset1.isDisjoint(with: otherSet)   <span style=\"color:#75715e\">\/\/ true<\/span>\n<\/code><\/pre><\/div><p>&ldquo;pig&rdquo; occurs in both <code>set1<\/code> and <code>set2<\/code> so they are <strong>not<\/strong> disjoint. <code>otherSet<\/code>\nand <code>set1<\/code> have no matching entries so they <strong>are<\/strong> disjoint.<\/p>\n<hr>\n<h2 id=\"when-should-you-use-a-set\">When should you use a Set?<\/h2>\n<ol>\n<li>If you want the elements to be unique.<\/li>\n<li>If you want easy methods of comparing the contents of different collections.<\/li>\n<li>If you want to be able to remove elements easily.<\/li>\n<\/ol>\n<h2 id=\"when-should-you-not-use-a-set\">When should you not use a Set?<\/h2>\n<ol>\n<li>If you need the collection to be able to hold multiples of an element.<\/li>\n<li>If the order of the collection is important.<\/li>\n<\/ol>\n<hr>\n<p>For more details on Sets, check out <a href=\"http:\/\/swiftdoc.org\/v2.2\/type\/Set\/\">SwiftDoc.org<\/a>.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/learning-swift-sets\/","date":486086400},{"title":"19th Hole Golf Scorer 3.1","content":"<p>One of the problems with using 19th Hole on the Apple Watch is making the app\nshow every time you raise your wrist. My solution to this was to go into\nSettings (either on my iPhone through the Watch app, or directly on the watch)\nand change it to &ldquo;Resume Last Activity&rdquo; on wrist raise. This worked fine but as\nI usually prefer the watch face to show on wrist raise, I had to keep setting\nand re-setting this which was a pain.<\/p>\n<p>But last week I noticed the fine print when changing this setting. In this\nscreen shot from the Watch app on my iPhone, you can see that &ldquo;session-based\napps&rdquo; and &ldquo;some third-party workout apps&rdquo; will over-ride the &ldquo;Show Watch Face&rdquo;\nsetting.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WakeScreen.jpg\" alt=\"Wrist raise settings\"><\/p>\n<p>I started to research this and found that if an app starts a &ldquo;workout session&rdquo;,\nthen it will become the active app until the session is ended or some other app\nstarts a session. So I got to work and added a workout session to the 19th\nHole&rsquo;s Apple Watch app.<\/p>\n<p>When you start scoring a round on the Apple Watch, you will see this dialog\nasking if you would like to start a workout:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Watch-workout.png\" alt=\"Start workout dialog\"><\/p>\n<p>The workout will be stopped automatically when you have scored the last hole.\nYou can also use a force-press on the scoring screen to turn the workout off or\non at any time.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Watch_end_workout.png\" alt=\"Stop workout\"><\/p>\n<p>This should make the app much more usable as an Apple Watch app, so happy\ngolfing :-)<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/19th-hole-golf-scorer-3.1\/","date":484272000},{"title":"My Year With Apple Watch","content":"<p>As the Apple Watch hits its first birthday, there seems to be in increasing\nnumber of bloggers complaining about it. One (which I refuse to link to) titled\n&ldquo;My Year of Hell With the Apple Watch&rdquo;. I think the article has since been\nre-published with a slightly less inflammatory title, but really! Did somebody\nrivet the watch to his wrist? If it was so awful, why not just stop using it?<\/p>\n<p>I am a watch nerd and have always loved watches and having one on me. I liked\nwatches with features and even had a calculator watch at one point although as a\nwoman with skinny wrists, I found it constantly annoying that watch makers put\nall the gadgets into man-sized watches so I was left with the choice of no\nfeatures or a watch that looked stupidly large on my wrist.<\/p>\n<p>A few years ago I stopped wearing a watch. I can&rsquo;t remember now why I did it -\nmaybe my watch strap broke and it wasn&rsquo;t important enough to get a new one. I\nalways had my iPhone to give me the time.<\/p>\n<p>But I ordered three Apple Watches as soon as they were available and myself,\nhusband and eldest son have been using them ever since.<\/p>\n<hr>\n<h2 id=\"here-are-what-i-consider-to-be-the-best-features-of-the-apple-watch\">Here are what I consider to be the best features of the Apple Watch:<\/h2>\n<ul>\n<li>\n<p><strong>Accuracy<\/strong>: It is a fantastically accurate time-piece. Not enough people\ngive this credit, but we have always been used to clocks and watches that were\ninherently inaccurate. Having a device on my wrist that I <strong>know<\/strong> to be\nperfectly accurate is an amazing thing.<\/p>\n<\/li>\n<li>\n<p><strong>Notifications<\/strong>: this takes a bit of work to get right and with every new\napp, you need to assess whether to have its notifications appear on your\nwrist. But the wonderful thing is knowing that you haven&rsquo;t missed anything and\nbeing able to glance at your wrist when a notification arrives and tell -\nunobtrusively - whether this is something that needs immediate attention. And\nthe ability to respond instantly to messages and emails with just a couple of\ntaps is amazingly useful.<\/p>\n<\/li>\n<li>\n<p><strong>Customisable watch faces<\/strong>: depending on what I am doing, I need quick\naccess to different pieces of information. When travelling, I can set up a\nwatch face with multiple time zones. When working, I need a timer. When on\nholiday, I prefer one of the more relaxing but less detailed watch faces.<\/p>\n<\/li>\n<li>\n<p><strong>Activity<\/strong>: I am not the world&rsquo;s most active person so I find the three\nrings to be a really good motivator. In fact I just had to stop typing and run\nup &amp; down the stairs to get another notch to the blue ring. The goals are not\nout of my reach, so I like trying to fill in the rings every day.<\/p>\n<\/li>\n<li>\n<p><strong>Voice commands<\/strong>: being able to send a text message completely by voice when\ndriving or when my hands are busy is fantastic. Starting a timer, doing unit\nconversions and navigating are things I do frequently by voice.<\/p>\n<\/li>\n<li>\n<p><strong>Excellent battery life<\/strong>: I started off having the battery life complication\nalways visible, but it very quickly became apparent that this was unnecessary.\nRight now I have been wearing the watch for about 11 hours and the battery is\nat 74%. And charging is so fast that if I did run it down, a 30 minute charge\nwould get me through most of a day.<\/p>\n<\/li>\n<li>\n<p><strong>The Milanese Loop<\/strong>: best watch band ever.<\/p>\n<\/li>\n<\/ul>\n<p>There are other good features, but I think those are my favourites.<\/p>\n<hr>\n<h2 id=\"so-what-dont-i-like\">So what don&rsquo;t I like?<\/h2>\n<ul>\n<li>\n<p><strong>Third-party apps are still a problem<\/strong>. I know. I have published three\nmyself and sometimes they just doesn&rsquo;t happen. However this appears to vary a\nlot. Some people say they can never get apps to run, even Apple&rsquo;s apps. Others\nsay they work but with a long delay. My watch seems to be better than the\naverage but it is still an issue.<\/p>\n<\/li>\n<li>\n<p><strong>Sketches don&rsquo;t always get through or can take ages<\/strong>. We thought it would be\na lot of fun to send each other little sketches and so it is, despite our\ntotal lack of any artistic skills. But it loses a bit of impact when you have\nto send a message 20 minutes later asking if the sketch has arrived.<\/p>\n<\/li>\n<li>\n<p><strong>The exercise tracking seems to be a bit erratic<\/strong>. If my husband and I go\nfor a walk together, he comes back with 25 minutes of exercise and I only have\n7 minutes. Am I not going fast enough? Are my arms not swinging enough? If it\nis very hot and my wrist gets sweaty, I seem to get better numbers - is this\nbecause my heart is beating faster or the capillaries closer to the surface\nhave expanded? Or is the watch picking up a better signal that way? Either\nway, I still like the activity circles, but the green ring frustrates me a\nbit.<\/p>\n<\/li>\n<\/ul>\n<hr>\n<h2 id=\"and-what-would-i-like-to-see-in-watch-2--watchos-3\">And what would I like to see in Watch 2 \/ watchOS 3?<\/h2>\n<ul>\n<li>\n<p>Some sort of always-on display of the time.<\/p>\n<\/li>\n<li>\n<p>A speaker to allow Siri to talk back to me and to play audio.<\/p>\n<\/li>\n<li>\n<p>FaceTime audio calls.<\/p>\n<\/li>\n<li>\n<p>Better support for third-party apps - perhaps open up some private APIs?<\/p>\n<\/li>\n<li>\n<p>Allow developers to create watch faces or apps that told the time.<\/p>\n<\/li>\n<li>\n<p>Allow developers to say that an app should stay as the frontmost app once\nopened.<\/p>\n<\/li>\n<\/ul>\n<hr>\n<h2 id=\"will-i-buy-watch-2\">Will I buy Watch 2?<\/h2>\n<p>At this stage I would say no. We bought the bottom-of-the-line Sport models\nbecause with version 1.0 of anything, you don&rsquo;t want to spend so much that\nupgrading is ruled out. However these watches are still going great and a lot of\nthe improvements I am looking for will be in software not hardware.<\/p>\n<p>But 14 months ago, I was waiting for Apple to announce the iWatch as we all\nthought it would be called, and saying that I didn&rsquo;t think I would get one. The\nfeature list convinced me and I have been delighted with it. So if Watch 2 comes\nup with some killer feature that matters to me, then I might have to\nre-consider&hellip;<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/my-year-with-apple-watch\/","date":483494400},{"title":"How To Confuse TestFlight","content":"<p>I ran into an unusual problem when testing my latest app: &ldquo;<a href=\"https:\/\/troz.net\/what-is-my-speed\/\">What Is My\nSpeed?<\/a>&rdquo;. It is now available from the <a href=\"https:\/\/itunes.apple.com\/app\/what-is-my-speed\/id1091394524\">iTunes App Store<\/a>, but getting\nthere was a struggle.<\/p>\n<p><a href=\"#tldr\">TL;DR<\/a><\/p>\n<p>Xcode is terrible at renaming projects, so it is a really good idea to have\nworked out your app&rsquo;s name before starting. I would even recommend creating an\napp ID in your Apple Developer account and registering the app name in iTunes\nConnect. Only once you get to iTunes Connect will the name be checked for\nuniqueness. Searching the App Stores is not enough as it does not cover\nun-released apps or apps that are not available in your country.<\/p>\n<p>So I set up my app. I was hoping for &ldquo;What&rsquo;s My Speed?&rdquo; but was happy with &ldquo;What\nIs My Speed?&rdquo;.<\/p>\n<p>Next step was to create the project in Xcode which I did using the app name and\nmanually entering the bundle identifier that I had registered at Apple\nDeveloper. Xcode accepted the name without any warnings and created the default\ntargets using that name.<\/p>\n<p>In the default unit testing file, the module was defined like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"> @testable <span style=\"color:#66d9ef\">import<\/span> <span style=\"color:#a6e22e\">What<\/span><span style=\"color:#f92672\">*<\/span><span style=\"color:#a6e22e\">Is_My_Speed<\/span><span style=\"color:#f92672\">*<\/span> <\/code><\/pre><\/div>\n<p>which made me think that Xcode was quite happy to have parsed the app name as\nrequired to replace any unwanted characters to suit.<\/p>\n<p>The app was built, passed all unit tests, profiled, analyzed, tested on real\ndevices as well as the simulators and uploaded to TestFlight.<\/p>\n<p><strong>BARRRPPPP!<\/strong><\/p>\n<p><img src=\"https:\/\/troz.net\/images\/TestFlight_error.png\" alt=\"This app cannot be installed\"><\/p>\n<p>What?<\/p>\n<p><em>(I forgot to take a screenshot but found a similar one online. Thanks <a href=\"https:\/\/www.simpletechs.net\/apps\/easy-fix-for-testflight-problem-after-restoring-from-backup\/\">Simple\nTechs<\/a>)<\/em><\/p>\n<p>I have had experience with TestFlight&rsquo;s oddities in the past, so I incremented\nthe build number and tried again, thinking that maybe there had been a\nprocessing issue. Same result.<\/p>\n<p>This started a very frustrating 24 hours as I ran through all the possibilities\nI could think of or find suggested on the net. Due to disastrous Australian\ninternet speeds, especially uploads, each attempt took from 40 - 120 minutes.\nAbout 5 minutes to implement the next idea, 25 minutes upload time, then the\nrest waiting for Apple to process the app so I could try again.<\/p>\n<p>Here is what I tried:<\/p>\n<ol>\n<li>Uploaded a fresh build.<\/li>\n<li>Removed Bitcode.<\/li>\n<li>Fixed the code signing identity which was set to iOS Developer for some\nreason.<\/li>\n<li>Manually specified the provisioning profiles for all three components (iPhone\napp, WatchKit app, WatchKit Extension).<\/li>\n<li>Manually selected the code signing identity for the provisioning profiles.<\/li>\n<li>Uploaded using Application Loader instead of Xcode.<\/li>\n<li>Removed third-party framework.<\/li>\n<li>Removed WatchKit app.<\/li>\n<li>Revoked my distribution profile, re-created it and updated all provisioning\nprofiles.<\/li>\n<li>Created a completely blank project with same app name and bundle identifier.<\/li>\n<\/ol>\n<p>As you can see from this list, I thought it was a code signing or profile error.\nUsing <a href=\"https:\/\/itunes.apple.com\/app\/apple-configurator-2\/id1037126344\">Apple Configurator 2<\/a> (the modern version of iPhone Configuration\nUtility), I was able to get the logs from my iPhone and entries like the\nfollowing seemed to confirm this:<\/p>\n<blockquote>\n<pre><code class=\"language-Error\" data-lang=\"Error\">installd.staging\/temp.2LWJ2h\/extracted\/Payload\/What Is My Speed?.app : 0xe8008017 (A signed resource has been added, modified, or deleted.)}```\n<\/code><\/pre><\/blockquote>\n<p>But when I got to the stage of a completely blank app still failing, I suddenly\nthought of the question mark. With the benefit of my preamble to this post, you\nall probably got there long before I did, but I got there in the end.<\/p>\n<p>The solution was to remove the question mark from the names of the targets in\nXcode. I had to fix up the module names in my unit testing files, but apart from\nthat, there were no changes. After this I was able to upload the complete app to\nTestFlight and install it on my iPhone.<\/p>\n<p>It is possible that it was the Product Names that were the issue, rather than\nthe target name as in Build Settings, Product Name is set to be <code>$(TARGET_NAME)<\/code>\nby default but I didn&rsquo;t test that. Maybe next time&hellip;<\/p>\n<p><!-- raw HTML omitted -->TL;DR<!-- raw HTML omitted --> Do not put any unusual characters in your target names.\nAlphanumerics and spaces are OK, but I am not sure about anything else.<\/p>","url":"https:\/\/troz.net\/post\/2016\/how-to-confuse-testflight\/","date":483148800},{"title":"What Is My Speed?","content":"<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>&ldquo;What Is My Speed?&rdquo; is available now from the <a href=\"https:\/\/itunes.apple.com\/app\/what-is-my-speed\/id1091394524\">iTunes App Store<\/a> for iPhone\nand Apple Watch.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/speed_1.png\" alt=\"What Is My Speed? - iPhone\"><\/p>\n<p>If you read my recent blog post on <a href=\"https:\/\/troz.net\/post\/2016-04-07-road-trip-apps\/\">Road Trip Apps<\/a> you will have realised\nthat I was working on an app to fill a gap that I discovered in our road trip\napp arsenal. So here it is: &ldquo;What Is My Speed?&rdquo; for iPhone &amp; Apple Watch.<\/p>\n<hr>\n<p>Track your speed on your iPhone or Apple Watch while driving, bicycling, running\nor walking. See your course and altitude at all times.<\/p>\n<p>Optionally set a speed limit and get audible warnings on your iPhone when you\nexceed it. Reduce the speed limit to zero or extend it over the maximum to turn\noff speed limit warnings.<\/p>\n<p>Designed for easy viewing in all light conditions and with very accessible\nswiping to change the speed limit quickly and easily.<\/p>\n<p>If you want more detailed information, tap the info button to see a complete\nlist of available data about your current location. <em>Altitude and floor data may\nnot always be available but will be displayed whenever possible.<\/em><\/p>\n<p><img src=\"https:\/\/troz.net\/images\/speed_2.png\" alt=\"What Is My Speed? details - iPhone\"><\/p>\n<p>Your current iPhone settings are used to set the default units for speed and\naltitude, but these are easily changed after tapping the info button.<\/p>\n<hr>\n<p>To monitor your speed on your Apple Watch, you need to start the app on your\niPhone, but then it does not have to remain in the foreground. However speed\nlimit warnings will only be given when the iPhone app is active.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/speed_watch_1.png\" alt=\"What Is My Speed? Apple Watch\"><\/p>\n<p>To adjust the speed limit, swipe from side to side. The speed limit indicator\nwill expand for easier viewing and the speed limit will increase or decrease.\nTap again to shrink the speed limit indicator or leave it for a few seconds and\nit will shrink automatically. You can also swipe up or down with two fingers to\nadjust the screen brightness for maximum visibility.<\/p>\n<p>Tap the &ldquo;?&rdquo; button on the main screen to be reminded of the available swipes.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/speed_3.png\" alt=\"What Is My Speed? adjust speed limit - iPhone\"><\/p>\n<hr>\n<p><strong>Location permissions:<\/strong> On startup, the app will request permission to access\nyour location. This is how the speed, course and altitude data is gathered so is\nessential for the app to operate. If you have an Apple Watch with the app\ninstalled, the app will continue to track your speed while in the background so\nthat the data can be sent to your watch. If you do not have an Apple Watch or\nthe app is not installed on the watch, your speed will only ever be tracked when\nthe app is the current foreground app.<\/p>\n","url":"https:\/\/troz.net\/what-is-my-speed\/","date":482544000},{"title":"Road Trip Apps","content":"<p>Over the past few months, we have done two long road trips: one approximately\n4,000 km and the other about 1,800 km. These gave us the chance to try out\nvarious apps for navigation and travel information. We live in Queensland,\nAustralia and some of these comments may be country-specific.<\/p>\n<hr>\n<h2 id=\"navigation\">Navigation<\/h2>\n<p>The basic navigation came down to three apps:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.apple.com\/ios\/maps\/\">Apple Maps<\/a><\/li>\n<li><a href=\"https:\/\/itunes.apple.com\/app\/google-maps-real-time-navigation\/id585027354\">Google Maps<\/a><\/li>\n<li><a href=\"https:\/\/itunes.apple.com\/au\/app\/metroview-gps-navigation\/id370753892\">Metroview<\/a> (Australia and New Zealand only)<\/li>\n<\/ul>\n<p>Each has their strengths and weaknesses:<\/p>\n<ul>\n<li>\n<p>Apple Maps is by far the most beautiful and easy to read. It integrates\nperfectly with Contacts (as you would expect). Turn-by-turn directions were\nmostly excellent. The biggest downside is that it does not allow you to\nspecify a route avoiding tolls.<\/p>\n<\/li>\n<li>\n<p>Google Maps allows you to plot a route avoiding tolls&hellip; if you can find the\nsetting. Its traffic reporting is by far the best and it would offer suggested\nchanges of routes during the trip to get around traffic. The interface is\nconfusing at times. Turn-by-turn directions were good, although I would have\npreferred an Australian voice option.<\/p>\n<\/li>\n<li>\n<p>Metroview has all the maps downloaded which saves on data connection costs and\nhandles bad connectivity areas better. Its best feature is notification of\nspeed limits and alerts if you go over the limit, although it gets confused\nwhen on over or under-passes. Another very useful feature is the display of\nlanes when approaching highway exits, so you could tell which lane to be in.\nApparently the voice guidance is now more natural but we didn&rsquo;t try this. The\ndisplay is messy and cluttered compared to the others.<\/p>\n<\/li>\n<\/ul>\n<p>We ended up with the following sequence:<\/p>\n<ol>\n<li>Apple Maps for the bulk of the trip.<\/li>\n<li>Google Maps &amp; Metroview (on 2 separate iPhones) in the metropolitan areas and\nwhen about to take a highway exit.<\/li>\n<\/ol>\n<p>Even then it was amusing to see the apps panic when you took a new road and the\napps assumed you had left the road and were heading through the bush! And at one\npoint there was a large and official sign saying &ldquo;Ignore GPS - do not take this\nturn&rdquo; and sure enough, both Apple Maps and Google Maps wanted us to turn down a\nlittle country lane instead of keeping to the highway.<\/p>\n<hr>\n<h2 id=\"speed-display\">Speed Display:<\/h2>\n<p>Apart from the basic navigation apps, we tried a couple of speed display apps.\nThere are a lot of HUD speed apps out there that project the data on the the\nwindscreen but they had two problems:<\/p>\n<ul>\n<li>They only worked when it was dark. As soon as the sun got up, they became\ninvisible.<\/li>\n<li>They required you to place your iPhone flat on the dashboard so even if they\nhad worked during the day, the iPhone would have got far too hot and\nshut-down. (We have a mount that holds our iPhones in front of the air vents\nto avoid this over-heating problem. Any mount that sticks to the windscreen\nitself leaves the iPhone too exposed to the sun.)<\/li>\n<\/ul>\n<p>One we stuck with (in non-HUD mode) was <a href=\"https:\/\/itunes.apple.com\/app\/speedometer-+-hud-digital\/id375318117\">Speedometer + HUD<\/a>. This had a clear\ndisplay with a few flaws:<\/p>\n<ul>\n<li>When moving from 99 kph to 100 kph, the display was not re-arranged for 3\ndigits. Moving from 101 down to 100 fixed it, but as 100 kph is the standard\nspeed limit, this was a frequent annoyance.<\/li>\n<li>Adjusting the speed limit was too fiddly and difficult even for the passenger.\nIt would have been impossible for the driver.<\/li>\n<li>It only works in landscape mode which does not always suit the car mounts - we\nended up perching the 2nd iPhone on the unused ashtray.<\/li>\n<\/ul>\n<p>We also tried <a href=\"https:\/\/itunes.apple.com\/app\/talking-hud-voice-prompt-speedometer\/id873194479\">Talking HUD<\/a> but didn&rsquo;t like it. It worked solely in HUD mode,\nso was only useful at night or very early morning. It had voice prompts to tell\nyou when to change gear but in an automatic car, they were just a distraction\nand it was not obvious how to turn them off.<\/p>\n<p>But overall, we found having a speed display app as well as a navigation app to\nbe the best combination. The audible alerts when you went over speed were very\nuseful when over-taking or getting up to speed as you could get the information\nwithout having to take your eyes off the road.<\/p>\n<hr>\n<h2 id=\"future-app-plans\">Future App Plans:<\/h2>\n<p>Having determined that a speed display app is really useful, but not finding one\nthat suited us perfectly, the obvious next step was to design my own. I wanted\nit to have the following features:<\/p>\n<ul>\n<li>clean display, visible in all light conditions<\/li>\n<li>easily settable speed limit<\/li>\n<li>audible and visual over-speed warnings<\/li>\n<li>no HUD mode<\/li>\n<li>Apple Watch component for when you only had a single iPhone and it was\nnavigating but you still wanted a speed display<\/li>\n<\/ul>\n<p>So watch this space for further news of my up-coming app&hellip;<\/p>\n<hr>\n<h2 id=\"update\">Update<\/h2>\n<p>&ldquo;<a href=\"https:\/\/troz.net\/what-is-my-speed\/\">What Is My Speed?<\/a>&rdquo; is available now from the <a href=\"https:\/\/itunes.apple.com\/app\/what-is-my-speed\/id1091394524\">iTunes App Store<\/a> for\niPhone and Apple Watch.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/road-trip-apps\/","date":481680000},{"title":"Structs vs Classes","content":"<p>One of the big debates among Swift developers is when to use <code>structs<\/code> and when\nto use <code>classes<\/code>.<\/p>\n<p>Classes are the building blocks of object-oriented programming\nbut structs as provided by Swift are newly powerful. Structs have been around in\nC-based languages for a long time, but Swift has made them more powerful and\ngiven them more features so that they are almost indistinguishable from classes.\nSo what are the differences and which one should you use?<\/p>\n<hr>\n<h2 id=\"where-they-are-the-same\">Where they are the same?<\/h2>\n<ul>\n<li>both can define initializers<\/li>\n<li>both can define properties<\/li>\n<li>both can define methods<\/li>\n<li>both can conform to protocols<\/li>\n<\/ul>\n<h2 id=\"where-they-are-different\">Where they are different?<\/h2>\n<ul>\n<li>classes can inherit from other classes<\/li>\n<li>structs cannot inherit from other structs<\/li>\n<li>classes are reference types<\/li>\n<li>structs are value types<\/li>\n<\/ul>\n<hr>\n<p>The reference type vs value type difference is where things really get\ninteresting. Have a look at this example of a class with a single property:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">PersonClass<\/span> {\n    <span style=\"color:#66d9ef\">var<\/span> name: String\n\n    <span style=\"color:#66d9ef\">init<\/span>(name: String) {\n        <span style=\"color:#66d9ef\">self<\/span>.name = name\n    }\n}\n\n<span style=\"color:#66d9ef\">var<\/span> personA = PersonClass(name: <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>)\npersonA.name <span style=\"color:#75715e\">\/\/ Woody<\/span>\n\n<span style=\"color:#66d9ef\">var<\/span> personB = personA\npersonB.name = <span style=\"color:#e6db74\">&#34;Buzz&#34;<\/span>\npersonB.name <span style=\"color:#75715e\">\/\/ Buzz<\/span>\n<\/code><\/pre><\/div><p>That looks like standard stuff, but what do you think <code>personA<\/code>'s name is now?\nIf you guessed &ldquo;Buzz&rdquo; then you win a prize! <em>(No, not a real prize - pat\nyourself on the back.)<\/em><\/p>\n<p>This is because when we created the <code>personB<\/code> variable and assigned <code>personA<\/code> to\nit, we did not assign the <strong>VALUE<\/strong> of <code>personA<\/code>, we assigned a <strong>REFERENCE<\/strong> to\n<code>personA<\/code> - actually the address in memory of <code>personA<\/code> rather than the data\ninside.<\/p>\n<p>So now we have two objects and they are both looking at the same spot in memory\nfor their data. This means that changing the name of <code>personB<\/code> changed the name\nof <code>personA<\/code> as well.<\/p>\n<p>Let&rsquo;s try the same thing with a struct:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">PersonStruct<\/span> {\n  <span style=\"color:#66d9ef\">var<\/span> name: String\n}\n\n<span style=\"color:#66d9ef\">var<\/span> personC = PersonStruct(name: <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span>)\npersonC.name <span style=\"color:#75715e\">\/\/ Rex<\/span>\n\n<span style=\"color:#66d9ef\">var<\/span> personD = personC\npersonD.name = <span style=\"color:#e6db74\">&#34;Hamm&#34;<\/span>\npersonD.name <span style=\"color:#75715e\">\/\/ Hamm<\/span>\n\npersonC.name <span style=\"color:#75715e\">\/\/ Rex<\/span>\n<\/code><\/pre><\/div><p>This time, because we are using a struct, when we assign <code>personC<\/code> to the new\n<code>personD<\/code> variable, we are actually making a copy of <code>personC<\/code> and setting the\nvalues of <code>personD<\/code> to this new copy. So now we can change <code>personD<\/code> without\nmessing with <code>personC<\/code>.<\/p>\n<p>Note that I did not have a define an <code>init<\/code> for the struct because it creates\none automatically. You can still add one yourself if you want to do anything\ndifferent, but you do not have to.<\/p>\n<hr>\n<p>At first glance, you may think that you should now use structs all the time to\navoid these unintended consequences, but it isn&rsquo;t quite as simple as that.\nSometimes a class is still the best thing to use.<\/p>\n<p>The inheritance capabilities of classes can make your decision simple: if you\nneed to create a button and want to start by sub-classing UIButton or NSButton,\nthen your button must be a class, not a struct. This will apply to most user\ninterface objects.<\/p>\n<p>Apple really wants us to use structs and in the Swift standard libraries, a very\nhigh percentage of the objects are structs. But structs are especially well\nsuited to a certain subset of objects.<\/p>\n<p>The best explanation that I have found of when to use a struct is the <a href=\"http:\/\/faq.sealedabstract.com\/structs_or_classes\/#an-alternative-hypothesis\">Jeff Trick<\/a>. Reduced down, the rule is:<\/p>\n<blockquote>\n<p>If you can overload == to compare two instances of your object, use a struct.\n<!-- raw HTML omitted --> If this doesn&rsquo;t make sense, use a class.<\/p>\n<\/blockquote>\n<p>So use structs for your things: Person, Shape, Brick, Cat. <!-- raw HTML omitted --> Use classes for\neverything else.<\/p>\n<p>I would add one caveat: don&rsquo;t fight the compiler. If using a struct is giving\nlots of errors and warnings, change to a class.<\/p>\n<hr>\n<p>A logical consequence of this is that all structs should conform to the\n<a href=\"http:\/\/swiftdoc.org\/v2.2\/protocol\/Equatable\/\">Equatable<\/a> protocol.<\/p>\n<p>Extending <code>PersonStruct<\/code> to make it conform just requires a single function:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">PersonStruct<\/span>: Equatable {\n  <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">func<\/span> == (lhs: PersonStruct, rhs: PersonStruct) -&gt; Bool {\n    <span style=\"color:#66d9ef\">return<\/span> lhs.name == rhs.name\n  }\n}\n<\/code><\/pre><\/div><p>Since this struct only has one property, we can say that two instances of this\nstruct are equal if the names are equal.<\/p>\n<p>Testing this, we can see:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">var<\/span> personC = PersonStruct(name: <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span>)\n<span style=\"color:#66d9ef\">var<\/span> personD = personC\npersonD.name = <span style=\"color:#e6db74\">&#34;Hamm&#34;<\/span>\n\npersonC == personD <span style=\"color:#75715e\">\/\/ false<\/span>\n\n<span style=\"color:#66d9ef\">let<\/span> personE = PersonStruct(name: <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span>)\npersonC == personE <span style=\"color:#75715e\">\/\/ true<\/span>\npersonC <span style=\"color:#f92672\">!=<\/span> personE <span style=\"color:#75715e\">\/\/ false<\/span>\n<\/code><\/pre><\/div><p>Conveniently, providing an <code>==<\/code> function effectively gives us a <code>!=<\/code> function\nfor free as you can see from the last example.<\/p>\n<hr>\n<p>There is one final point I would like to make about struct and that concerns\nmutating functions. Look at what happens if we include a function that changes\nthe <code>name<\/code> property in the struct:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/mutating.png\" alt=\"Mutating error\"><\/p>\n<p>Fix-it is very helpfully pointing out that the method needs to be marked as\n<code>mutating<\/code> for this to work and is showing where this should go. Accepting the\nsuggestion will get rid of the error and then the name can be changed using this\nmethod.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">PersonStruct<\/span>: Equatable {\n    <span style=\"color:#66d9ef\">var<\/span> name: String\n\n    <span style=\"color:#66d9ef\">mutating<\/span> <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">changeName<\/span>(to newName: String) {\n        <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#f92672\">!<\/span>newName.isEmpty {\n            name = newName\n        }\n    }\n}\n\n<span style=\"color:#66d9ef\">var<\/span> personC = PersonStruct(name: <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>)\npersonC.name <span style=\"color:#75715e\">\/\/ Woody<\/span>\n\npersonC.changeName(to: <span style=\"color:#e6db74\">&#34;Sid&#34;<\/span>)\npersonC.name <span style=\"color:#75715e\">\/\/ Sid<\/span>\n<\/code><\/pre><\/div><p>There is no problem about using <code>mutating<\/code> and it will not have the unintended\nconsequences of using classes. Despite the scary name, a mutating function\nactually returns a new copy of the struct.<\/p>\n<p>The problem arises if you have many nested structs and the mutating has to\nspread through the list. So don&rsquo;t nest your structs - at least not more than two\ndeep!<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/structs-vs-classes\/","date":480988800},{"title":"Learning Swift - Optionals","content":"<p>Today I plan to discuss optionals since they were a feature of Swift that I\nfound difficult to grasp at first.<\/p>\n<h2 id=\"what-is-an-optional-in-swift\">What is an optional in Swift?<\/h2>\n<p>An optional is a variable of a specified type that can also be nil.<\/p>\n<h2 id=\"why-does-this-matter\">Why does this matter?<\/h2>\n<p>In Objective-C, any object type could be nil. If you declared a variable like\nthis:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\">NSString <span style=\"color:#f92672\">*<\/span>myString;\n<\/code><\/pre><\/div><p>then <code>myString<\/code> was set to nil by default.<\/p>\n<p>But this could cause issues, especially as Objective-C does not complain if you\nsend a message to nil. This could lead to bugs that were very difficult to track\ndown.<\/p>\n<p>The other big use for nil is when returning from a function which has found no\nappropriate data to return. The classic example is when looking for the index of\nan element in an array. What should be returned if the element is not found in\nthe array?<\/p>\n<p>Some languages return -1, Objective-C uses <code>NSNotFound<\/code>, but you have to know\nwhat each language is going to do. The more logical answer is nil. However if\nyour function is expected to return an integer, then it cannot return nil\nbecause nil is not an integer.<\/p>\n<p>This is where optionals come in: if the function is expected to return an\noptional integer, it can return with an integer with the index of the matching\nelement, or it can return nil if the element was not found. This is much clearer\nand less prone to error.<\/p>\n<hr>\n<h2 id=\"how-does-swift-handle-optionals\">How does Swift handle optionals?<\/h2>\n<p>One of the first things that struck me about Swift was how clean the code\nlooked, without so many non-alphanumeric characters scattered around. Gone were\nall the:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#f92672\">*<\/span> ; [ ]\n<\/code><\/pre><\/div><p>But instead, Swift code sprouted:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#f92672\">!<\/span> ?\n<\/code><\/pre><\/div><p>What were these?<\/p>\n<p><strong>The key to understanding optionals is to realise that when you declare an\noptional variable of a certain type, you are actually declaring a box that can\nhold a variable of that type or can hold nil.<\/strong><\/p>\n<p>Once you grasp that concept, it all becomes much more obvious.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">var<\/span> optionalInteger: Int?\n<\/code><\/pre><\/div><p>The ? indicates that this is an optional variable. It does not have to be\ninitialised as it is already set to nil which is valid for an optional variable.\nWithout the ? this would require initialisation as it would not be valid for it\nto be nil.<\/p>\n<hr>\n<h2 id=\"setting-an-optional\">Setting an optional<\/h2>\n<p>Setting the value of an optional variable is just the same as any other\nvariable:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">optionalInteger = <span style=\"color:#ae81ff\">3<\/span>\noptionalInteger = <span style=\"color:#ae81ff\">42<\/span>\n<\/code><\/pre><\/div><hr>\n<h2 id=\"getting-an-optional\">Getting an optional<\/h2>\n<p>The difference arises when you need to get the data out of the optional variable\nin order to use it. This process is called un-wrapping and it means to get the\nvariable value out of the &lsquo;box&rsquo; it is stored it.<\/p>\n<h3 id=\"the-most-obvious-way-is-to-use-\">The most obvious way is to use !<\/h3>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> newInteger = optionalInteger!\n<\/code><\/pre><\/div><p><strong>DO NOT DO THIS!<\/strong><\/p>\n<p>This is called forced-unwrapping and assumes that the optional variable is not\nnil. If the optional is nil, this will crash. In Xcode, when you connect\ninterface elements from your storyboard to a Swift file, Xcode will use ! like\nthis:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">@IBOutlet<\/span> <span style=\"color:#66d9ef\">weak<\/span> <span style=\"color:#66d9ef\">var<\/span> startButton: UIButton!\n<\/code><\/pre><\/div><p>I have to assume Xcode knows what it is doing and the button will be available\nwhen needed, but you should not use ! - it is un-safe. By using it, you are\nvowing to the compiler that when it gets to that point, the optional value will\nnot be nil. There are much better and safer ways of doing that.<\/p>\n<hr>\n<h3 id=\"use-if-let\">Use &lsquo;if let&rsquo;<\/h3>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">doubleNumber<\/span>(<span style=\"color:#66d9ef\">_<\/span> optionalInteger: Int?) -&gt; Int? {\n    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> integerValue = optionalInteger {\n        <span style=\"color:#75715e\">\/\/ integerValue is not an optional<\/span>\n        <span style=\"color:#75715e\">\/\/ and is guaranteed to contain an Int<\/span>\n        <span style=\"color:#66d9ef\">return<\/span> integerValue <span style=\"color:#f92672\">*<\/span> <span style=\"color:#ae81ff\">2<\/span>\n    }\n\n    <span style=\"color:#75715e\">\/\/ no integer found in the optional,<\/span>\n    <span style=\"color:#75715e\">\/\/ so return nil to indicate failure<\/span>\n    <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">nil<\/span>\n}\n<\/code><\/pre><\/div><hr>\n<h3 id=\"use-guard\">Use guard<\/h3>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">doubleNumber<\/span>(<span style=\"color:#66d9ef\">_<\/span> optionalInteger: Int?) -&gt; Int? {\n    <span style=\"color:#66d9ef\">guard<\/span> <span style=\"color:#66d9ef\">let<\/span> integerValue = optionalInteger <span style=\"color:#66d9ef\">else<\/span> {\n        <span style=\"color:#75715e\">\/\/ get out quickly,<\/span>\n        <span style=\"color:#75715e\">\/\/ returning nil to indicate failure<\/span>\n        <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">nil<\/span>\n    }\n\n    <span style=\"color:#75715e\">\/\/ integerValue is not an optional<\/span>\n    <span style=\"color:#75715e\">\/\/ and is guaranteed to contain an Int<\/span>\n    <span style=\"color:#66d9ef\">return<\/span> integerValue <span style=\"color:#f92672\">*<\/span> <span style=\"color:#ae81ff\">2<\/span>\n}\n<\/code><\/pre><\/div><p>These two alternatives (<code>if let<\/code> &amp; <code>guard<\/code>) do the same job but in opposite\nways. In both cases, they perform a conditional un-wrapping that may or may not\ngive a valid result. <code>if let<\/code> checks if it is OK to proceed. <code>guard<\/code> checks to\nsee if it is NOT OK to proceed. Which you use is really a matter of personal\npreference and working out what is more logical in each case.<\/p>\n<p>The <code>guard<\/code> statement is really good for checking data early in a process and\nmaking a quick exit it something is wrong. The <code>if let<\/code> construct encloses your\nsuccess code inside a block and can sometimes leave the failure code a long way\nfrom the check which can make it less obvious. The other potential issue with\n<code>if let<\/code> is the &ldquo;pyramid of doom&rdquo; common in early Swift code as demonstrated in\nthis rather contrived example:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">isValidAddressBookEntry<\/span>(firstName: String?,\n                             lastName: String?,\n                             emailAddress: String?,\n                             phoneNumber: String?) -&gt; Bool {\n        <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> validFirstName = firstName {\n            <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> validLastName = lastName {\n                <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> validEmail = emailAddress {\n                    <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> validPhone = phoneNumber {\n                        <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">true<\/span>\n                    }\n                }\n            }\n        }\n        <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">false<\/span>\n}\n<\/code><\/pre><\/div><p>Thankfully, Swift now allows us to chain both <code>if let<\/code> and <code>guard<\/code> statements.\nHere is the previous example re-factored to use <code>if let<\/code>:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">isValidAddressBookEntrySwift2<\/span>(firstName: String?,\n                                   lastName: String?,\n                                   emailAddress: String?,\n                                   phoneNumber: String?) -&gt; Bool {\n      <span style=\"color:#66d9ef\">if<\/span> <span style=\"color:#66d9ef\">let<\/span> validFirstName = firstName,\n          <span style=\"color:#66d9ef\">let<\/span> validLastName = lastName,\n          <span style=\"color:#66d9ef\">let<\/span> validEmail = emailAddress,\n          <span style=\"color:#66d9ef\">let<\/span> validPhone = phoneNumber {\n          <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">true<\/span>\n      }\n      <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">false<\/span>\n}\n<\/code><\/pre><\/div><p>And here is the same function but using <code>guard<\/code> which allows the inputs to be checked immediately and the function exited if the u=inputs are not valid. For a short function like this, the change is not really significant, but if the function does a lot of processing of the input data, checking first and getting out as soon as possible is more efficient.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">isValidAddressBookEntryUsingGuard<\/span>(firstName: String?,\n                                       lastName: String?,\n                                       emailAddress: String?,\n                                       phoneNumber: String?) -&gt; Bool {\n    <span style=\"color:#66d9ef\">guard<\/span>\n        <span style=\"color:#66d9ef\">let<\/span> validFirstName = firstName,\n        <span style=\"color:#66d9ef\">let<\/span> validLastName = lastName,\n        <span style=\"color:#66d9ef\">let<\/span> validEmail = emailAddress,\n        <span style=\"color:#66d9ef\">let<\/span> validPhone = phoneNumber <span style=\"color:#66d9ef\">else<\/span> {\n            <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">false<\/span>\n    }\n\n    <span style=\"color:#66d9ef\">return<\/span> <span style=\"color:#66d9ef\">true<\/span>\n}\n<\/code><\/pre><\/div><hr>\n<h3 id=\"use-optional-chaining\">Use optional chaining<\/h3>\n<p>The final way to deal with optionals safely is to use optional chaining:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">SocialMediaAccounts<\/span> {\n    <span style=\"color:#66d9ef\">var<\/span> facebook: Person?\n    <span style=\"color:#66d9ef\">var<\/span> twitter: Person?\n}\n\n<span style=\"color:#66d9ef\">struct<\/span> <span style=\"color:#a6e22e\">Person<\/span> {\n    <span style=\"color:#66d9ef\">var<\/span> firstName: String?\n    <span style=\"color:#66d9ef\">var<\/span> lastName: String?\n    <span style=\"color:#66d9ef\">var<\/span> handle: String?\n}\n\n<span style=\"color:#66d9ef\">var<\/span> socialMedia: SocialMediaAccounts?\nsocialMedia = SocialMediaAccounts()\n<span style=\"color:#66d9ef\">var<\/span> twitterAccount = Person()\n\nsocialMedia?.twitter = twitterAccount\n<span style=\"color:#66d9ef\">let<\/span> twitterHandle = socialMedia?.twitter?.handle\n<\/code><\/pre><\/div><p>In this example, we have defined a <code>SocialMediaAccounts<\/code> struct that holds\noptional <code>Person<\/code> structs for the various social media outlets. The\n<code>socialMedia<\/code> variable is defined as an optional and then created. A\n<code>twitterAccount<\/code> variable of type <code>Person<\/code> is also created but contains no data\nat the moment.<\/p>\n<p>When assigning the <code>twitterAccount<\/code> to the <code>socialMedia.twitter<\/code> property, a ?\nis inserted which checks to see that <code>socialMedia<\/code> is not nil. If it is nil,\nthen execution of that line stops at the ? and nothing bad will happen.<\/p>\n<p>In the same way, when trying to read back the twitter handle, we chained\ntogether 2 optionals with ?&rsquo;s. If either <code>socialMedia<\/code> or <code>socialMedia.twitter<\/code>\nis nil, that line will not complete. Again this is perfectly safe and the app\nwill not crash.<\/p>\n<hr>\n<p>All the examples in this article are available in a <a href=\"https:\/\/github.com\/trozware\/optionals\">Swift playground<\/a> which\nhas been updated to Swift 4 syntax.<\/p>","url":"https:\/\/troz.net\/post\/2016\/learning-swift-optionals\/","date":479449440},{"title":"Learning Swift - For-Loops","content":"<p>Loops are a fundamental building block of any program. Doing repetitive tasks\nfast and accurately is what computers are really good at and what we humans get\nvery bored doing. Swift offers several different ways to perform loops, but\ntoday we are going to concentrate on for-loops.<\/p>\n<p>The most basic form of loop is the <code>for-in<\/code> loop. There are two ways this can be\nused: looping over the numbers in a range or looping over the elements in an\narray or dictionary.<\/p>\n<p>Firstly, the range:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> <span style=\"color:#ae81ff\">0<\/span> ..<span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">5<\/span> { printWithSpace(x) }\n<span style=\"color:#75715e\">\/\/ prints: 0 1 2 3 4<\/span>\n<\/code><\/pre><\/div><p><em>I am using a custom print function that allows me to print the results on a\nsingle line for convenience.<\/em><\/p>\n<p>This <code>for-in<\/code> loop uses a half-open range and it is effectively saying:<\/p>\n<pre><code>start with x at 0\nprint x with a space\nadd 1 to x\nis x still less than 5?\n    yes - go back to the print stage\n    no - stop\n<\/code><\/pre>\n<p>If we wanted to go all the way to 5 instead of stopping before 5, we would use a\nclosed range by replacing <code>..&lt;<\/code> with <code>...<\/code><\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> <span style=\"color:#ae81ff\">0<\/span> ... <span style=\"color:#ae81ff\">5<\/span> { printWithSpace(x) }\n<span style=\"color:#75715e\">\/\/ prints: 0 1 2 3 4 5<\/span>\n<\/code><\/pre><\/div><hr>\n<p>These methods work fine if we want to loop through a range of numbers one at a\ntime but what if we want a different increment? There are several ways to vary\nthe step.<\/p>\n<ul>\n<li><code>stride(from:to:by:)<\/code><\/li>\n<li><code>stride(from:through:by:)<\/code><\/li>\n<li><code>where<\/code><\/li>\n<\/ul>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> stride(from: <span style=\"color:#ae81ff\">0<\/span>, to: <span style=\"color:#ae81ff\">10<\/span>, by: <span style=\"color:#ae81ff\">2<\/span>) {\n  printWithSpace(x)\n}\n<span style=\"color:#75715e\">\/\/ prints: 0 2 4 6 8<\/span>\n<\/code><\/pre><\/div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> stride(from: <span style=\"color:#ae81ff\">0<\/span>, through: <span style=\"color:#ae81ff\">10<\/span>, by: <span style=\"color:#ae81ff\">2<\/span>) {\n  printWithSpace(x)\n}\n<span style=\"color:#75715e\">\/\/ prints: 0 2 4 6 8 10<\/span>\n<\/code><\/pre><\/div><p>The 2 variations of <code>stride<\/code> are analogous to the 2 ways of expressing the range\nin the the <code>for-in<\/code> loop.<\/p>\n<p><code>stride(from:to:by:)<\/code> starts with the number in the <code>from<\/code> parameter and each\ntime through the loop, increments that number by the amount of the <code>by<\/code>\nparameter. If the incremented number is less than the <code>to<\/code> parameter, the loop\ncontinues.<\/p>\n<p><code>stride(from:through:by:)<\/code> works the same way but continues until the\nincremented number is greater than or equal to the <code>through<\/code> parameter.<\/p>\n<p>Using a negative value for <code>by<\/code> allows counting backwards:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> stride(from: <span style=\"color:#ae81ff\">10<\/span>, through: <span style=\"color:#ae81ff\">0<\/span>, by: <span style=\"color:#f92672\">-<\/span><span style=\"color:#ae81ff\">2<\/span>) {\n  printWithSpace(x)\n}\n<span style=\"color:#75715e\">\/\/ prints: 10 8 6 4 2 0<\/span>\n<\/code><\/pre><\/div><p>Stride can also be used for floating point loops although the result may contain\nsome unexpected changes in precision e.g 0.7000000000000001 instead of the\nexpected 0.7<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> startingNumber = <span style=\"color:#ae81ff\">0.1<\/span>\n<span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> stride(from: startingNumber, through: <span style=\"color:#ae81ff\">1.0<\/span>, by: <span style=\"color:#ae81ff\">0.2<\/span>) {\n  printWithSpace(x)\n}\n<span style=\"color:#75715e\">\/\/ prints: 0.1 0.3 0.5 0.7000000000000001 0.9<\/span>\n<\/code><\/pre><\/div><p>Note that the result does not contain the <code>through<\/code> parameter as the next\niteration would have produced 1.1 which is greater than it. And also\n<code>startingNumber<\/code> did not have to be a variable as it is never actually changed.<\/p>\n<p>Using <code>where<\/code> makes it possible to step through a loop while conforming to some\nconditional:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> <span style=\"color:#ae81ff\">0<\/span> ... <span style=\"color:#ae81ff\">10<\/span> <span style=\"color:#66d9ef\">where<\/span> x <span style=\"color:#f92672\">%<\/span> <span style=\"color:#ae81ff\">3<\/span> == <span style=\"color:#ae81ff\">0<\/span> {\n  printWithSpace(x)\n}\n<span style=\"color:#75715e\">\/\/ prints: 0 3 6 9<\/span>\n<\/code><\/pre><\/div><hr>\n<p>The other main use for <code>for-in<\/code> loops is for iterating through the elements of\nan array or dictionary:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> arrayOfInts = [ <span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">3<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">6<\/span> ]\n<span style=\"color:#66d9ef\">for<\/span> x <span style=\"color:#66d9ef\">in<\/span> arrayOfInts {\n  printWithSpace(x <span style=\"color:#f92672\">*<\/span> <span style=\"color:#ae81ff\">2<\/span>)\n}\n<span style=\"color:#75715e\">\/\/ prints: 2 4 6 8 10 12<\/span>\n<\/code><\/pre><\/div><div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> myDict = [ <span style=\"color:#ae81ff\">1<\/span>: <span style=\"color:#e6db74\">&#34;one&#34;<\/span>, <span style=\"color:#ae81ff\">2<\/span>: <span style=\"color:#e6db74\">&#34;two&#34;<\/span>, <span style=\"color:#ae81ff\">3<\/span>: <span style=\"color:#e6db74\">&#34;three&#34;<\/span> ]\n<span style=\"color:#66d9ef\">for<\/span> (key, value) <span style=\"color:#66d9ef\">in<\/span> myDict {\n  print(<span style=\"color:#e6db74\">&#34;<\/span><span style=\"color:#e6db74\">\\(<\/span>key<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> = <\/span><span style=\"color:#e6db74\">\\(<\/span>value<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n}\n<span style=\"color:#75715e\">\/\/ prints:<\/span>\n<span style=\"color:#75715e\">\/\/ 2 = two<\/span>\n<span style=\"color:#75715e\">\/\/ 3 = three<\/span>\n<span style=\"color:#75715e\">\/\/ 1 = one<\/span>\n<\/code><\/pre><\/div><p>As a dictionary is un-sorted, the order of the items may vary.<\/p>\n<p>If you want to loop through an array while also monitoring the index of each\nelement, you can use <code>enumerated()<\/code><\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> arrayOfNames = [ <span style=\"color:#e6db74\">&#34;Andy&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Buzz&#34;<\/span>, <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span> ]\n<span style=\"color:#66d9ef\">for<\/span> (index, element) <span style=\"color:#66d9ef\">in<\/span> arrayOfNames.enumerated() {\n  print(<span style=\"color:#e6db74\">&#34;The name at index <\/span><span style=\"color:#e6db74\">\\(<\/span>index<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\"> is <\/span><span style=\"color:#e6db74\">\\(<\/span>element<span style=\"color:#e6db74\">)<\/span><span style=\"color:#e6db74\">&#34;<\/span>)\n}\n<span style=\"color:#75715e\">\/\/ prints:<\/span>\n<span style=\"color:#75715e\">\/\/ The name at index 0 is Andy<\/span>\n<span style=\"color:#75715e\">\/\/ The name at index 1 is Buzz<\/span>\n<span style=\"color:#75715e\">\/\/ The name at index 2 is Woody<\/span>\n<\/code><\/pre><\/div><p>If your array contains optionals, you can use <code>for case let<\/code> to test each value:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> arrayWithOptionals: [String?] = [ <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>, <span style=\"color:#66d9ef\">nil<\/span>, <span style=\"color:#e6db74\">&#34;Buzz&#34;<\/span>, <span style=\"color:#66d9ef\">nil<\/span>, <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span> ]\n<span style=\"color:#66d9ef\">for<\/span> <span style=\"color:#66d9ef\">case<\/span> <span style=\"color:#66d9ef\">let<\/span> name? <span style=\"color:#66d9ef\">in<\/span> arrayWithOptionals {\n  printWithSpace(name)\n}\n<span style=\"color:#75715e\">\/\/ prints: Woody Buzz Rex<\/span>\n<\/code><\/pre><\/div><p>The <code>name<\/code> variable is un-wrapped each time through the loop so can be used\nsafely.<\/p>\n<p>Any of these loop styles can be combined with <code>where<\/code> to perform checks on each\niteration:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> arrayWithOptionals: [String?] = [ <span style=\"color:#e6db74\">&#34;Woody&#34;<\/span>, <span style=\"color:#66d9ef\">nil<\/span>, <span style=\"color:#e6db74\">&#34;Buzz&#34;<\/span>, <span style=\"color:#66d9ef\">nil<\/span>, <span style=\"color:#e6db74\">&#34;Rex&#34;<\/span> ]\n<span style=\"color:#66d9ef\">for<\/span> <span style=\"color:#66d9ef\">case<\/span> <span style=\"color:#66d9ef\">let<\/span> name? <span style=\"color:#66d9ef\">in<\/span> arrayWithOptionals <span style=\"color:#66d9ef\">where<\/span> name.count <span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">5<\/span> {\n  printWithSpace(name)\n}\n<span style=\"color:#75715e\">\/\/ prints: Buzz Rex<\/span>\n<\/code><\/pre><\/div><hr>\n<p>Some of you may be wondering what happened to the old C-style loops like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">for<\/span> <span style=\"color:#66d9ef\">var<\/span> x = <span style=\"color:#ae81ff\">0<\/span>; x <span style=\"color:#f92672\">&lt;<\/span> <span style=\"color:#ae81ff\">5<\/span>; x<span style=\"color:#f92672\">++<\/span> { print(x, terminator: <span style=\"color:#e6db74\">&#34; &#34;<\/span>) }\n<\/code><\/pre><\/div><p>This does not work in Swift 3+: the <code>++<\/code> and <code>--<\/code> operators and this style of\nloop declaration have been removed from the language. For further details, check\nout the relevant proposals at Swift Evolution:<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0007-remove-c-style-for-loops.md\">Remove C-style for-loops with conditions and incrementers<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/apple\/swift-evolution\/blob\/master\/proposals\/0004-remove-pre-post-inc-decrement.md\">Remove the ++ and &ndash; operators<\/a><\/li>\n<\/ul>\n<hr>\n<p>All the examples in this article are available in a <a href=\"https:\/\/github.com\/trozware\/for-loops\">Swift playground<\/a> now\nupdated to Swift 4 syntax.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/learning-swift-for-loops\/","date":479433600},{"title":"Learning Swift - Generics","content":"<p>One of the nice things about Swift is how clean your code looks. A lot of the\nweird characters that pepper the code of other languages has been eliminated: No\nmore semi-colons, asterisks etc.<\/p>\n<p>But then you are reading somebody else&rsquo;s code and you find these angle brackets\nall over the place and they don&rsquo;t seem to make sense.<\/p>\n<p>What does this mean?<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">mid<\/span>&lt;T: Comparable&gt;(array: [T]) -&gt; T\n<\/code><\/pre><\/div><p>It looks like it is a function to find the middle element in an array, but what\nis <code>&lt;T: Comparable&gt;<\/code> or <code>[T]<\/code> or even just <code>T<\/code>? They are describing Generic data\ntypes.<\/p>\n<p>Using the dictionary, I find the following definition for <code>generic<\/code>:<\/p>\n<blockquote>\n<p>characteristic of or relating to a class or group of things; not specific.<\/p>\n<\/blockquote>\n<p>And that really provides quite a good definition for Swift&rsquo;s generics too. They\nallow you to assign a non-specific data type to a function so that function can\nbe used for many different data types.<\/p>\n<hr>\n<p>But enough of the theory: by far the best way to understand generics is to\nencounter the problem they are meant to solve and then to solve it.<\/p>\n<p>The other day I was processing data to feed to a charting library. I ended up\nwith an array of CGFloats, but there were too many of them, so I wrote a\nfunction to give me the last x elements of an array of CGFloats:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">endOf<\/span>(array: [CGFloat], numberOfElementsToInclude: Int) -&gt; [CGFloat] {\n  <span style=\"color:#66d9ef\">if<\/span> numberOfElementsToInclude <span style=\"color:#f92672\">&gt;<\/span> array.count { <span style=\"color:#66d9ef\">return<\/span> array }\n\n  <span style=\"color:#66d9ef\">let<\/span> startingElement = array.count <span style=\"color:#f92672\">-<\/span> numberOfElementsToInclude\n  <span style=\"color:#66d9ef\">let<\/span> endOfArray = Array(array[startingElement ..<span style=\"color:#f92672\">&lt;<\/span> array.count])\n  <span style=\"color:#66d9ef\">return<\/span> endOfArray\n}\n\n<span style=\"color:#66d9ef\">let<\/span> largeArray: [CGFloat] = [<span style=\"color:#ae81ff\">1.0<\/span>, <span style=\"color:#ae81ff\">2.0<\/span>, <span style=\"color:#ae81ff\">3.0<\/span>, <span style=\"color:#ae81ff\">4.0<\/span>, <span style=\"color:#ae81ff\">5.0<\/span>, <span style=\"color:#ae81ff\">6.0<\/span>, <span style=\"color:#ae81ff\">7.0<\/span>, <span style=\"color:#ae81ff\">8.0<\/span>, <span style=\"color:#ae81ff\">9.0<\/span>, <span style=\"color:#ae81ff\">10.0<\/span>]\n<span style=\"color:#66d9ef\">let<\/span> smallArray = endOf(array: largeArray, numberOfElementsToInclude: <span style=\"color:#ae81ff\">3<\/span>)\n<span style=\"color:#75715e\">\/\/smallArray now equals [8.0, 9.0, 10.0]<\/span>\n<\/code><\/pre><\/div><p>OK, so <code>largeArray<\/code> isn&rsquo;t actually the largest array you have ever seen, but it\nworks for demo purposes. In my code, I had over 20,000 entries in the large\narray and only wanted the last 5,000.<\/p>\n<p>I was completely happy with that until I found another data source where the\ndata was an array of Ints. Still perfectly chartable using my charting library,\nbut I could not get the end of the array using my nice function. First thought\nwas to replicate the function:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">endOf<\/span>(array: [Int], numberOfElementsToInclude: Int) -&gt; [Int] {\n  <span style=\"color:#66d9ef\">if<\/span> numberOfElementsToInclude <span style=\"color:#f92672\">&gt;<\/span> array.count { <span style=\"color:#66d9ef\">return<\/span> array }\n\n  <span style=\"color:#66d9ef\">let<\/span> startingElement = array.count <span style=\"color:#f92672\">-<\/span> numberOfElementsToInclude\n  <span style=\"color:#66d9ef\">let<\/span> endOfArray = Array(array[startingElement ..<span style=\"color:#f92672\">&lt;<\/span> array.count])\n  <span style=\"color:#66d9ef\">return<\/span> endOfArray\n}\n\n<span style=\"color:#66d9ef\">let<\/span> largeArrayInt = [ <span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">3<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">6<\/span>, <span style=\"color:#ae81ff\">7<\/span>, <span style=\"color:#ae81ff\">8<\/span>, <span style=\"color:#ae81ff\">9<\/span>, <span style=\"color:#ae81ff\">10<\/span> ] <span style=\"color:#75715e\">\/\/ type inferred to be Int<\/span>\n<span style=\"color:#66d9ef\">let<\/span> smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: <span style=\"color:#ae81ff\">7<\/span>)\n<span style=\"color:#75715e\">\/\/ smallArrayInt now equals [4, 5, 6, 7, 8, 9, 10]<\/span>\n<\/code><\/pre><\/div><p>A quick glance will reveal that the declaration line was the only thing that\nchanged. I didn&rsquo;t have to give the function a new name because the compiler\nworked out which of the two functions to use based on the types supplied. So all\nI was doing was replacing <code>CGFloat<\/code> with <code>Int<\/code> in two places (the\n<code>numberOfElementsToInclude<\/code> parameter remains an <code>Int<\/code> in both cases).<\/p>\n<p><strong>As soon as you find yourself replicating code and only changing the types of\nthe data, that is a sign that you need to use generics.<\/strong><\/p>\n<p>For my first attempt at creating a generic function, all I did was replace the\nword <code>CGFloat<\/code> with <code>T<\/code> where <code>T<\/code> indicates some type that will be specified\nwhen the function is called. The convention is to use single letters for generic\ntypes: <code>T<\/code> for Type, <code>A<\/code> for AnyObject, <code>Z<\/code> because you feel like it. The choice\nis up to you.<\/p>\n<p>That produced this error:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Generics_error.png\" alt=\"Generics error\"><\/p>\n<p><code>Use of undeclared type 'T'<\/code>. Well that seems fair enough&hellip; how is the compiler\nsupposed to know what a <code>T<\/code> is?<\/p>\n<p>It turns out that this is where the angle brackets come into play. You have to\nwarn the compiler that this function is going to get a generic type and that the\n<code>T<\/code> is only a placeholder, not a real type. So this version compiles and works -\nnotice the <code>&lt;T&gt;<\/code> between the function name and the opening bracket:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">endOf<\/span>&lt;T&gt;(array: [T], numberOfElementsToInclude: Int) -&gt; [T] {\n  <span style=\"color:#66d9ef\">if<\/span> numberOfElementsToInclude <span style=\"color:#f92672\">&gt;<\/span> array.count { <span style=\"color:#66d9ef\">return<\/span> array }\n\n  <span style=\"color:#66d9ef\">let<\/span> startingElement = array.count <span style=\"color:#f92672\">-<\/span> numberOfElementsToInclude\n  <span style=\"color:#66d9ef\">let<\/span> endOfArray = Array(array[startingElement ..<span style=\"color:#f92672\">&lt;<\/span> array.count])\n  <span style=\"color:#66d9ef\">return<\/span> endOfArray\n}\n<\/code><\/pre><\/div><p>Now I have no code duplication and if I ever get another data set that uses a\ndifferent object type, my function will still work.<\/p>\n<hr>\n<p>Now we know to use generics instead of replicating code that operates in the\nsame way on different data types.<\/p>\n<p>And we know how to construct a generic function.<\/p>\n<p>Using it is identical to using the two functions I had before:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">let<\/span> largeArray: [CGFloat] = [ <span style=\"color:#ae81ff\">1.0<\/span>, <span style=\"color:#ae81ff\">2.0<\/span>, <span style=\"color:#ae81ff\">3.0<\/span>, <span style=\"color:#ae81ff\">4.0<\/span>, <span style=\"color:#ae81ff\">5.0<\/span>,<span style=\"color:#ae81ff\">6.0<\/span>, <span style=\"color:#ae81ff\">7.0<\/span>, <span style=\"color:#ae81ff\">8.0<\/span>, <span style=\"color:#ae81ff\">9.0<\/span>, <span style=\"color:#ae81ff\">10.0<\/span> ]\n<span style=\"color:#66d9ef\">let<\/span> smallArray = endOf(array: largeArray, numberOfElementsToInclude: <span style=\"color:#ae81ff\">3<\/span>)\n\n<span style=\"color:#66d9ef\">let<\/span> largeArrayInt = [ <span style=\"color:#ae81ff\">1<\/span>, <span style=\"color:#ae81ff\">2<\/span>, <span style=\"color:#ae81ff\">3<\/span>, <span style=\"color:#ae81ff\">4<\/span>, <span style=\"color:#ae81ff\">5<\/span>, <span style=\"color:#ae81ff\">6<\/span>, <span style=\"color:#ae81ff\">7<\/span>, <span style=\"color:#ae81ff\">8<\/span>, <span style=\"color:#ae81ff\">9<\/span>, <span style=\"color:#ae81ff\">10<\/span> ] <span style=\"color:#75715e\">\/\/ type inferred to be Int<\/span>\n<span style=\"color:#66d9ef\">let<\/span> smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: <span style=\"color:#ae81ff\">7<\/span>)\n<\/code><\/pre><\/div><p>You do not have to specify what <code>T<\/code> is when calling the function, that will be\ninferred from the supplied data.<\/p>\n<hr>\n<p>Moving on into more advanced use cases, we have two things to consider:<\/p>\n<ol>\n<li>Functions where the generic parameters must conform to a protocol.<\/li>\n<li>Functions that take generic parameters of different types.<\/li>\n<\/ol>\n<p>The example function I started with (not mine but I forget where I got it&hellip; If\nit is yours, thanks you very much) used:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">mid<\/span> &lt;T: Comparable&gt; (array: [T]) -&gt; T\n<\/code><\/pre><\/div><p>Instead of specifying the type as completely generic, it specified that it must\nconform to the Comparable protocol. This is because the function body used a\n<code>sort()<\/code> function so the generic function needed to be sure that the elements in\nthe array could be compared. This technique can also be used to restrict the\nparameter types to sub-classes of a certain class.<\/p>\n<p>For a function with more than one generic data type, you need to use more than\none placeholder letter:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">genericWithTwoDifferentTypes<\/span>&lt;T, U&gt;(param1: T, param2: U) -&gt; Bool {\n  <span style=\"color:#75715e\">\/\/ ...<\/span>\n}\n<\/code><\/pre><\/div><p>And in exactly the same way, both <code>T<\/code> and <code>U<\/code> can be set to conform to a\nprotocol or be members of a certain super-class.<\/p>\n<hr>\n<p>Hopefully this has taken some of the mystery out of generics, but if you have\nany questions, please get in touch using the <a href=\"https:\/\/troz.net\/contact\/\">Contact page<\/a>, comment below or\ncontact me via Twitter: <a href=\"https:\/\/twitter.com\/trozware\">@trozware<\/a>.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/learning-swift-generics\/","date":478396800},{"title":"Singleton to Protocol","content":"<p>I was driving through the town of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Singleton,_New_South_Wales\">Singleton<\/a> the other day and of course, it\ngot me thinking about using singletons in my apps. Singletons were a commonly\nused pattern in Objective-C programming and appear in many of Apple&rsquo;s own APIs,\nbut seem to be increasingly frowned upon in the Swift world.<\/p>\n<h2 id=\"so-what-is-a-singleton\">So what is a singleton?<\/h2>\n<p>A singleton is a class that only expects to have a single instance. Think of it\nas a global instance of a class. In some cases this makes perfect sense if there\ncan only ever be one instance of a particular class or if there is a default\nvariant that suits most cases e.g.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">UIApplication.shared\nUserDefaults.standard\nNotificationCenter.<span style=\"color:#66d9ef\">default<\/span>\nFileManager.<span style=\"color:#66d9ef\">default<\/span>\nURLSession.shared\n<\/code><\/pre><\/div><p>If you are using an object with a property name of &ldquo;shared&rdquo;, &ldquo;standard&rdquo; or\n&ldquo;default&rdquo; you can be pretty sure it is an singleton.<\/p>\n<h2 id=\"and-whats-the-problem-with-singletons\">And what&rsquo;s the problem with singletons?<\/h2>\n<p>There are probably many different opinions here but I have two thoughts about\nthis:<\/p>\n<ol>\n<li>They are effectively global variables and global variables can make your code\nmessy and un-predictable.<\/li>\n<li>If they can be accessed by multiple other objects, possibly at the same time,\nthen you can get conflicts. These can be handled by clever use of background\nqueues, but it isn&rsquo;t easy.<\/li>\n<\/ol>\n<h2 id=\"what-to-use-instead\">What to use instead?<\/h2>\n<p>As I drove, I mused on a singleton that I had implemented recently. It was a\nlogging utility that allowed any object in my app (mostly view controllers) to\nsave a new entry to a log file. The basic structure of the Logger class was\nthis:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">Logger<\/span> {\n    <span style=\"color:#66d9ef\">static<\/span> <span style=\"color:#66d9ef\">let<\/span> sharedLogger = Logger()\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">addToLog<\/span>(event: String) {\n      <span style=\"color:#75715e\">\/\/ use private functions to find log file URL<\/span>\n      <span style=\"color:#75715e\">\/\/ append event text with time stamp<\/span>\n    }\n\n}\n<\/code><\/pre><\/div><p>Any object in my app could use the Logger like this:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\">Logger.sharedLogger.addToLog(event: newLogEvent)\n<\/code><\/pre><\/div><p>When I got to think about how I was using this, I realised that instead of a\nLogger <em>object<\/em> that everything could use, what I really needed was a Loggable\n<em>behaviour<\/em> that I could apply &amp; restrict to the few classes that actually\nneeded to log events. For me, this was the break-through:<\/p>\n<blockquote>\n<p><strong>Create a behaviour, not an object.<\/strong><\/p>\n<\/blockquote>\n<p>As soon as I started thinking about this as a behaviour, a protocol became the\nobvious solution, so this is what I created:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">protocol<\/span> <span style=\"color:#a6e22e\">Loggable<\/span> {\n  <span style=\"color:#75715e\">\/\/ not declaring functions here<\/span>\n  <span style=\"color:#75715e\">\/\/ as they should NOT be over-written<\/span>\n}\n\n<span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">Loggable<\/span> {\n\n    <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">addToLog<\/span>(event: String) {\n      <span style=\"color:#75715e\">\/\/ use private functions to find log file URL<\/span>\n      <span style=\"color:#75715e\">\/\/ append event text with time stamp<\/span>\n    }\n\n}\n<\/code><\/pre><\/div><p>We run immediately into one of the peculiarities of Swift protocol extensions\nwhich has been very well explained by <a href=\"https:\/\/cjwirth.com\/tech\/swift-protocol-extension-weirdness\">Caesar Wirth<\/a>. If I had declared\n<code>addToLog(_:)<\/code> in the protocol, then any class or struct conforming to this\nprotocol would have been free to over-write this function and provide its own\nversion. This is not what I wanted here - I wanted every object to use the same\nversion. So I left the function declaration out of the protocol definition and\nonly included it in the protocol extension.<\/p>\n<p>To use this behaviour, a class or struct just has to be declared as conforming\nto the Loggable protocol:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">class<\/span> <span style=\"color:#a6e22e\">MyClass<\/span>: Loggable {\n  <span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">doSomething<\/span>() {\n    addToLog(event: <span style=\"color:#e6db74\">&#34;I did something!&#34;<\/span>)\n  }\n}\n<\/code><\/pre><\/div><p>For my app, I knew that I would want all my NSViewControllers to be able to add\nlog events, so instead of setting them all individually as conforming to the\nprotocol, I used this shortcut which extends all NSViewControllers to conform to\nthe protocol.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">extension<\/span> <span style=\"color:#a6e22e\">NSViewController<\/span>: Loggable {}\n<\/code><\/pre><\/div><p>I added this line to the Loggable.swift file where I declared the protocol and\nits extension, but outside both of them.<\/p>\n<hr>\n<p>Protocol-oriented programming is a new technique to me, so it really helps when\nI can find a practical example of where it solves a problem.<\/p>\n<p>If you are new to POP, I highly recommend the <a href=\"https:\/\/developer.apple.com\/videos\/play\/wwdc2015\/408\/\">Crusty talk<\/a> from WWDC 2015.\nAnd this article by <a href=\"http:\/\/matthijshollemans.com\/2015\/07\/22\/mixins-and-traits-in-swift-2\/\">Matthijs Hollemans<\/a> was invaluable to me in\ndemonstrating the problems with object inheritance that are solved by protocols.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/singleton-to-protocol\/","date":478137600},{"title":"Three Rules for Writing Better Swift","content":"<ol>\n<li>Do not use !.<\/li>\n<li>Use let, not var.<\/li>\n<li>Allow the compiler to infer types.<\/li>\n<\/ol>\n<p>Read on for more details&hellip;<\/p>\n<h2 id=\"1-do-not-use-\">1. Do not use !<\/h2>\n<p>Swift uses optionals for values that can be nil. To use an optional value, you\nneed to &ldquo;un-wrap&rdquo; it first, which means getting the actual value out, assuming\nthat the value exists and the optional is not actually nil.<\/p>\n<p><a href=\"https:\/\/troz.net\/post\/2016-02-12-learning-swift-optionals\/\">Optionals<\/a> are the subject of a complete post by themselves, but for now, I\nwill just say this: When you use ! you are <strong>promising<\/strong> the compiler that you\nwill make sure there is a real value in that optional by the time it is needed.<\/p>\n<p>If this is not the case, your app will crash as shown in this playground:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Playground2.png\" alt=\"Playground crash\"><\/p>\n<p>Instead of using ! you should use optional chaining with ? or check the value\nwith <code>guard<\/code> or <code>if let<\/code> before use.<\/p>\n<p>One trap to beware of is with Xcode&rsquo;s attempts to be helpful and suggest fixes\nto problems. If you use an optional where it cannot work, Xcode will warn you\nthat it is incorrect, but the suggested fix will be to insert !<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/optional_fix.png\" alt=\"Optional fix\"><\/p>\n<p>When you see this, do not accept the suggested fix, but use it as a warning to\nshow that you need to fix the problem properly.<\/p>\n<hr>\n<h2 id=\"2-use-let-not-var\">2. Use let, not var<\/h2>\n<p>Using constants in C-based languages is a pain. I could never remember the\nObjective-C syntax for declaring a static constant, so used to fall back to\nusing <code>#define<\/code> for global constants. Inside my objects, all instance properties\nwere variables, not constants. Inside functions, it was the same.<\/p>\n<p>It doesn&rsquo;t take much imagination to work out that your apps will perform better\nand more securely if values that do not need to change are allocated as\nconstants instead of variables.<\/p>\n<p>With Swift, this is easy as you just declare a constant using the <code>let<\/code> keyword\nand declare variables using <code>var<\/code>. The Swift compiler will now warn you if you\nhave used <code>var<\/code> where <code>let<\/code> would do, but I prefer to declare everything using\n<code>let<\/code> and only change to <code>var<\/code> when this causes an error as shown in this\nplayground example:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Playground3.png\" alt=\"Playground let error\"><\/p>\n<hr>\n<h2 id=\"3-allow-the-compiler-to-infer-types\">3. Allow the compiler to infer types<\/h2>\n<p>With Objective-C and many other languages, you have to tell the compiler exactly\nwhat each variable is going to be: a string, an integer, an object of a certain\ntype.<\/p>\n<p>With Swift, the compiler is clever enough to work this out for you, which can\nmake your code much cleaner looking and easy to read.<\/p>\n<p>There are a few exceptions to this rule which are shown in the playground below:<\/p>\n<p>Lines 3 - 6 are allowing the Swift compiler to decide what the type is and it is\nchoosing valid types: Int, Double, String and UIView.<\/p>\n<p>Line 8 is a case where we do not want the default type, which would be Double so\nwe need to tell the compiler that this one really should be a CGFloat.<\/p>\n<p>Lines 10 &amp; 11 both deal with an array of Ints. In line 10, the values are\nsupplied so the type of the array can be inferred. In the second case, the array\nis initially empty, so the type needs to be specified in the declaration.<\/p>\n<p>Lines 13 and 14 are the same but with dictionaries instead of arrays.<\/p>\n<p>In each case, it would have been valid Swift to specify the type but why bother?\nThe more text you enter , the more change of mistake and it leaves your code\nlooking cluttered.<\/p>\n<p>If you ever need to check what type has been assigned to a constant or variable,\nOption-click on it in Xcode and you willl get a popup telling you what it is.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Playground4.png\" alt=\"Playground types\"><\/p>\n<hr>\n<p>This was going to be five rules, but then I got a bit too verbose so will add\nmore rules in a separate post.<\/p>","url":"https:\/\/troz.net\/post\/2016\/three-rules-for-writing-better-swift\/","date":477964800},{"title":"Configuring Xcode","content":"<p>While not strictly a part of my Learning Swift series, today I thought I would\ndiscuss some of the ways to configure and use Xcode to be a more productive and\ncomfortable programmer.<\/p>\n<h2 id=\"1-editor-color-themes-and-fonts\">1. Editor color themes and fonts:<\/h2>\n<p><img src=\"https:\/\/troz.net\/images\/XcodeFontPrefs.png\" alt=\"Editor\"><\/p>\n<p>Step through the supplied themes and find the best one for you. Then click the\n&lsquo;+&rsquo; button at the bottom of the list and duplicate the selected theme. Now you\ncan tweak it to suit you. Each text category can have its own font and size, but\nyou can make multiple selections in order to do a bulk change. don&rsquo;t forget to\ncheck out the Console section too - I dislike the default bold text for many of\nthe console reports, so always change that.<\/p>\n<p>An editing font should be mono-spaced i.e. every character should take up\nexactly the same width on the screen. This makes your code look neater and\nneater code is easier to read when you come back to it. I also much prefer a\nsans-serif font, but that is a matter of preference.<\/p>\n<p>Menlo is the font used by Xcode as a default, but there are many other options\neither in the default installation of OS X or as free downloads. I change every\nnow and then just to keep things interesting, but my current selection is <a href=\"https:\/\/github.com\/tonsky\/FiraCode\">Fira\nCode<\/a>. I love the way it merges two character symbols into a single\ncharacter for faster comprehension.<\/p>\n<p>My other favourites are:<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/adobe-fonts\/source-code-pro\">Source Code Pro<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/chrissimpkins\/hack\">Hack<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/mozilla\/Fira\">Fira<\/a><\/li>\n<li><a href=\"http:\/\/www.fontsquirrel.com\/fonts\/Inconsolata\">Inconsolata<\/a><\/li>\n<\/ul>\n<p>Look for a font that makes it easy to distinguish the digit &lsquo;1&rsquo; from a lowercase\n&lsquo;l&rsquo; and where the digit &lsquo;0&rsquo; is different to the &lsquo;O&rsquo;.<\/p>\n<p>To install and use a new font, download the files and then double-click a TTF or\nOTF font file to install it in FontBook. Once the font is installed, you may\nneed to restart Xcode in order to make it available.<\/p>\n<hr>\n<h2 id=\"2-add-ons\">2. Add-ons:<\/h2>\n<p><strong>Update:<\/strong> Xcode 8 has removed the ability to run any plugins or to use\nAlcatraz, so this sectrion is no longer valid. Instead Apple is offering offical\nsupport for Xcode Source Editor Extensions, so they are the way of the future.<\/p>\n<hr>\n<h2 id=\"3-documentation\">3. Documentation:<\/h2>\n<p>Xcode has excellent documentation, but unless you specifically download it, this\nwill all be accessed online. If you have a bad or non-existent connection, this\ncan be annoying. Go to Xcode&rsquo;s Preferences -&gt; Downloads and download all the\ndocument sets you are interested in. They are quite large, but having them local\nwill be a big bonus.<\/p>\n<p>The other tool I use for documentation is <a href=\"https:\/\/kapeli.com\/dash\">Dash<\/a>. It supports many languages\nand is not just for use in Xcode. I found the Xcode integration plugin was not\nvery useful as it conflicted with other useful behaviours. So I set up a global\nshortcut in System Preferences to search Dash for the selected text. This is\nmuch faster than Xcode&rsquo;s built-in documentation.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Dash.png\" alt=\"Dash\"><\/p>\n<hr>\n<h2 id=\"4-other-preferences\">4. Other preferences:<\/h2>\n<p>Go through the preference panes in Xcode&rsquo;s preferences and tweak to suit your\nstyle or your group&rsquo;s preferred style.<\/p>\n<p>General and Text Editing are important. Text Editing has a second tab for\nIndentation which is easy to miss. Indentation styles seem to cause a lot of\nheated debate, so make sure you check this out.<\/p>\n<p>Accounts is vital if you are publishing to the App Stores and also makes it easy\nto transfer all your develop information from one computer to another.<\/p>\n<p>Fonts &amp; Colors and Downloads are discussed above.<\/p>\n<p>I tend to leave the others set to the defaults.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/configuring-xcode\/","date":477360000},{"title":"How do I start to learn Swift?","content":"<p>The first thing to do is to download the latest version of Apple&rsquo;s <a href=\"https:\/\/itunes.apple.com\/book\/swift-programming-language\/id881256329\">Swift\nProgramming Language book<\/a> from the iBooks Store.<\/p>\n<p>You can just read this book, especially the first section: &ldquo;A Swift Tour&rdquo;, but\nyou will get more out of it if you follow along with the playground. There is a\nlink to download the playground from the book which you can use directly if you\nare reading using iBooks on the Mac. If you are not, here is the <a href=\"https:\/\/developer.apple.com\/go\/?id=swift-tour\">download\nlink<\/a>.<\/p>\n<p>You will also need to install <a href=\"https:\/\/itunes.apple.com\/app\/xcode\/id497799835\">Xcode<\/a> from the Mac App Store. Xcode is\nApple&rsquo;s IDE and is used for programming Mac, iPhones, iPads, Apple Watches and\nApple TVs.<\/p>\n<p>Swift introduced the playground to Xcode. A playground is a fantastic way to\nlearn and experiment. You do not need to create a project, build, run a separate\napp, install on a device. Code typed into a playground is run immediately and\nyou can see the results instantly, line by line.<\/p>\n<p>Here is an example of a playground showing the code on the left and the result\nof each line appearing on the right.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Playground1.png\" alt=\"Playground\"><\/p>\n<hr>\n<p>Once you have gone through the Swift Tour, Apple&rsquo;s book becomes more of a\nreference guide to return to whenever you get stuck. The other way I use it is\nto check up on changes made when a new version of Swift is released. As the\nlanguage is still rapidly evolving, these can be quite extensive. Once I have\nthe latest version of the book, I go to the Revision History at the back and\nclick the links to read about the features that have been added or changed.<\/p>\n<hr>\n<p>Apart from Apple&rsquo;s documentation, there are a lot of great web sites, blogs and\nTwitter accounts out there. There are also useful newsletters that give a weekly\nsummary of exciting developments.<\/p>\n<p>Here are some of my favourites:<\/p>\n<ul>\n<li><a href=\"https:\/\/www.natashatherobot.com\">Natasha the Robot<\/a> - my favourite Swift blogger - sign up for her\nnewsletter and follow her on Twitter.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/swift\/blog\/\">Apple&rsquo;s Swift Blog<\/a> - not many posts, but good for learning about new\nfeatures.<\/li>\n<li><a href=\"http:\/\/ericasadun.com\">Erica Sadun<\/a> - sometimes a bit too technical for me, but often contains\nsome really useful snippets. Erica has the distinction of being the first\nperson outside Apple to have had a Swift language proposal accepted as part of\nthe open source development process.<\/li>\n<li><a href=\"http:\/\/andybargh.com\">Andy Bargh<\/a> - detailed articles on various aspects of Swift, plus a\nweekly newsletter.<\/li>\n<li><a href=\"http:\/\/www.raywenderlich.com\">Ray Wenderlich tutorials<\/a> - search for Swift and find heaps of tutorials\ncovering many different aspects.<\/li>\n<li><a href=\"http:\/\/swiftsandbox.io\">Swift Sandbox<\/a> - weekly newsletter filled with interesting articles.<\/li>\n<li><a href=\"http:\/\/swiftmonthly.com\">SwiftMonthly<\/a> - useful newsletter with links to tutorials, videos and\nprojects.<\/li>\n<li><a href=\"http:\/\/swiftdoc.org\">SwiftDoc.org<\/a> - the documentation in Xcode is still heavily skewed\ntowards Objective-C programmers and it can be difficult to find Swift-specific\nentries. This site makes it easy.<\/li>\n<\/ul>\n<p>And I hope you will keep coming back to this site to see what new Swift-related\narticles are available.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/how-do-i-start-to-learn-swift\/","date":477273600},{"title":"Icon Builder 3.2 Released","content":"<p><a href=\"http:\/\/itunes.apple.com\/app\/icon-builder\/id552293482\">Icon Builder 3.2<\/a> is now available from the Mac App Store.<\/p>\n<ul>\n<li>Icons for Apple Watch apps now have their alpha channel removed.<\/li>\n<li>Tidier folder structure for related files (iTunes Artwork files and Read Me).<\/li>\n<li>Updated to work with Xcode 7&rsquo;s Assets.xcassets folders.<\/li>\n<li>Creates iPad Pro icons for Xcode 7.2 or later.<\/li>\n<li>Fix for Retina Macs creating double-sized images.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2016\/icon-builder-32-released\/","date":476755200},{"title":"Why is Swift so great?","content":"<p>Firstly, I can give you the technical answer, as published by Apple:<\/p>\n<blockquote>\n<p>Swift is a new programming language for iOS, OS X, watchOS, and tvOS apps that\nbuilds on the best of C and Objective-C, without the constraints of C\ncompatibility. Swift adopts safe programming patterns and adds modern features\nto make programming easier, more flexible, and more fun. Swift’s clean slate,\nbacked by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an\nopportunity to reimagine how software development works.<!-- raw HTML omitted --><!-- raw HTML omitted --> Swift has\nbeen years in the making. Apple laid the foundation for Swift by advancing our\nexisting compiler, debugger, and framework infrastructure. We simplified\nmemory management with Automatic Reference Counting (ARC). Our framework\nstack, built on the solid base of Foundation and Cocoa, has been modernized\nand standardized throughout. Objective-C itself has evolved to support blocks,\ncollection literals, and modules, enabling framework adoption of modern\nlanguage technologies without disruption. Thanks to this groundwork, we can\nnow introduce a new language for the future of Apple software development.”<\/p>\n<\/blockquote>\n<p>Excerpt From: Apple Inc. “<a href=\"https:\/\/itunes.apple.com\/book\/swift-programming-language\/id881256329\">The Swift Programming Language (Swift 2.1)<\/a>.”<\/p>\n<hr>\n<h2 id=\"now-i-can-give-you-my-opinion\">Now I can give you my opinion:<\/h2>\n<ul>\n<li>Swift makes for code that is easier &amp; faster to write.<\/li>\n<li>Swift makes for code that is easier &amp; cleaner to read (much more important\nthan ease of writing).<\/li>\n<li>Swift code is safer code.<\/li>\n<li>Swift breaks free from the out-dated conventions of C-based languages.<\/li>\n<\/ul>\n<hr>\n<p>When Apple announced Swift at WWDC 2105, I was astounded. That such a major\nevent could have been kept completely secret was amazing. Then I watched every\nvideo from WWDC 2015 that discussed Swift. Some were beyond me and others I\nabsorbed. Looking back, I can see that the development of Objective-C over the\npast few years was all aimed at getting to this point, especially with the\nintroduction of ARC and blocks.<\/p>\n<p>At that time, I was deeply involved in an existing Objective-C project and not\nable to do much in Swift. But I went through the introduction at the start of\nthe <a href=\"https:\/\/itunes.apple.com\/book\/swift-programming-language\/id881256329\">Swift Programming Language<\/a> book in iBooks and was able to get some\nideas about how the language worked.<\/p>\n<p>Some months later, I was able to spend time on Swift. As a learning exercise, I\nconverted an existing Objective-C iOS app to Swift. As might be expected, I\nreally just wrote Objective-C code using Swift syntax. It took a lot more\nlearning before I was able to write Swift-y code instead of just translated\nObjective-C. In future posts of this series, I hope to enable others to cross\nthat divide faster than I did.<\/p>\n<p>Now when I go back to an Objective-C app, I feel like I am walking a tight-rope.\nWhen I use an NSArray, NSSet or NSDictionary, I think &ldquo;How can I tell what sort\nof objects are in that array?&rdquo;. When I use an object, I think &ldquo;What if that\nobject is nil?&rdquo;. All of a sudden, code that appeared stable now feels random.<\/p>\n<hr>\n<p>One of the big things that people have latched onto with Swift is that it allows\nfunctional programming. I plan several detailed posts on functional programming\nin this series. But for now I would just recommend that you not worry about the\ndistinction between procedural &amp; functional programming. Both have their\nadvocates and their detractors. Both have their advantages and disadvantages.\nJust do what ever works for you and we can worry about this later.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/why-is-swift-so-great\/","date":476755200},{"title":"Learning Swift - An Introduction","content":"<h2 id=\"welcome-to-learning-swift\">Welcome to Learning Swift.<\/h2>\n<p>This is the first post in what I hope will be an extensive series dealing with\nthe Swift language. Here are some of the questions I hope to answer:<\/p>\n<ul>\n<li>Should I learn Swift? Why?<\/li>\n<li>Why is Swift so great?<\/li>\n<li>How should I start learning Swift?<\/li>\n<li>I already know Objective-C - how do I convert?<\/li>\n<\/ul>\n<p>After that, I am planning a series of posts discussing the major differences of\nSwift from the view point of an Objective-C programmer and the aspects of Swift\nthat I found difficult to grasp. Topics covered will include such things:<\/p>\n<ul>\n<li>optionals<\/li>\n<li>closures<\/li>\n<li>functional programming<\/li>\n<li>protocols<\/li>\n<li>generics<\/li>\n<\/ul>\n<p>I am coming from a background of Objective-C, so many of my posts will be\ndealing with aspects of Swift that are not familiar to Objective-C programmers.\nI will not assume any Objective-C programming experience, but some features of\nSwift that are new to me, will be familiar to people accustomed to other\nlanguages.<\/p>\n<hr>\n<p>So let&rsquo;s start by answering the first question:<\/p>\n<h2 id=\"should-i-learn-swift\">Should I learn Swift?<\/h2>\n<p>If you are writing or planning apps for any Apple platform - YES.<!-- raw HTML omitted --> If not,\nwait until Swift is available for the platforms you need to support.<\/p>\n<hr>\n<h2 id=\"why\">Why?<\/h2>\n<h3 id=\"if-you-are-already-an-ios-or-mac-developer-yes\">If you are already an iOS or Mac developer: YES<\/h3>\n<p>This is the new language and Apple is very committed to it. Objective-C is not\ngoing away any time soon, but Swift is where it is going to end up, so why not\nmake the jump now while the language is still in development? You have to accept\nthat fact that every release of Xcode is going to break your code, but the\nautomatic re-factoring works very well. And by moving to Swift now, you get the\nchance to influence the direction of a new language. How often does that happen?<\/p>\n<hr>\n<h3 id=\"if-you-are-starting-to-learn-ios-or-mac-development-yes\">If you are starting to learn iOS or Mac development: YES<\/h3>\n<p>If you have no history with Objective-C, then do not waste your time learning\nit. There is still a lot of sample code out there in Objective-C, but increasing\nnumbers of tutorial sites are using Swift and converting their existing\ntutorials to Swift. It will help if you know just enough Objective-C to read it,\nbut you do not need to know enough to write it.<\/p>\n<hr>\n<h3 id=\"if-you-do-not-program-for-mac-or-ios-not-yet\">If you do NOT program for Mac or iOS: NOT YET<\/h3>\n<p>Swift went open source in late 2015. This is a big deal and Apple&rsquo;s plans for\nSwift are quite clear. They want Swift to be such a main-stream language that it\nis used instead of Java for basic computer science courses in universities. This\nwas never going to happen unless the language was open-source and\ncross-platform. It is now open-source and available for <a href=\"https:\/\/swift.org\/download\/#latest-development-snapshots\">Linux as well as\nMac\/iOS<\/a>. While Apple has not yet released any further ports, I think there\nare more on the way for Raspberry Pi, Arduino and other embedded systems as well\nas server-side Swift libraries like <a href=\"http:\/\/perfect.org\">Perfect<\/a>. I expect that a version for\nWindows will not be far behind.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/learning-swift-an-introduction\/","date":476668800},{"title":"New Twitter account","content":"<p>I have started a new Twitter account so that I can provide rapid support to\nusers of my apps. Please contact me <a href=\"https:\/\/twitter.com\/trozware\">@trozware<\/a> if you have any questions,\nsuggestions, bug reports or would just like to chat.<\/p>\n<p>I will also be using this account to promote my new <a href=\"https:\/\/troz.net\/post\/2016-02-09-learning-swift-an-introduction\/\">Learning Swift<\/a> series.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/new-twitter-account\/","date":476668800},{"title":"Possible issues with Icon Builder & Watch icons","content":"<p>It has come to my attention that there are two possible issues with Icon Builder\n3.0.1 when using icons created for an Apple Watch app. Once of them is something\nI can fix and the other appears to be a bug in Xcode 7.2<\/p>\n<hr>\n<p><strong>Update:<\/strong> Version 3.2 of Icon Builder is now available in the <a href=\"http:\/\/itunes.apple.com\/app\/icon-builder\/id552293482\">Mac App\nStore<\/a>. This removes the alpha channel from icons for a watch app.<\/p>\n<hr>\n<p>The first problem is that iTines Connect now requires that the icons for an\nApple Watch app include no alpha channel. This is becoming an increasing trend\nwith it first having applied to the large icon file you upload directly to\niTunes Connect, then to screen shots. I expect it to extend to iOS app icons\nsoon, but hopefully Mac app icons can continue to include transparency.<\/p>\n<p>With Apple Watch icons, you are supposed to create a set of square icons and\nwatchOS or iTunesConnect applies the rounding mask. Presumably this is more\ncomplicated if the icon contains an alpha channel even if there are no\ntransparent pixels. If your Watch app icons contain an alpha channel, you will\nsee errors like this after uploading your app to iTunes Connect:<\/p>\n<blockquote>\n<p>Invalid Icon - The watch application &lsquo;AppName.app\/Watch\/AppName WatchKit\nApp.app&rsquo; contains an icon file &lsquo;AppName.app\/Watch\/AppName WatchKit\n<a href=\"mailto:App.app\/AppIcon-Watch24x24@2x.png\">App.app\/AppIcon-Watch24x24@2x.png<\/a>&rsquo; with an alpha channel. Icons should not\nhave an alpha channel.<\/p>\n<\/blockquote>\n<p>You will probably get this error message for every icon size in the Watch app (8\nin total). Until I release a new version of Icon Builder that allows for this\nthis, I suggest you use this <a href=\"https:\/\/www.cocoacontrols.com\/controls\/alpha-channel-remover\">Alpha Channel Remover app<\/a>.<\/p>\n<p>In your Xcode project, go to WatchKit App Assets.xcassets, select the AppIcon\nset, right-click and choose &ldquo;Show in Finder&rdquo;. A folder will open containing\neight .png files and one .json file. Drag &amp; drop the .png files into the Alpha\nChannel Remover window and click the &ldquo;Remove Alpha Channel&rdquo; button. This will\nreplace all those image files with new versions without alpha channels. To\nconfirm this, select any of the images and press Command-I to get info. In the\nMore Info section, you will see &ldquo;Alpha channel: No&rdquo;.<\/p>\n<p>You can now submit your app again, but that only solves one of the issues.<\/p>\n<hr>\n<p>The other problem is that you will get a warning about the <a href=\"mailto:44x44@2x.png\">44x44@2x.png<\/a> icon\nfile.<\/p>\n<blockquote>\n<p>Invalid Icon Name - The watch application &lsquo;AppName.app\/Watch\/AppName WatchKit\nApp.app&rsquo; contains an invalid icon file name &lsquo;AppName.app\/Watch\/AppName\nWatchKit <a href=\"mailto:App.app\/AppIcon-Watch44x44@2x.png\">App.app\/AppIcon-Watch44x44@2x.png<\/a>&rsquo;. Make sure that icon file names\nfollow the pattern<!-- raw HTML omitted --> &ldquo;<code>*&lt;dimension&gt;@&lt;scale&gt;x.png<\/code>&rdquo; and they match the\nrequired dimensions. Please visit <a href=\"https:\/\/developer.apple.com\/watchkit\/\">https:\/\/developer.apple.com\/watchkit\/<\/a> for\nmore information.<\/p>\n<\/blockquote>\n<p>As you can see in the error message, the icon name (which is set by Xcode) does\nconform to the required pattern, and the image is the correct size. This appears\nto be a <a href=\"http:\/\/www.openradar.me\/23801324\">bug in Xcode 7.2<\/a> but does not stop you from submitting your app as\nit is only a warning and not an error. Presumably this will be fixed in later\nversion of Xcode. I am running Xcode 7.2.1 and still see this warning.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/possible-issues-with-iconbuilder\/","date":476409600},{"title":"Man Reader 1.5","content":"<p>Man Reader has been updated to version 1.5 with a major improvement in the way\nit looks for available man pages.<\/p>\n<p><a href=\"https:\/\/troz.net\/manreader\/\">Man Reader 1.5<\/a> is now available through the <a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Mac App Store<\/a>.<\/p>\n<h3 id=\"change-log\">Change Log:<\/h3>\n<ul>\n<li>Much improved searching for available man pages.<\/li>\n<li>Sand-boxed version now works just as well as the non-sand-boxed.<\/li>\n<\/ul>\n<p>The main feature of this version is that it solves the previous problems with\nthe App Store version and sand-boxing. This was restricting the number of man\npages listed in Man Reader so I had to release a non-sand-boxed version of the\napp to allow for full functionality.<\/p>\n<p>However I discovered that although this gave better results, it was still\nmissing a lot of man pages. Version 1.5 now queries the man page files in a\ncompletely different way which is listing many more man pages.<\/p>\n<p>If you previously had downloaded the Man Reader (no SB) version of the app from\nthis site, please revert to the App Store version which you would have needed to\nhave bought in order to use the downloaded app. If you bought the app from\nPaddle, <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\">contact me<\/a> and I will transfer you to the App Store version.\nNeither of these other versions will be supported or updated any more.<\/p>\n","url":"https:\/\/troz.net\/post\/2016\/man-reader-1.5\/","date":475891200},{"title":"Using 19th Hole on the Apple Watch","content":"<p>19th Hole for iPhone and Apple Watch version 3 is now available through the\n<a href=\"https:\/\/itunes.apple.com\/us\/app\/the-19th-hole\/id871686159?mt=8&amp;uo=4\">iTunes App Store<\/a>. This version is a complete re-write to accommodate the\nchanges in iOS 9 and watchOS2.<\/p>\n<p>The major changes are to do with the way the iPhone and the Watch communicate.\nIn watchOS1, all the brains of the app had to live in the iPhone, meaning that\nevery single interaction on the Watch had to be referred back to the iPhone for\nprocessing and the result sent back to the Watch for display. This lead to\ncommunications delays and breakdowns which caused third-party apps to work\nsluggishly or not at all. In watchOS2, the brains of the watch part of the app\ncan now operate inside the watch, greatly reducing the number of communications\nneeded. As well as that, Apple has now provided us with multiple ways of getting\ndata to and from the Watch which again improves performance and reliability.<\/p>\n<hr>\n<p>With the 19th Hole, I made the decision to change the method of inputting\nscores. The previous version used a slider with plus and minus buttons to adjust\nscores. The problems with this were the small target area of the plus &amp; minus\nbuttons as well as the fact that a slider with more than about 3 divisions was\nnot useful as a visual indicator.<\/p>\n<p>When watchOS2 allowed developers access to the digital crown, I decided to\nswitch to using that instead. Now you tap the score box of the player you wish\nto adjust and use the digital crown to select a number. I think this will be\neasier to use while wearing a glove and hope that it is still easy to read out\ndoors.<\/p>\n<hr>\n<p>The other suggestion is not to do with watchOS2 but is a general tip for using\napps of this kind. By default, the Apple Watch will always show the watch face\nwhen you raise your wrist. Normally this is the most useful thing, but when\nscoring a round of golf, it would be easier if The 19th Hole app stayed at the\nfront. To make this happen, you need to set to watch to show the last used app\ninstead of the watch face. This can be set using the Apple Watch app on the\nphone or on the watch itself.<\/p>\n<p>On the phone:<\/p>\n<ul>\n<li>Open the Apple Watch app.<\/li>\n<li>Select My Watch from the tabs at the bottom.<\/li>\n<li>Tap &ldquo;General&rdquo; and then scroll down to tap &ldquo;Wake Screen&rdquo;.<\/li>\n<li>Make sure &ldquo;Resume Last Activity&rdquo; is checked.<\/li>\n<\/ul>\n<p>On the watch:<\/p>\n<ul>\n<li>Press the digital crown to see the app icons.<\/li>\n<li>Find and tap the Settings icon.<\/li>\n<li>Scroll down and tap &ldquo;General&rdquo;.<\/li>\n<li>Tap &ldquo;Wake Screen&rdquo; and scroll down to make sure that &ldquo;Previous Activity&rdquo; is\nchecked in the &ldquo;Resume To&rdquo; section.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2015\/using-19th-hole-on-the-apple-watch\/","date":471571200},{"title":"Dice Pass for Mac","content":"<p>We live in a world of passwords and passphrases and there is a constant struggle\nbetween having a secure and a memorable password. As a result, many of us re-use\npasswords even though we know this is a bad idea.<\/p>\n<p><a href=\"https:\/\/xkcd.com\/936\/\">XKCD<\/a> had a wonderful comic that illustrated the theory of using a\npassphrase composed of words that are easy to remember but with a combination\nthat made the passphrase very hard to guess. However even when deciding to use a\npassphrase like this, it is not easy for us humans to avoid using words that\nhave meaning for us, particularly when it is something we really need to\nremember.<\/p>\n<p><a href=\"http:\/\/world.std.com\/~reinhold\/diceware.html\">Diceware<\/a> was developed to solve this problem. You have a set of 5 dice and\na list of words assigned to each possible dice roll for 11111 to 66666. You roll\nthe five dice and get the matching word from the list. Repeat this for the\nnumber of words you want to use in your passphrase and you have a random phrase\nthat is hopefully still memorable.<\/p>\n<p>But this sounds like a lot of effort and not something you are likely to do when\nfaced by a password entry field on a web page. So <a href=\"https:\/\/troz.net\/dicepass\/\">Dice Pass<\/a> was written to\ndo the work for you quickly and easily.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/DicePass_Mac.png\" alt=\"Dice Pass for Mac\"><\/p>\n<p>Select the number of words you want in your passphrase and see the phrase\nimmediately. Keep clicking the &ldquo;Generate New Phrase&rdquo; button until you get a\nphrase you like. If you feel that the computer is not to be trusted when\ngenerating a random number for the dice rolls, use your real dice and click the\ndice to change them to the roll you got. If you get a passphrase that is good\nexcept for one or two words, use the Re-Roll button beside those words to get a\nnew roll for just that word.<\/p>\n<p>Dice Pass is available from the <a href=\"https:\/\/itunes.apple.com\/app\/dice-pass\/id997688302?mt=12&amp;uo=4\">Mac App Store<\/a> now.<\/p>\n","url":"https:\/\/troz.net\/post\/2015\/dice-pass-for-mac\/","date":454636800},{"title":"Dice Pass","content":"<p>Dice Pass is available from the <a href=\"https:\/\/itunes.apple.com\/us\/app\/dice-pass\/id997688302\">Mac App Store<\/a> and version 3.2 (released 26th September 2018) supports macOS Mojave&rsquo;s dark mode.<\/p>\n<p>Dice Pass is a utility to app to generate random passphrases based on the\n<a href=\"http:\/\/world.std.com\/~reinhold\/diceware.html\">Diceware system<\/a>. Diceware uses a table of pre-defined words, each assigned\na 5 digit code number containing the digits 1 to 6. The official way to generate\na phrase is to roll 5 dice for each word you want in your passphrase and then\nconsult the words table to find the matching word.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/DicePass_Mac.png\" alt=\"Dice Pass for Mac\"><\/p>\n<p>The resulting phrase uses real words or common abbreviations, so it is easier to\nremember than a random collection of characters. At the same time, the random\nselection of words makes the generated passphrase much more secure as it avoids\nthe human tendency to pick words with personal meaning.<\/p>\n<p>The Diceware system was invented by Arnold Reinhold. This utility is not\nassociated with or supported by Arnold Reinhold in any way, but uses his\ntechniques with thanks. For more information about Diceware, have a look at the\n<a href=\"http:\/\/world.std.com\/%7Ereinhold\/dicewarefaq.html\">Diceware Passphrase FAQ page<\/a>.<\/p>\n<p>The default word list used in this app is a variation compiled by <a href=\"http:\/\/world.std.com\/~reinhold\/beale.wordlist.asc\">Alan\nBeale<\/a> that removes some of the more obscure words. But you can select the\noriginal Diceware word list or the Diceware 8k word list fromt rh Word List menu\nif you prefer to use something different. You can also provide your own word\nlist file if you prefer.<\/p>\n<hr>\n<h2 id=\"faq\">F.A.Q.<\/h2>\n<p><strong>How many words should I use in my passphrase?<\/strong><\/p>\n<p>Arnold Reinhold recommends 6 words. He used to suggest that 5 was sufficient for\nmost needs, but as of 2014 has increased this to 6. See the Diceware Passphrase\nFAQ page for more details. (Link above.)<\/p>\n<p><strong>How often can I re-generate the passphrase?<\/strong><\/p>\n<p>As often as you like. Keep clicking until you get a phrase that you can\nremember. If you get a phrase where most of the words are good but you would\nlike to change one or two, you can click &lsquo;Re-Roll&rsquo; on individual words to change\nthem.<\/p>\n<p><strong>Is there a way to check the strength of my passphrase?<\/strong><\/p>\n<p>There are many password strength checkers on the internet and three of these are\nlisted below. But always be careful when pasting your passphrase into a web\npage.<\/p>\n<p><strong>Online password strength checkers:<\/strong><\/p>\n<ul>\n<li><a href=\"http:\/\/rumkin.com\/tools\/password\/passchk.php\">Rumkin.com Strength Test<\/a><\/li>\n<li><a href=\"https:\/\/howsecureismypassword.net\">How Secure Is My Password?<\/a><\/li>\n<li><a href=\"http:\/\/www.passwordmeter.com\">The Password Meter<\/a><\/li>\n<\/ul>\n<p><strong>Some of the words in the phrase are not complete words.<\/strong><\/p>\n<p>The theory is that shorter words or abbreviations are easier to remember than\nlong ones, without compromising security. But if you get a word you don&rsquo;t like\nor think that you will not be able to remember, just re-roll that word.<\/p>\n<p><strong>What if I want to roll the dice myself?<\/strong><\/p>\n<p>Dice Pass allows you to tap on the 5 dice to set the numbers needed for each\nword manually. Each time you tap the number will go up be one, wrapping from 6\nback to 1. The app will then look up the word table for you and show the new\nword.<\/p>\n<p><strong>When the phrase gets too long I can&rsquo;t see all the words.<\/strong><\/p>\n<p>The &ldquo;Copy&rdquo; button will copy the complete passphrase even if it is not all\nvisible. You can also scroll by clicking and dragging along the passphrase.<\/p>\n<p><strong>Does my passphrase get saved by the app or transmitted over the internet?<\/strong><\/p>\n<p>No. The app saves no data except for basic preferences (window positioning &amp;\nsize, preferred word list etc.). There is never any data sent over the network\nand the app will work perfectly if you disconnect your computer before using.<\/p>\n<p><strong>What are those 3 buttons: #, A and 1?<\/strong><\/p>\n<p>Some sites may require a passphrase that contains a mix of character types.\nThese buttons will insert a special character, change the start of one word to\nuppercase, or insert a number. Tap the button again to undo the change. Again,\nthese characters are chosen using the dice roll system and the special\ncharacters are selected and positioned using the method and data suggested by\nArnold Reinhold.<\/p>\n<p><strong>I thought there was a version of Dice Pass for iOS!<\/strong><\/p>\n<p>There was, but with the need to update apps to support iOS 10, I decided to drop\nsupport for some under-performing iOS apps. If you bought the iOS version and\nwould like to switch to the Mac, send me a screen shot of the app running on\nyour iPhone or iPad and I will send you a free promo code for the Mac version.<\/p>\n","url":"https:\/\/troz.net\/dicepass\/","date":454550400},{"title":"Apple Watch First Impressions","content":"<p>I realise that every one has written one of these posts, but given that everyone\nlooks for and notices different things, I think it is still valid.<\/p>\n<p>My first impression was &ldquo;Why does it come in such a large box?&rdquo;. The courier\ndelivered two boxes - my 38mm Apple Watch Sport and Tim&rsquo;s 42mm Apple Watch\nSport. They both came in long boxes, with the 42mm box significantly longer. And\nboth boxes were heavy!<\/p>\n<hr>\n<h3 id=\"un-boxing\">Un-boxing:<\/h3>\n<p>Opening them was a typical Apple experience: pull the tag to open the external\ncardboard box, lift out the white internal box. This opens to reveal the watch\nwith the default strap attached (short for 38mm, long for 42mm). Lift the watch\nout and pull the tags to remove the plastic protective coating. (On a side note,\nit drives me crazy when people leave this coating on devices, but I can&rsquo;t see\nthis happening on the watch.) Underneath there is a sleeve containing the other\nhalf watch strap so you can swap from long to short. My family tells me that\nthis also includes a user guide, but I didn’t read that - typical Apple user&hellip;\nUnder the sleeve is the power block and charging cable. The charging puck is\nlarger than I expected and the cable is very long. Having removed all the\ncomponents, the packaging is still quite heavy, so I guess Apple just wanted to\nmake sure that no watches were damaged in transit and that it felt like a\nquality product.<\/p>\n<hr>\n<h3 id=\"pairing\">Pairing<\/h3>\n<p>Pairing my watch to my iPhone was amazingly slick. After selecting my language,\nthe watch displayed a sort of nebula pattern. On the iPhone, I launched the\nApple Watch app, selected the pairing option and pointed the phone camera at the\nwatch display. This did the pairing. Then I waited while all the relevant apps\ntransferred their Apple Watch components to the watch and I was ready to start\nusing it.<\/p>\n<hr>\n<h3 id=\"the-watch\">The Watch:<\/h3>\n<p>The watch comes with the modular watch face showing by default. This is a\ndigital time read-out with various &lsquo;complications&rsquo;. Force-touch the watch face\nto change it - this takes a surprisingly strong touch. Then you can swipe\nsideways to select a watch style. Once you have a style selected, some of them\noffer further customisations: select how much detail is shown, choose what extra\ninformation to display, adjust colors.<\/p>\n<p>This is a lot of fun and I am still changing mine very frequently. The good\nthing is that your customisations are stored, so if you set up the utility watch\nface in a particular way, then swap to the modular and configure it, when you go\nback to utility, your previous settings are all still there.<\/p>\n<p>The screen is gorgeous - very crisp and easy to read.<\/p>\n<p>Twisting your wrist to show the time works well most of the time. There is a\ndelay that I would estimate at about half a second, presumably to avoid false\npositives triggering unnecessary displays. If you are holding your wrist at an\nunusual angle e.g. showing the watch to someone, this twist will not always\nwork, but tapping the screen will display the watch face instantly.<\/p>\n<p>Tapping on a complication will take you to the relevant parent app e.g. tapping\nthe current temperature will open the Weather app.<\/p>\n<p>A minor quibble is that the phases of the moon are displayed from a northern\nhemisphere point of view and do not match what we actually see here in\nAustralia.<\/p>\n<hr>\n<h3 id=\"battery-life\">Battery Life:<\/h3>\n<p>This is a complete non-issue. On my first day with the watch, the battery was at\n70% when I first turned it on. As you can imagine, usage was very intense that\nfirst day and I got to 8%. Since then, the battery level has only got down to 40\n-50% over a day and it recharges to 100% within 2 hours. Tim&rsquo;s 42mm model gets\nslightly better battery life as expected.<\/p>\n<p>I started off having the battery indicator as one of the &lsquo;complications&rsquo; on my\nwatch face, but now I just ignore it.<\/p>\n<p>And the battery life of my iPhone has improved remarkably due to so many quick\ntransactions being done through the watch instead.<\/p>\n<p>I did have a charging problem one night. I woke up and checked the time and\nrealised that the watch was quite warm to the touch. I checked the battery level\nwhich was actually lower than when I had put it on the charger. I took it off\nthe charger for a few hours, then put it back and all was well.<\/p>\n<hr>\n<h3 id=\"notifications\">Notifications<\/h3>\n<p>Here is where you need to be careful. I had turned off most notifications on my\nphone before getting the watch, so I have not been inconvenienced, in fact I\nhave been able to re-enable many notifications as they are no longer so\nintrusive.<\/p>\n<p>At first we thought some notifications were not getting through to the watch,\nthen we found out that if your iPhone is awake and un-locked, notifications are\nnot passed on to the watch. So drop the time until sleep on your phone to the\nminimum which saves your phone battery and makes sure you receive most\nnotifications on the watch.<\/p>\n<p>If you want to stop any apps sending notifications through to the watch, this is\neasily set in the iPhone&rsquo;s Apple Watch app.<\/p>\n<p>I have noticed there is a bit of a delay. I hear an email or message arriving on\nmy phone and it can be half a minute before it gets to my watch.<\/p>\n<p>Once you get a notification, you can tap it to go to the parent app, swipe up to\nprocess it in some way depending on the type of notification, or swipe to the\nleft to see a button that will clear the notification. If you want to get rid of\nall your notifications at once, do a force-touch on the notifications screen to\nget the option to clear them all.<\/p>\n<hr>\n<h3 id=\"glances\">Glances<\/h3>\n<p>Glances are designed to be one screen indicators giving you important\ninformation as quickly as possible. From there, you can decide whether to go to\nthe parent app or not. These are accessed by swiping up from the bottom of the\nscreen when looking at the watch face.<\/p>\n<p>I found that the most important thing here was to reduce the number of glances\nshown, since they are displayed sequentially. If you have 20 glances installed,\nyou have to swipe at least 20 times to see them all. So go to the Apple Watch\napp on your iPhone and turn off the glances you do not find essential.<\/p>\n<p>The first glance in the sequence is essential though as it allows you to toggle\nairplane mode, do not disturb and silent mode. It also has a button that can\nmake your iPhone make a sound to help you locate it. Hold this button down to\nmake the iPhone flash come on as well.<\/p>\n<hr>\n<h3 id=\"activity\">Activity<\/h3>\n<p>Here I have to confess to my first disappointment. The activity app tracks three\nthings: Move, Exercise and Stand. When you first start the watch, you tell it\nyour age, sex, weight and height. It computes a suggested daily move goal for\nyou which you can adjust at any time. Then it tracks your daily activities and\nshows how well you are doing in relation to your goal. For exercise and standing\nthe goals are 30 minutes exercise and standing for at least one minute in an\nhour 12 times though the day.<\/p>\n<p>The move tracking seems to be fine. I am not sure what metrics it uses, but on\nmore active days, the numbers go up.<\/p>\n<p>The exercise one doesn&rsquo;t work for me. We went for a walk and when we returned,\nTim&rsquo;s watch showed 25 minutes exercise and mine showed 1 minute. We had walked\nthe same distance at the same speed, as confirmed by the pedometer. Subsequent\ntests revealed that I don&rsquo;t swing my arms enough when walking to trigger what\never sensor this is using. I can&rsquo;t quite see why it ignores the pedometer\ncompletely, but hopefully this can be fixed by a software update. For now, I\njust ignore this circle.<\/p>\n<p>Standing is another issue since I use a standing desk, so I stand for many hours\neach day. Even when standing, I get my hourly reminders to stand. However I use\nthis as a trigger to make me to move about for a minute, so I suppose that is\nstill useful.<\/p>\n<hr>\n<h3 id=\"communications\">Communications<\/h3>\n<p>The various forms of communication are a real strength of the watch. With Tim &amp;\nI both having watches, we can phone, message (audio or text) and use the new\nDigital Touch to send sketches, taps or heart beats. While it feels a bit weird\nto be talking to your wrist, this works really well and the sound quality is\namazing for such a small device. If you need more privacy, it is very easy to\ntransfer a phone call back to your phone.<\/p>\n<p>Oddly, the watch does not appear to offer FaceTime but always uses standard\nphone calls.<\/p>\n<p>Messages are where the watch excels. If you get a message with a question, the\nwatch can suggest possible answers so you just have to tap a button. Even\nwithout this, there is a set of pre-defined answers which you can edit in the\nApple Watch app on your iPhone. And you can also use dictation or the new\nanimated emojis. Dictation seems a lot better on the watch than it ever was\nbefore on the phone. And even if dictation is not transcribed perfectly, you can\nsend the message as an audio recording instead of text.<\/p>\n<p>When recording, tap the Done button as soon as you have finished speaking. The\ninclination is to wait for the text to be processed, but the recording carries\non, so stop the recording and let the text processing finish in its own time.<\/p>\n<p>The animated emojis work when you send them to other devices as they appear as\nGIFs. You can choose from 3 sets: faces, hands and hearts. Once you have swiped\nto select a set, use the crown to scroll between the options. You can also swipe\nfurther to get to the standard emojis.<\/p>\n<p>Digital Touch works between watches only. It is a fun gimmick and I can imagine\nus developing a set of key codes or sketches, but neither of us can draw very\nwell, so the sketches are very rough. The heart beat is amusing, but the tapping\nis surprisingly effective as an attention-getter.<\/p>\n<hr>\n<h3 id=\"summary\">Summary<\/h3>\n<p>I think this is the start of a new way of interacting with our technology in a\nway that is both closer to us and less intrusive. I am loving the watch so far\nand can&rsquo;t wait to see where it goes from here.<\/p>\n<hr>\n","url":"https:\/\/troz.net\/post\/2015\/apple-watch-first-impressions\/","date":451958400},{"title":"Time In Words 4.0","content":"<p><a href=\"https:\/\/troz.net\/time-in-words\/\">Time In Words<\/a> for iOS started off as a fun gimmick, emulating the\n<a href=\"http:\/\/www.qlocktwo.com\/\">Qlocktwo<\/a> type of time display where the relevant words are highlighted in\nsome way to spell out the time as a sentence. This very quickly evolved into\nwhat I hoped would be more useful app, still showing the original display, but\nalso providing the current time &amp; date as complete sentences. Then I added time\nconversions and discovered the real power and utility of writing out times as\nwords.<\/p>\n<p>When it comes to converting times, I doubt there are many people in the world\nwho haven&rsquo;t had problems.<\/p>\n<ul>\n<li>Is that morning or afternoon for them?<\/li>\n<li>Are they in tomorrow, today or yesterday?<\/li>\n<li>What if they are using daylight-savings?<\/li>\n<\/ul>\n<p>Having the time written out removes all ambiguity. As an example, Time In Words\ncurrently reports very clearly:<\/p>\n<blockquote>\n<p>In Los Angeles, it is nine minutes to ten on Tuesday evening (daylight-savings\ntime).<\/p>\n<\/blockquote>\n<p>When writing <a href=\"https:\/\/troz.net\/time-in-words-for-mac\/\">Time In Words for Mac<\/a>, I focussed immediately on the time zone\nconversion facilities, and provided a menu bar app that can display as many time\nzones as you like (although more than will show on a single screen would\nprobably get annoying).<\/p>\n<p>So when I decided to do a complete re-write of Time In Words for iOS, the\nobvious move was to emulate the Mac version and allow for as many time zones as\nthe user wants, instead of the current 2 or 4 (iPhone or iPad). So I discarded\nthe Qlocktwo display and the separate date display which used a similar\nmechanic. I kept the display that shows the current date and time, but every\ndisplay after that shows the time in a different time zone. The time zones can\nbe changed and re-ordered, so the ones you need most are the fastest to get to\nonce the app opens.<\/p>\n<hr>\n<p>One new feature (again taken from the Mac version), is the ability to calculate\n&ldquo;What time will it be&hellip;&rdquo;<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/TiW_what_time.png\" alt=\"What time\"><\/p>\n<p>You dial in your local date and time to see what time that will be in your\nselected zone. And if you want to calculate the other way around, tap the &ldquo;Swap\ntime zones&rdquo; button.<\/p>\n<hr>\n<p>The main impetus for a re-write was the Apple Watch. I thought this would be a\nperfect app for the watch as it could use the Apple Watch&rsquo;s superb time-keeping\nin conjunction with my text generation, to add a significant level of usability\nto the Apple Watch as regards time zone conversions.<\/p>\n<p>Sadly, Apple disagrees…<\/p>\n<p>I completed the app and submitted it to the App Store for review. The review\nprocess seems to be very fast at the moment and the app moved into review only\none day later. And there it stuck for 3 days. This was very odd. My experience\nis that once an app gets into review, it only takes a few hours, if that. For\n<a href=\"https:\/\/troz.net\/19th-hole\/\">19th Hole<\/a> - my other app with an Apple Watch component, the review process\ntook 30 hours. But 3 days!<\/p>\n<p>Then I got a phone call from Apple where a very polite person explained to me\nthat although this was not mentioned in any of the documentation, the marketing\npeople had decided that no apps were to be allowed on the watch if they told the\ntime.<\/p>\n<p>I offered to remove the initial screen telling the local time, so the app would\nnot actually supply the current time but only the time conversions, but that was\nnot acceptable either.<\/p>\n<p>Then I tried appealing the rejection. My hopes were not high, but I didn&rsquo;t see\nany harm in asking. I again offered to remove the local time display and\nemphasised the accessibility advantages of displaying times in this manner.\nAnother day, another phone call, another polite Apple person saying no.<\/p>\n<p>So now I have re-submitted the app for review without the Apple Watch component,\nwhich is a shame. I am hoping that after some months they will review this\npolicy and allow me to try again, but who knows.<\/p>\n<p>So you can see what you are missing, here are a couple of screen shots from the\nwatch app showing my local time, plus one time zone:<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/Watch_1.png\" alt=\"Local time\">\n<!-- raw HTML omitted --><img src=\"https:\/\/troz.net\/images\/Watch_2.png\" alt=\"Converted time\"><!-- raw HTML omitted --><\/p>\n<hr>\n<p>One more minor point. People who actually look at version numbers may wonder why\nI have gone from version 2.5 to version 4.0. When I was working on version 2.5,\nI considered making it version 3.0 and then changed my mind. However by that\ntime I had already created a version 3.0 in iTunesConnect, so I was not able to\nuse 3.0 again this time. This version was such a big change that I wanted it to\nbe a .0 release, so that meant going to version 4.0<\/p>\n","url":"https:\/\/troz.net\/post\/2015\/time-in-words-4.0\/","date":450748800},{"title":"Apple Watch App - Rejected, then Accepted","content":"<p>As described in a <a href=\"https:\/\/troz.net\/post\/2015-04-02-my-first-apple-watch-app\/\">previous post<\/a>, about 9 days ago I submitted my first\nApple Watch app for review. The app was an extension of my golf scoring app:\n<a href=\"https:\/\/troz.net\/19th-hole\/\">The 19th Hole<\/a>.<\/p>\n<p>I expected that App Store review times would go up dramatically once Apple had\nallowed developers to submit watch apps, but this proved to be incorrect. Three\ndays after submission, the app was marked as &ldquo;In Review&rdquo;. This seemed to happen\nlast thing on a Saturday, so there was no further action for two days, at which\npoint the app was rejected, with the following details (sic):<\/p>\n<blockquote>\n<p>We noticed an issue in your app that contributes to a lower quality user\nexperience than Apple users expect. Specifically,<\/p>\n<\/blockquote>\n<blockquote>\n<ul>\n<li>while using the Apple Watch app with the phone app is in the background mode\n(display off), the new data entry on the Watch App does not refresh\naccordingly until the phone app is turn back on.<\/li>\n<\/ul>\n<\/blockquote>\n<p>So it appeared that the communication between the watch and the phone, which\nworked perfectly on the simulators, did not work at all on the actual devices.\nThis is the problem with developing for a device that you do not have.<\/p>\n<hr>\n<p>After some research, it appears that the problem is with the phone not operating\ncorrectly in background mode. Apple provides for communications from the watch\nto the phone. The phone can respond, but only the watch can initiate a\nconnection. I guess this makes sense since every watch will be paired with a\nphone but the reverse will not always be true.<\/p>\n<p>To talk to the phone, the watch uses this function:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">openParentApplication<\/span>(<span style=\"color:#66d9ef\">_<\/span> userInfo: [NSObject : AnyObject],\n  reply reply: (([NSObject : AnyObject]<span style=\"color:#f92672\">!<\/span>, NSError!) -&gt; Void)?) -&gt; Bool\n<\/code><\/pre><\/div><p>The phone listens for messages in this event handler:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">func<\/span> <span style=\"color:#a6e22e\">application<\/span>(<span style=\"color:#66d9ef\">_<\/span> application: UIApplication,\n  handleWatchKitExtensionRequest userInfo: [NSObject : AnyObject]?,\n  reply reply: (([NSObject : AnyObject]<span style=\"color:#f92672\">!<\/span>) -&gt; Void)<span style=\"color:#f92672\">!<\/span>)\n<\/code><\/pre><\/div><p>The name of the WatchKit function is slightly misleading as it does open the\nparent application, but only in the background. Then the parent app is supposed\nto do whatever tasks are called for in the handleWatchKitExtensionRequest\nfunction, and return any required data using the supplied reply() function.<\/p>\n<p>So far, so good, and it all worked perfectly in the simulator. But it appears\nthat although this call wakes the iPhone app, it does not stay awake long enough\nto do anything. Many thanks to Brian at <a href=\"http:\/\/www.fiveminutewatchkit.com\/blog\/2015\/3\/11\/one-weird-trick-to-fix-openparentapplicationreply\">Five Minute WatchKit<\/a> who pointed\nout the way to make this work. Firstly, you create a dummy background task\nguaranteed to keep the iPhone app awake for 2 seconds. Then you perform your own\nwork, using another background task. When that is finished, the phone can send\nthe response and end the real background task. The dummy task will time out by\nitself after 2 seconds.<\/p>\n<p>For my needs, I could probably reduce the 2 seconds considerably, but since this\nis a problem I am unable to test, I decided just to go with Brian&rsquo;s suggestion\nas it is.<\/p>\n<p>I re-submitted the app the same day it was rejected, and two days later it was\nback in review. The review process took longer than usual, but about 30 hours\nlater, the app was marked &ldquo;Pending an Apple Release&rdquo;. I assumed this meant that\nApple would release all WatchKit apps on 24th April when the watches shipped,\nbut the following day the app was reported as &ldquo;Pending Developer Release&rdquo; (I had\nset it to release manually). Now I have told iTunesConnect to release the app\nand it is &ldquo;Processing for App Store&rdquo;.<\/p>\n<hr>\n<p>On a related note, the start of pre-ordering for the Apple Watch was scheduled\nfor a very civilised 5:01 pm here in eastern Australia. I had three watches all\nlined up in my Favorites in the Apple Store app, ready for ordering. When the\nstore became live (at about 5:03 pm), I could not work out how to order all\nthree in a single operation, so had to place these orders one at a time. I got\nthe first two ordered for the soonest possible delivery, but by the time I got\nto the third (about 3 minutes later), I had missed out and it will ship in 4 to\n6 weeks!<\/p>\n","url":"https:\/\/troz.net\/post\/2015\/apple-watch-rejected-then-accepted\/","date":450403200},{"title":"My First Apple Watch App","content":"<p>I have just submitted my first Apple Watch app to the iTunes App Store. This is\na scary thing to do, since I have never seen, touched or used an Apple Watch and\nall I had to go on was the Simulator that Apple supplies with Xcode.<\/p>\n<p>At the moment, Apple has only made a limited set of Apple Watch features\navailable to developers, and all Apple Watch apps come tethered to an iOS app -\npresumably this will mainly be iPhone apps, but I wonder will we be able to\nconnect Apple Watches to iPads? Anyway, it made sense to extend one of my\nexisting apps to use the Apple Watch instead of starting from scratch.<\/p>\n<p>Of my <a href=\"https:\/\/troz.net\/apps-ios\/\">iOS apps<\/a>, I decided that <a href=\"https:\/\/troz.net\/19th-hole\/\">The 19th Hole<\/a>, my golf scoring app,\nwould be well suited to the Apple Watch. The problem with using the iPhone\nversion to score is that you have to keep pulling your iPhone in and out of your\ngolf bag, sometimes in the rain, sometimes in bright sunlight. Being able to\nenter the scores on your wrist sounds like a big improvement. We know that the\nApple Watch is at least somewhat water-resistant, but we are yet to see how well\nit performs in bright sunlight, however I would expect that Apple has put\nconsiderable effort into this.<\/p>\n<hr>\n<p>Once I decided to write an Apple Watch app, the first step was to learn how. I\nread all Apple&rsquo;s published documents to get a feel for what was possible and\nwhat user-interface objects would be available. I find online courses very\nhelpful and by far the best Apple Watch course that I found was <a href=\"http:\/\/www.raywenderlich.com\/video-tutorials#watchkit\">Ray\nWenderlich&rsquo;s WatchKit video tutorial series<\/a>. The instructors were very clear\nand explained how the layout and sizing of objects works on the Apple Watch, as\nwell as how to set up and move between views and how to communicate from the\nWatch back to the iPhone. The layout section of the course was particularly\nvaluable as no other course I found even mentioned this, although it is crucial\nto the interface design and allowing for the two sizes of watch.<\/p>\n<p>I had released an update to <a href=\"https:\/\/troz.net\/19th-hole\/\">The 19th Hole<\/a> recently in preparation for this.\nI wanted to have squashed the bugs and updated the interface, so the only\nchanges needed would be the WatchKit ones.<\/p>\n<p>The first step in adding a WatchKit app to your existing app is to create a new\ntarget in the Xcode project. Choosing WatchKit actually adds two new targets:\nthe WatchKit Extension which lives on the iPhone and supplies the code for the\nWatch, and the WatchKit App which lives on the Watch and provides the interface.<\/p>\n<p>I decided to use a paged interface with one page per hole. Each of these pages\nhas a table, with one row per player. A slider with plus &amp; minus buttons lets\nyou enter the score for each player and the total score for each player is also\ndisplayed.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/19thHole-Watch2.png\" alt=\"Data entry\"><\/p>\n<p>Apart from this data entry view, I have a splash screen which shows you the\ncurrent round as set up on the iPhone and a final summary screen showing\neveryone&rsquo;s totals.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/19thHole-Watch1.png\" alt=\"Splash screen\">\n<img src=\"https:\/\/troz.net\/images\/19thHole-Watch3.png\" alt=\"Summary\"><\/p>\n<p>These images are taken from the Apple Watch simulator running in 42mm mode.<\/p>\n<hr>\n<p>The biggest programming problem was getting the communications working beween\nthe two devices. The 19th Hole uses Core Data for all data storage. My first\nattempt shared this data between the two apps, allowing both to read and update\nthe database. This almost worked, but if both apps were open, then changes in\none device did not get across to the other. It seemed that the data was cached\nand I was unable to find a way to force either app to update every time.<\/p>\n<p>My next attempt kept all the data in the iPhone app and had the WatchKit\nextension ask for whatever data it needed and send changes to the iPhone app.\nThis worked much better and I was able to get live updates between the two\ndevices.<\/p>\n<p>The other issue is the fact that I have never seen, touched or used an Apple\nWatch. This means that I had to guess a lot of things:<\/p>\n<ul>\n<li>how well will it perform?<\/li>\n<li>will the icon look OK?<\/li>\n<li>are the controls large enough to use?<\/li>\n<li>will the text be large enough to read?<\/li>\n<\/ul>\n<p>My main philosophy was to keep the Watch app as simple as possible and use the\nstandard interface elements, font sizes etc. Hopefully that will work.<\/p>\n<hr>\n<p>The final step was submitting the app to iTunes Connect for review. It was not\nclear to me how to do this, so I logged into iTunes Connect, created a new\nversion and entered the meta-data. I couldn&rsquo;t see anywhere to say anything about\nthe Watch. I archived the main iOS app as usual and validated it with the Store.\nI had a few things to fix up, but I got the build submitted.<\/p>\n<p>Back to iTunes Connect and once the uploaded build had been processed, I was\nable to select it and click &ldquo;Submit for Review&rdquo;. At this point, the page\nreported an error and showed me a new section where I could upload the Apple\nWatch icon and screen shots.<\/p>\n<p>I had been unsure how the icon would look when made round, but it looks OK on\nthe iTunes Connect page. How it will look on a tiny watch screen remains to be\nseen. Anyway, once I had my icon and screen shots uploaded, I was able to\nproceed to the next step. But then I got a message saying that the app could not\nbe processed - no explanation. Thankfully, I had seen some developers on Twitter\nreporting this, and somebody said that the solution was to remove the alpha\nchannel from your screen shots. Sorry for not giving credit here - I forget who\nsaid this, but it worked, so thank you whoever you are.<\/p>\n<p>So now my app is waiting for review and who knows how long that will take.\nAccording to <a href=\"http:\/\/appreviewtimes.com\">App Review Times<\/a>, the current estimate is 8 days, but the\ntrend is heading upwards. I would expect that to blow out in the next few weeks\nas developers try to get their apps ready for the Apple Watch release date of\nApril 24th.<\/p>\n","url":"https:\/\/troz.net\/post\/2015\/my-first-apple-watch-app\/","date":449625600},{"title":"LiveCode stacks","content":"<p>When I converted my site to Jekyll &amp; GitHub, one of the things I left behind was\na collection of LiveCode (Revolution) stacks. For many years I was active in the\nRevolution community before going in other directions and over that time, I\nbuilt up a small library of stacks that I released into the public domain.<\/p>\n<p><a href=\"http:\/\/livecode.com\">LiveCode<\/a> is a cross-platform rapid development environment. There is an\nopen source community edition available for anyone wishing to get started.<\/p>\n<p>I had assumed that since I had not been an active LiveCode user for many years,\nthese stacks would have become worthless. But in the last couple of days, I have\nreceived a couple of queries from people looking for them.<\/p>\n<p>So I created a new GitHub repository and uploaded them all to here: <!-- raw HTML omitted -->\n<a href=\"https:\/\/github.com\/trozware\/rev_stacks\">LiveCode stacks<\/a><\/p>\n<p>None of these stacks have been updated recently, but feel free to use or adapt\nas you see fit. They have not been tested using recent versions of LiveCode, so\nmay not work as expected. As stacks are provided as is. Use at your own risk.<\/p>\n","url":"https:\/\/troz.net\/post\/2015\/livecode-stacks\/","date":448329600},{"title":"Icon Builder 3.0.1","content":"<p>So why an announcement for such a minor upgrade?<\/p>\n<p>Version 3.0 got no announcement because it was not the release I wanted.<\/p>\n<p>Having downloaded the Xcode 6.2 &amp; 6.3 betas, I had worked out what icons were\nneeded to a WatchKit app. This, combined with several other changes, made me\nbump the version number to 3.0.<\/p>\n<p>Sadly, Apple rejected the update because it referred to pre-release products. So\nI pulled all mentions of WatchKit out of the interface and meta data and got 3.0\nreleased.<\/p>\n<p>After the Apple keynote on March 9th, I re-enabled the WatchKit portions of the\napp and re-submitted to the App Store, hoping that with the WatchKit SDK now\npart of the official Xcode release, Apple&rsquo;s reviewers would allow it to get\nthrough this time.<\/p>\n<p>This worked - in fact the app was reviewed and accepted within 6 days - so now\nIcon Builder adds WatchKit to its list of supported platforms.<\/p>\n<p>Actually, Apple may have done me a favour in rejecting the first one as they\nchanged the specifications for the icons slightly between Xcode 6.2 beta and\nXcode 6.2 release.<\/p>\n<ul>\n<li><a href=\"https:\/\/troz.net\/icon-builder\/\">Icon Builder page<\/a><\/li>\n<li><a href=\"https:\/\/itunes.apple.com\/us\/app\/icon-builder\/id552293482?mt=12&amp;uo=4\">Mac App Store link<\/a><\/li>\n<\/ul>\n<hr>\n<h3 id=\"whats-new-in-version-3\">What’s New in version 3?<\/h3>\n<ul>\n<li>Support for WatchKit app icons (version 3.0.1)<\/li>\n<li>Simplified interface: removed display of smaller icons.<\/li>\n<li>Fix for @3x images not being saved when you selected iOS 6 support.<\/li>\n<li>iTunesArtwork@2x file now saved as a JPG to avoid iTunes Connect errors.<\/li>\n<li>Removed CarPlay icon - Xcode sometimes gave errors when this was included.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2015\/icon-builder-3.0.1\/","date":448243200},{"title":"19th Hole","content":"<p>19th Hole is the golf scoring app for everyone, and it is available from the\n<!-- raw HTML omitted -->iTunes\nApp Store<!-- raw HTML omitted -->.<\/p>\n<p>Whether you are playing for the club championship, having a weekend round with\nfriends or playing pitch&rsquo;n&rsquo;putt with the kids, 19th Hole makes it easy to keep\nscore.<\/p>\n<p>Designed for fast, accurate score keeping with a color scheme chosen for optimal\noutdoor viewing, 19th Hole uses a simple setup process and an intuitive,\ngesture-based score entry system. During and after the round, you can see totals\nand results using various methods: total strokes, total putts, match play (Irish\nmatch play for more than 2 players) &amp; Stableford.<\/p>\n<p>19th Hole now includes an Apple Watch app so strokes can be entered quickly and\neasily using the watch to avoid having to pull your iPhone out of your bag.<\/p>\n<p>When you have finished, you can archive the score card for future reference and\nemail the completed card to your fellow players.<\/p>\n<h2 id=\"scoring-a-round-is-very-simple\">Scoring a round is very simple:<\/h2>\n<ol>\n<li>Select a course - the last played course is pre-selected.<\/li>\n<li>Select the players - the last set of players is pre-selected.<\/li>\n<li>Tap &lsquo;Start Round&rsquo;<\/li>\n<li>Optionally enter the players&rsquo; handicaps - the last used handicaps are\npre-selected.<\/li>\n<li>After each hole, enter the strokes played by each person, on your iPhone or\nApple Watch.<\/li>\n<li>You can also record putts and various other statistics (iPhone only).<\/li>\n<\/ol>\n<p><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->iPhone<\/p>\n<p><!-- raw HTML omitted -->\n<!-- raw HTML omitted -->Apple Watch<\/p>\n<p>Courses only need to be entered once and are then saved for future use.<br>\nEnter the course name, number of holes and select the tees in use. For each hole,\nenter the par, index\/handicap, and the distance from each tee.<\/p>\n<p>If you are in a hurry to start the round, enter the name of the course and the\nnumber of holes. The rest of the data can be entered for each hole as you play,\nor can be edited later.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>Players can be selected from your Contacts or entered manually. Add email\naddresses so the completed cards can be emailed after the round. Choose an icon\nfor each player. If a player was selected from Contacts, you can use the photo\nassigned in the Contacts app.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<h2 id=\"gesture-controlled\">Gesture-controlled:<\/h2>\n<p>All scores are entered using a special number button that you tap, then drag\nyour finger up or down the screen to raise or lower the number.<\/p>\n<p>Hold your finger down on the number, then move it up or down to change the\nnumber displayed. To make it easier to see what you are doing, hold your finger\ndown on the number, then first drag to one side before dragging up or down. Play\nthe video below to see how this works.<\/p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>During a round, cumulative statistics are shown at the bottom of the screen.<br>\nFor a more complete score card, you can swipe downwards in the middle of the screen.<\/p>\n<p>Tap on the hole details at the top of the screen to edit that data.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<h2 id=\"after-the-game\">After the game:<\/h2>\n<p>While relaxing at &ldquo;The 19th Hole&rdquo; after the game, you can check the scores and\nswipe back and forth between holes to see what happened during the round.<\/p>\n<p>Once you are sure the scores are correct, tap the &ldquo;Action&rdquo; button in the top\nright. You can add some notes to the round at this point or archive the round so\nthat the completed score card is saved on your iPhone. After this, you will not\nbe able to make any further changes.<\/p>\n<p>Completed rounds are listed when you tap &ldquo;See Old Cards&rdquo; with the most recent at\nthe top. Tap one to see the complete score card for that round. Tap &ldquo;Strokes&rdquo;,\n&ldquo;Putts&rdquo; or &ldquo;Stableford&rdquo; to change what is shown for each hole. The summary is\nshown at the bottom.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n","url":"https:\/\/troz.net\/19th-hole\/","date":448156800},{"title":"App Store Preview Videos","content":"<p>Apple now allows app developers to add a video preview of their app when\nuploading to iTunes Connect. This video is shown to potential purchasers when\nthey are looking at an app in the iTunes App Store, just like the screen shots.<\/p>\n<p>I have been working on an update to <a href=\"https:\/\/troz.net\/19th-hole\/\">19th Hole<\/a> and since it uses a custom\nmethod for data input, I decided that a video would be really useful in this\ncase.<\/p>\n<p>The first step was to work out how to record video from my iPhone. In OS X\nYosemite (10.10), this can be done using QuickTime Player. Connect your device\nto your Mac using a Lightning cable (I think it has to be a Lightning cable -\nthe old cables will not work). Open up QuickTime Player and choose &ldquo;New Movie\nRecording&rdquo; from the File menu. By default this shows input from the Mac&rsquo;s\nFaceTime camera, but just to the right of the red Record button, there is a down\narrow that shows a popup menu. Click this and you can select your iPhone as the\nCamera. Since I wanted the sound effects included, I also selected my iPhone as\nthe Microphone, but if you want to provide a voice-over or sound-track, you\nmight want to change this.<\/p>\n<p>That handles the technical side of recording, but I needed a way to show where I\nwas tapping and pressing on the iPhone screen. After some searching, I found\n<a href=\"https:\/\/github.com\/toddreed\/Touchpose\">Touchpose<\/a> which was exactly what I wanted. Since it requires changing the\nmain.m file, as well as changes to the app delegate, I created a branch in my\napp&rsquo;s git repository so that I could apply these changes temporarily, but save\nthem for next time. The only alternation I made to the default settings was to\nchange the color of the cursor indicator to suit the color scheme of my app. And\nsince this was a temporary change, I set it to show the cursor indicator all the\ntime, not just when the screen was mirrored. All the details are shown in the\nsample project.<\/p>\n<p>Next step was to actually record a session. After my first attempt (which lasted\nabout 67 seconds), I checked the Apple specs and found that the video could not\nbe longer than 30 seconds. So I re-thought what I wanted to include and tried\nagain. It took a few tries to get what I wanted, but finally I ended up with a\n.mov file that was 26 seconds long.<\/p>\n<p>On to iTunes Connect where I had the new version of the app set up already with\nits screen shots. Since I have an iPhone 6, the video was only suited for the\n4.7 inch section. So I dragged it into the drop zone and waited. No good - the\nvideo frame rate was too high. It has to be 30 fps or less. QuickTime Player had\nmade a video that was 50 fps.<\/p>\n<p>The app I usually turn to for any video conversion needs is <a href=\"https:\/\/handbrake.fr\">Handbrake<\/a>. So I\nran the app through Handbrake, specifying a frame rate of 30. This converted the\nvideo to .mp4 instead of .mov, but it was 30 fps. It wasn&rsquo;t until I tried to\nupload it to iTunes Connect that I realised Handbrake had cropped the video from\n750 x 1334 to 750 x 1330. After searching through the settings, I found where I\nneeded to turn on custom clipping and set it to 0 so that the original\ndimensions were preserved. But iTunes Connect still didn&rsquo;t like it, although\nthis time the error message was un-informative.<\/p>\n<p>Eventually, the brains trust on the other side of the room suggested iMovie. Not\nonly that, but he found that once the original had been dragged into iMovie, the\nshare options included an &ldquo;App Preview&rdquo; setting. This gave us a .mov file of the\ncorrect dimensions and the correct frame rate which iTunes Connect accepted.<\/p>\n<p>iTunes Connect that allowed me to select the poster frame for the video and save\nthe changes to the app meta data. At that point, it showed a notice saying that\nthe app preview was being processed which could take up to 24 hours. It appears\nthat the processing has been finished, as that notice has disappeared.<\/p>\n<p>For the next stage, I ned to wait until the app gets reviewed and hopefully\napproved. Then it will be interesting to see how the video looks in the iTunes\nApp Store.<\/p>\n<hr>\n<p>As a reward for reading this post, here is a pre-release of the video, showing\nhow to enter the score data for a hole of golf using <a href=\"https:\/\/troz.net\/19th-hole\/\">19th Hole<\/a>:<\/p>\n<!-- raw HTML omitted -->\n","url":"https:\/\/troz.net\/post\/2015\/app-store-preview-videos\/","date":448156800},{"title":"Testing automation","content":"<p>Today I am experimenting with automating post generation.<\/p>\n<p>Firstly, there is the structure of the post Markdown document, which really\nboils down to the file name and the header.<\/p>\n<p>I have set up a macro in <a href=\"http:\/\/www.ergonis.com\/products\/typinator\/\">Typinator<\/a> so that I just type the title of the\npost in a text document. I copy that title to the clipboard and type the\nshortcut. The header is then created with the title and the formatted permalink.<\/p>\n<p>To save the document, I use another Typinator snippet to convert the title\n(still in the clipboard) to lower case and to replace the spaces in the title\nwith dashes.<\/p>\n<p>For starting the local Jekyll server, I have turned to an <a href=\"http:\/\/www.alfredapp.com\">Alfred<\/a> workflow.\nI have two actions in the workflow. One opens Terminal, cd&rsquo;s to my site folder\nand runs the command to start the local Jekyll server. The second opens my\ndefault browser to the local Jekyll test address.<\/p>\n<p>Both these actions happen simultaneously so the browser usually fails until\nrefreshed. The server is left running in Terminal so I can shut it down when\nfinished testing.<\/p>\n<p>After writing the post, the final stage is to publish, so I need to work out the\ncommands for doing a git commit and push. Then I should be able to automate\nthose tasks.<\/p>\n<p>Testing the git commands using Terminal, I have come up with the following\nsequence:<\/p>\n<pre><code>git add .\ngit commit -a -m &quot;Commit message here&quot;\ngit push\n<\/code><\/pre>\n<p>The commit message could be the title of the post, so I need a way to construct\nthe command and then execute it. Typinator is good at text manipulation, so I\nconstructed another macro that takes the clipboard, uses it as the commit\nmessage and performs the git commands. This gave a good commit message, but the\nactual commit failed, so that was no use.<\/p>\n<p>So then I went back to Alfred and created a workflow there with a series of\nTerminal commands to perform the actions above. This only allows a generic\ncommit message, but it works as expected.<\/p>\n<p>So there is still room for improvement, but with a set of macros, I can automate\na lot of the standard text entry, which is always good for reducing errors.<\/p>\n<hr>\n<p>The sequence now is:<\/p>\n<ol>\n<li>Open the text editor and type the title of the post.<\/li>\n<li>Cut this into the clipboard.<\/li>\n<li>Run the Typinator macro to fill in the post header.<\/li>\n<li>Save the post file, using the Typinator macro to construct the file name.<\/li>\n<li>Write the post, then use an Alfred workflow to test it locally.<\/li>\n<li>When ready, use an Alfred workflow to publish.<\/li>\n<\/ol>\n<hr>\n","url":"https:\/\/troz.net\/post\/2015\/testing-automation\/","date":447811200},{"title":"Workflow for writing a post","content":"<p>So here is where I need to get used to Jekyll and how things are done. I will\nend up automating this when I am sure of the process, but for now, I am just\ngoing to work my way through it.<\/p>\n<ol>\n<li>\n<p><strong>Start up the local Jekyll server:<\/strong><\/p>\n<ul>\n<li>I opened Terminal and used <code>cd<\/code> to get to the folder containing my site.<\/li>\n<li>Next I started the Jekyll server locally using <code>jekyll serve<\/code>.<\/li>\n<li>This gave me the address of the local server - in my case\n<code>http:\/\/127.0.0.1:4000\/<\/code> - so I went there in my browser to see the default\npage.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>My goal is to write a new blog post (this one in fact).<\/strong><\/p>\n<ul>\n<li>For advice on creating a new post, I went to the <a href=\"http:\/\/jekyllrb.com\/docs\/posts\/\">Jekyll docs<\/a>.<\/li>\n<li>Jekyll needs the file name to be a specific format which includes the date\nand title.<\/li>\n<li>Looking in the <code>_posts<\/code> folder of the site folder, I see the previous post\nfile is titled <code>2015-03-08-new-site-for-trozware.md<\/code>.<\/li>\n<li>As it is now 10th March 2015, I am saving this file as:\n<code>2015-03-10-workflow-for-writing-a-post.md<\/code>.<\/li>\n<li>Saving at this point shows a Jekyll error in the Terminal, but the next\nstage will fix that.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Front matter:<\/strong><\/p>\n<ul>\n<li>Jekyll specifies that each file must have a <a href=\"http:\/\/jekyllrb.com\/docs\/frontmatter\/\">front matter block<\/a> in a\ncertain format.<\/li>\n<li>The header has certain essential parameters and then more optional ones.<\/li>\n<li>My site was imported from WordPress, so the older posts contain several\nheader parameters that may not be necessary any more.<\/li>\n<li>Look at the screen shot below to see what I have in this post file:<\/li>\n<li>After saving, I see this entry in my Terminal:<\/li>\n<li><code>Regenerating: 1 file(s) changed at 2015-03-10 13:50:40 ...done in 0.421789 seconds.<\/code><\/li>\n<li>Now I can see the title and the start of the post on my first page and when\nclicking on it, I can see all the text.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Adding an image:<\/strong><\/p>\n<ul>\n<li>This is not really necessary for this post, but I wanted to document it as\npart of the workflow.<\/li>\n<li>I wanted to show the front matter and start of this post, so I took a\nscreen shot of the top of my editor window.<\/li>\n<li>Then I renamed the image file and moved it into the <code>images<\/code> folder of my\nsite.<\/li>\n<li>Now to embed the image using this Markdown: <code>![Post header][2]<\/code><\/li>\n<li>As you can see, I prefer to group all links (images &amp; URLs) at the end of\nthe document and keep the body of the text as clean as possible.<\/li>\n<li><img src=\"https:\/\/troz.net\/images\/post_header.png\" alt=\"Post header\"><\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Proofing:<\/strong><\/p>\n<ul>\n<li>Now that I have the text of my post, I need to proof-read it from the local\nJekyll server.<\/li>\n<li>The <code>jekyll serve<\/code> command running in Terminal keeps the pages up-to-date\nas you edit, but you will need to refresh your page in the browser manually\nto check your changes.<\/li>\n<li>And I have found that if you make a major change to the site e.g. a CSS\nfile or a config file, then it is best to stop the Jekyll server and start\nit again to make it re-build all the files.<\/li>\n<li>To be completely sure, stop the server and run <code>jekyll build<\/code> in Terminal\nalthough this may only do what <code>jekyll serve<\/code> does on startup anyway.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Publishing:<\/strong><\/p>\n<ul>\n<li>Now it is time to publish.<\/li>\n<li>As I am using GitHub Pages to host, the site files are all part of a single\nGit repository.<\/li>\n<li>And as I understand it, the data <strong>must<\/strong> be in the <code>master<\/code> branch.<\/li>\n<li>Opening up the GitHub client, I see that my repository has a bunch of\nchanges: - the file I am working on - the image I inserted - feed.xml -\nindex.html files for each page<\/li>\n<li>This is as expected, since all pages are pre-generated when using Jekyll,\nso pages of posts must be re-rendered when a new post is added to the top.<\/li>\n<li>Note that several of the files appear twice: once from where they are\nedited and once from the _site folder which serves them.<\/li>\n<li>Just two simple steps now, using the GitHub client: 1. Commit 2. Sync<\/li>\n<li>And that&rsquo;s it. My new post is online and ready for reading.<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><strong>Summary:<\/strong><\/p>\n<ul>\n<li>This was my first post after the one I wrote when setting up, so the first\nreal post.<\/li>\n<li>While there appear to be a lot of steps, none of them are difficult.<\/li>\n<li>But I do have 4 apps running to do it: 1. TextWrangler for editing 1.\nTerminal to run the local Jekyll server 1. Safari to check the finished\npost 1. GitHub to commit and upload<\/li>\n<li>Automating this is an obvious next step, so stay tuned&hellip;<\/li>\n<\/ul>\n<\/li>\n<\/ol>\n","url":"https:\/\/troz.net\/post\/2015\/workflow-for-writing-a-post\/","date":447638400},{"title":"New Site for TrozWare","content":"<h2 id=\"welcome-to-trozwares-new-site\">Welcome to TrozWare&rsquo;s new site.<\/h2>\n<p>It appears that I am not alone in deciding to move away from WordPress.\nWordPress is great - easy to set up and with lots of cool themes to allow\ncustomisation of your site. But it is slow, especially if (like me) you are\nrunning on a low-cost shared server.<\/p>\n<p>I had been reading about <a href=\"http:\/\/jekyllrb.com\">Jekyll<\/a>, so I decide to give it a go and also host\nmy site on <a href=\"https:\/\/pages.github.com\">GitHub<\/a>, taking advantage of their faster servers.<\/p>\n<p>I followed the advice given by <a href=\"http:\/\/www.girliemac.com\/blog\/2013\/12\/27\/wordpress-to-jekyll\/\">Girlie Mac<\/a> and performed the migration from\nmy self-hosted WordPress site. I am using the <a href=\"http:\/\/pixyll.com\">Pixyll<\/a> theme by <a href=\"http:\/\/johnotander.com\">John\nOtander<\/a> with a few tweaks of my own. The site is much faster to load, and I\nam hoping that the easier editing will inspire me to write more posts.<\/p>\n<p>Of course it wasn&rsquo;t all positive. WordPress did give me some features I liked,\nbut I think overall the result is better.<\/p>\n<h3 id=\"wordpress\">WordPress<\/h3>\n<ul>\n<li>WordPress gave me a full LAMP stack, so I could run my own PHP scripts.<\/li>\n<li>WordPress gave me a search function.<\/li>\n<li>Commenting was built-in.<\/li>\n<\/ul>\n<h3 id=\"jekyll\">Jekyll<\/h3>\n<ul>\n<li>Jekyll builds the pages out as static HTML, so all pages are pre-generated for\nfast loading.<\/li>\n<li>Writing for Jekyll is pure Markdown so it is easier to write and preview\nlocally.<\/li>\n<li>Some of the things I needed a plugin for in WordPress can be done natively in\nJekyll: - tables - syntax-highlighting<\/li>\n<\/ul>\n<p>For comments, I have switched to <a href=\"https:\/\/disqus.com\">Disqus<\/a>, but I am not sure about it yet. I\nwill evaluate over the next few weeks. In WordPress, I used a plugin to handle\nthe spam that inevitably arrived. I am hoping that Disqus will protect me from\nthat, but I have to see how good a job it does and whether the few real comments\nare worth it. A better option might be to turn off comments completely and just\nhave a contact form (which I have added using <a href=\"http:\/\/formspree.io\">Formspree<\/a>). Working in\nMarkdown is great. I love how I can have a really clean look in my editor and\nstill end up with well formatted HTML. I use Coda 2 on my Mac as my standard web\neditor, so that is what I am writing in now. I will probably experiment with\nother Markdown editors as I go. And for any Mac users out there working in\nMarkdown, I highly recommend <a href=\"http:\/\/brettterpstra.com\/projects\/markdown-service-tools\/\">Brett Terpstra&rsquo;s Markdown Service Tools<\/a>.<\/p>\n","url":"https:\/\/troz.net\/post\/2015\/new-site-for-trozware\/","date":447465600},{"title":"World Time In Words","content":"<p><!-- raw HTML omitted -->World\nTime In Words version 3.0<!-- raw HTML omitted --> is now available in the Mac App Store.<\/p>\n<p>With version 3.0 of this app, I have changed the name to &ldquo;World Time In Words&rdquo;.\nThis is to reflect what I feel to be the most useful feature of this app: the\nability to convert between time zones.<\/p>\n<p>It has two other new features:<\/p>\n<ol>\n<li>The time shown in the menu bar can now be set to use 24-hour time. Go to\nPreferences to change this.<\/li>\n<li>If you temporarily need to see the time in digital format, hold down Option\nwhen opening the menu.<\/li>\n<\/ol>\n<p>And there is one other thing in this version that I am almost too embarrassed to\nmention: after using this app for about two years, it was finally pointed out to\nme that the 3rd of every month was being shown as the &ldquo;3th&rdquo;. Oh dear - it was a\ncopy-paste error but I should I found it a long time ago.<\/p>\n<p>As always, please let me know if you have any suggestions for future versions.<\/p>\n","url":"https:\/\/troz.net\/world-time-in-words\/","date":445219200},{"title":"Man Reader 1.4 Now Available","content":"<p><a href=\"https:\/\/troz.net\/manreader\/\">Man Reader 1.4<\/a> is now available through the <a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Mac App Store<\/a>.<\/p>\n<h4 id=\"the-new-features-and-fixes-are\">The new features and fixes are:<\/h4>\n<ul>\n<li>Fix for plain text view not wrapping correctly for odd-sized fonts.<\/li>\n<li>Fix for HTML text view over-riding font colors that may be invisible.<\/li>\n<li>Search for missing entry (e.g. g++) no longer requires Enter or Return.<\/li>\n<li>Better automatic selection of matching entries while searching.<\/li>\n<li>Fix for animation warning message appearing in Console.<\/li>\n<li>Status display shows when man page list is being updated.<\/li>\n<li>Searching inside a page now allows a minimum of 2 characters (was 3), so\nflags<br>\ne.g. ‘-b’ do not need to be escaped.<\/li>\n<li>Fixed path for Network Utility in tool bar (moved in OS X 10.9).<\/li>\n<li>More information available about the effects of sand-boxing for this app.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2014\/man-reader-1-4-now-available\/","date":418176000},{"title":"Email clients for Mac and iOS","content":"<p>Some people are moving away from email, but for me, it remains the best way to\ncommunicate online. I get to keep a record of conversations and the attached\nfiles are with the text so I can always see the context.<\/p>\n<p>But I think everyone would agree that Apple have dropped the ball with Mail in\nOS X Mavericks, and to a lesser extent, in iOS 7.<\/p>\n<p>So I have been on a campaign lately to find an email client that suits my needs.\nI don&rsquo;t feel that I have found the perfect answer yet, but I am getting there.<\/p>\n<p>The first step was to work out what I really needed in an email client:<\/p>\n<ul>\n<li>support for IMAP accounts and Gmail accounts<\/li>\n<li><!-- raw HTML omitted -->unified inbox - all accounts shown\ntogether<!-- raw HTML omitted --><\/li>\n<li>conversation threading<\/li>\n<li>support for POP accounts (optional)<\/li>\n<\/ul>\n<p> <\/p>\n<p>On the Mac, I have narrowed it down to two clients that I am swapping between\nevery few days: <!-- raw HTML omitted -->Unibox<!-- raw HTML omitted -->\nand <!-- raw HTML omitted -->Airmail<!-- raw HTML omitted -->.<\/p>\n<p>Unibox is different in the way it displays your emails. It is much more focussed\non people and conversations, so the side bar shows all the people who you have\nsent emails to or received emails from, grouped by date. I really like the\nmerging of incoming &amp; outgoing emails, but it can be a bit weird if you delete\nthe latest email from someone who then disappears from sight.<\/p>\n<p>Emails are grouped by a single person, not by conversation. There is a button on\nappropriate emails to toggle conversation view for that particular thread, but\nit doesn&rsquo;t stick.<\/p>\n<p>In order to show a conversation, they truncate emails in the main part of the\nwindow and show a &ldquo;More&rdquo; button at the bottom of the email to expand it. This\nwas annoying, but in the latest beta, it performs much better, so you are not\ncontinually tapping this to see a long email.<\/p>\n<p>Airmail has a more conventional display. Threading and the layout of threaded\nemails are both very nice. There are multiple view options, which I find can get\na bit messy looking, so I prefer the &ldquo;Minimized View&rdquo; setting. Airmail also does\nPOP accounts which is a plus.<\/p>\n<p>The main reason I keep going back to Unibox is the unification. I have grown to\nlike having sent and received messages all in the same window without having to\ngo and find them somewhere else.<\/p>\n<p> <\/p>\n<p>On the iPad, I am currently using\n<!-- raw HTML omitted -->Boxer<!-- raw HTML omitted --> and have tried\nnumerous others. <!-- raw HTML omitted -->Molto<!-- raw HTML omitted -->\nwas quite good and the interface was fun, but it would only use landscape mode\nand like to be able to swap. Boxer is not great in portrait mode, but it does\nwork.<\/p>\n<p>So the jury is still out for iPad email clients, but on the Mac, I am leaning\ntowards Unibox.<\/p>\n","url":"https:\/\/troz.net\/post\/2014\/email-clients-for-mac-ios\/","date":417398400},{"title":"Berio Sequenza VII","content":"<p>So my latest app is way outside my usual sphere but that&rsquo;s what happens when\nfamily decide that what you do might actually be useful!<\/p>\n<p>My son is an oboist and he is currently learning Berio&rsquo;s Sequenza VII for Oboe.\nThis is a weird piece without a standard time signature. Instead each line has\n13 bars with each bar being allocated a certain time span in actual seconds. As\ncan easily be imagined, this makes learning and practicing this piece more of a\nmathematical exercise than a musical one.<\/p>\n<p>So I wrote him an app to sound out the end of each bar. Once he and his teacher\nused it, a few more features crept in and now I think it will be of great\nassistance to any student or teacher trying to work on this piece.<\/p>\n<p>While I doubt that many oboists frequent this web site, it anyone who does can\npass this on to any oboist, I would be very grateful, and I think the oboist\nwould be too!<\/p>\n<p>The app is available through the\n<!-- raw HTML omitted -->iTunes\nApp Store<!-- raw HTML omitted -->.<br>\nMore details are on <a href=\"https:\/\/troz.net\/berio\/\" title=\"Berio’s Sequenza VII\">this page<\/a>.<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/berio-sequenza-vii\/","date":405475200},{"title":"Berio's Sequenza VII","content":"<p><!-- raw HTML omitted -->Luciano\nBerio<!-- raw HTML omitted --> wrote a series of Sequenzas for various instruments with Sequenza VII\nbeing the one for oboe.<br>\n<!-- raw HTML omitted --><\/p>\n<p>Preparing this work creates some unique problems for the oboist as Berio did not\nadhere to any time signature that could be indicated by a metronome. Instead,\neach line consists of\n<!-- raw HTML omitted -->13\nbars (measures) with each bar&rsquo;s length specified in exact seconds<!-- raw HTML omitted -->.<\/p>\n<p>When my son (an oboist currently studying in Melbourne, Australia) started\ntrying to learn this piece, it occurred to him that having an iOS app developer\nin the family could be of some assistance. So with instructions from him and\nwith suggestions from other oboists, I have developed the\n<!-- raw HTML omitted -->Berio\nSequenza VII app for iPhone or iPod Touch<!-- raw HTML omitted -->.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>With the default settings it will count the bar lengths, using metronome-like\nsounds to mark the starts of bars and lines. The player who needs to practice a\nspecific bar can easily set the app to start at that bar and even to repeat that\nbar length continuously.<\/p>\n<p>Tapping the &ldquo;i&rdquo; button at the bottom right of the screen takes you to the more\nadvanced options.<\/p>\n<p>The &ldquo;Settings&rdquo; section deals primarily with the B4 drone that is supposed to\naccompany the performance of this piece. While in an actual performance, the\ndynamics of this drone would vary, for this practice app it remains at a\nconstant volume as specified by you. The volume can be set to a percentage of\nthe iPhone&rsquo;s current volume setting. If it is still too quiet, plug your iPhone\ninto a speaker or use some sort of physical amplification. If you prefer to play\nwith an A other than 440 Hz, that can be adjusted. And finally, the wave form\nused to generate this drone sound can be switched between a sine wave or a\ntriangle wave. Disclaimer: excessive use of this drone may cause loss of\nfriends!<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>The Settings page also includes an option to slow down the times for practice.\nAt 100% speed, bar 1 on each line will last for 3 seconds. The speed can be\nreduced to allow each bar to last longer, for use during the learning process.<\/p>\n<p>The &ldquo;Bars &amp; Sounds&rdquo; section allows you to customise the various options marking\nthe start of each new bar. You can specify the number of seconds &amp; the sound\nused to count you in after tapping the Start button. You can also select which\nof the metronome sounds to use to mark the start of each bar, making the first\nbar of each line use a different sound if you prefer. Finally, in case you are\nplaying so loudly that you are unable to hear the iPhone, you can set the screen\nto flash a different color at the start of each new bar.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>Jacqueline Leclair wrote a\n<!-- raw HTML omitted -->supplementary\nedition<!-- raw HTML omitted --> of this work in 2000 using traditional time signatures in a way that\nalmost exactly duplicates the original timings. This app is designed for use\nwith the original score using Berio&rsquo;s real time bar lengths.<\/p>\n","url":"https:\/\/troz.net\/berio\/","date":405388800},{"title":"Icon Builder & iOS 7","content":"<p>Icon Builder 1.2 was released on 18 September 2013.<br>\nIt was an update with 2 new functions:<\/p>\n<ul>\n<li>The ability to create images to suit an Xcode 5 assets library<\/li>\n<li>The ability to create icons with the required sizes for IOS 7 apps.<\/li>\n<\/ul>\n<p>Knowing that iOS 7 apps can only be built using Xcode 5, I linked the switch for\nthese 2 abilities in a single check box.<br>\nThe problem was not really that they were in a single checkbox but that I had labelled\nit badly, so it was not obvious that this was what needed to be checked to create\niOS 7 sized icon files.<\/p>\n<p>After some feedback from early users, it became clear to me that this was not\nenough. So 1.2.1 is now waiting for Apple&rsquo;s approval.<br>\nThe changes in this version are:<\/p>\n<ul>\n<li>More informative labelling of the checkbox.<\/li>\n<li>The checkbox is checked by default is Xcode 5 is installed<\/li>\n<\/ul>\n<p>While waiting for the new version to be approved, please be aware that iOS 7\nicon sizes will only be generated if you select &ldquo;Check Assets (for Xcode 5.x or\nlater)&rdquo;<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/icon-builder-ios-7\/","date":401587200},{"title":"Icon apps updated","content":"<p><!-- raw HTML omitted -->Icns\nMaker<!-- raw HTML omitted --> and\n<!-- raw HTML omitted -->Icon\nBuilder<!-- raw HTML omitted --> have both just been updated to support Xcode 5.<\/p>\n<p>Icon Builder is a Mac app that takes your images and creates all the required\nicon files for use in your iOS apps.<br>\nIt now supports Xcode 5&rsquo;s image assets folders and if you are using Xcode 5, it will\ncreate the icon sizes required for iOS 7 app.<\/p>\n<p>Icns Maker is a Mac app that takes your images and creates icons for use in your\nMac apps.<br>\nFor Xcode 4 or earlier, it creates a .icns file.<br>\nFor Xcode 5, it creates a folder of images for use in your project&rsquo;s image\nassets folder.<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/icon-apps-updated\/","date":401241600},{"title":"Markdown","content":"<p>For some time now, I have been aware of the increasing trend towards using\nMarkdown for text editing and for creating HTML. Markdown has been on my list of\n&ldquo;things I should learn some day&rdquo; so I was interested last week to read about a\nnew iBooks book called <a href=\"http:\/\/macsparky.com\/markdown\">The MacSparky Markdown Field Guide<\/a>. This was\nsufficient inspiration so I got the book and read through it this weekend.<\/p>\n<p><img src=\"http:\/\/static.squarespace.com\/static\/5008676d84aeae82b8acdd8c\/t\/5147c7a6e4b0d224b4419401\/1363658669971\/Markdown%20Cover%20Art%20-%20JPG.jpg?format=500w\" alt=\"The MacSparky Markdown Field Guide\"><\/p>\n<p>Actually, to say that I <em>read<\/em> through the book is a mis-representation. The\nbook was written using iBooks Author specially for the iPad and contains screen\ncasts and interviews as well as text. But by the end of it, I now feel I have a\nbasic understanding on Markdown and the ways in which I can use it.<\/p>\n<p>I guess the really big thing about using Markdown is that is creates plain text\nfiles that are human-readable even without being converted to HTML. This makes\nthem future-proof since they are not tied to a proprietary file format that may\ncease to exist at any time.<\/p>\n<hr>\n<h2 id=\"using-markdown\">Using Markdown:<\/h2>\n<p>Since this web site is a self-hosted WordPress site, my next step was to look\nfor a WordPress plugin that would allow me to use Markdown to create my posts. I\ncould have used a Markdown editor that had HTML export, but I wanted to try\nsomething that would eliminate the extra step. The first one I decide to try was\n<a href=\"http:\/\/wordpress.org\/extend\/plugins\/markdown-on-save-improved\/\">Markdown on Save Improved<\/a>.<\/p>\n<p>One of the main reasons for choosing this one was that it stores the posts as\nboth Markdown and as HTML. This saves time when going back to edit a post,\navoids the constant changes that creep in when converting between formats all\nthe time, and makes it so that the post will still display correctly even if\nMarkdown is no longer supported. The only problem I have found so far is that it\ndoesn&rsquo;t automatically create links &amp; image links using the Markdown format, but\nuses standard <code>&lt;a&gt;<\/code> and <code>&lt;img&gt;<\/code> links instead.<\/p>\n<p>My next stop, since I always use a Mac, was to get Brett Terpstra&rsquo;s collection\nof <a href=\"http:\/\/brettterpstra.com\/projects\/markdown-service-tools\/\">Services for Markdown<\/a>. These add a lot on convenient shortcuts: one of\nmy favourites is the ability to convert inline links to references links for\nincreased readability while editing.<\/p>\n<hr>\n<h2 id=\"first-impressions\">First Impressions:<\/h2>\n<p>So having written this first post in Markdown, how do I feel about it? I haven&rsquo;t\nreally tried anything too weird this time, but there are a few things that were\nvery easy to do. Particularly in the paragraph where I was talking about links &amp;\nimages and wanted to include the tags as text without having it interpreted as\nHTML. All I had to do was surround the text with back-ticks.<\/p>\n<p>Links are vastly easier to manage and edit in Markdown. I miss the ability to\nspecify that links should open in a new tab - I prefer to have that setting for\nlinks that take you outside my web site, but the modern theories on usability\nseem to be heading towards deprecation of this feature, so I may just stop using\nit.<\/p>\n<p>With the standard WordPress editor, I always felt that I was fighting it. I had\nto swap between the visual &amp; HTML editor tabs and when I swapped tabs, things\nwould sometimes change without me doing anything. So far, I feel more in control\nusing Markdown and although I have lost the WYSIWYG visual editor, I no longer\nhave to wade through the HTML editor to get the effect I want or to remove the\nresults of a few careless clicks.<\/p>\n<hr>\n<h2 id=\"what-next\">What next?<\/h2>\n<p>Some of the things on my wish list would be solved by a better editor and some\nby more powerful syntax.<\/p>\n<p>Editor:<\/p>\n<ul>\n<li>Adding links &amp; images using Markdown style instead of HTML<\/li>\n<li>Being able to create lists\n<ul>\n<li>Markdown makes this very easy but this WP plugin does not support lists as\nfar as I can tell<\/li>\n<li>So these lists are in HTML<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Syntax:<\/p>\n<ul>\n<li>Alignment of text &amp; images<\/li>\n<\/ul>\n<p>Using a stand-alone Markdown editor would solve the editor questions, but I\nwanted to try writing this post completely in WordPress.<br>\nAnd with the alignment, there is nothing to stop me adding CSS to the Markdown.<\/p>\n<p>Next time, I will test out a different WordPress Markdown editor and see how\nthat goes. I will also test using a standalone editor and exporting its HTML to\ncreate a post.<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/markdown\/","date":386467200},{"title":"A Knight's Move 1.3","content":"<p><strong>UPDATE:<\/strong> September 2016 - A Knight&rsquo;s Move for iOS is no longer available.<!-- raw HTML omitted -->\n<a href=\"https:\/\/troz.net\/knightsmove\/\">A Knight&rsquo;s Move for Mac<\/a> is still supported.<\/p>\n<hr>\n<p>A Knight&rsquo;s Move has been updated to version 1.3. The Mac version is available\nthrough the\n<!-- raw HTML omitted -->Mac\nApp Store<!-- raw HTML omitted -->.<\/p>\n<h2 id=\"three-new-level-packs\">Three new level packs:<\/h2>\n<ul>\n<li>Eight by Eight<\/li>\n<li>Bishops Rule<\/li>\n<li>Castles<\/li>\n<\/ul>\n<p>Eight by Eight has every puzzle set in a chessboard sized grid with more\nconventional placing of pieces.<br>\nBishops Rule has at least one Bishop in every puzzle.<br>\nCastles has a Castle or Rook in every puzzle and is suited to players who would\nlike more of a challenge.<\/p>\n<h2 id=\"new-feature\">New feature:<\/h2>\n<p>When your knight has been taken, you have the option to undo the last move so\nyou can try again without losing the moves you have already made.<\/p>\n<p><!-- raw HTML omitted --><\/p>\n","url":"https:\/\/troz.net\/post\/2013\/a-knights-move-1-3\/","date":383616000},{"title":"Man Reader (no SB)","content":"<p>These instructions are no longer valid. As of version 1.5, the App Store version\nof Man Reader has solved the sand-boxing issues and is now as powerful as the\nnon-sand-boxed version.<\/p>\n<p>The non-sand-boxed version will no longer be supported or updated, so please\nrevert to the App Store version.<\/p>\n<hr>\n<p>If you find that Man Reader is not working well for you due to Apple&rsquo;s\nsandboxing restrictions, then you can download a non-sandboxed version here. To\nfind out more about this, including how to test if you are affected, read the\n<a href=\"https:\/\/troz.net\/manreader-sandbox\/\">Sand-Boxing Man Reader<\/a> page.<\/p>\n<p>The non-sandboxed version will only work if you have the App Store version of\nMan Reader already installed.<\/p>\n<p>When you run &lsquo;Man Reader (no SB)&rsquo; for the first time, it will check to see if\nyou have a valid installation of &lsquo;Man Reader&rsquo; that you have purchased from the\nApp Store.<br>\nIf you do not, &lsquo;Man Reader (no SB)&rsquo; will offer to take you to the App Store and then\nquit.<\/p>\n<p>If you already own the App Store version of Man Reader and &lsquo;Man Reader (no SB)&rsquo;\nhas started once, you can delete the App Store version and &lsquo;Man Reader (no SB)&rsquo;\nwill keep working.<\/p>\n<p>To install &lsquo;Man Reader (no SB)&rsquo;, click the download link below. This will\ndownload &lsquo;ManReader-noSB.zip&rsquo;. Double-click on this file to un-zip it, and then\nmove the &lsquo;Man Reader (no SB).app&rsquo; into your Applications folder and use as\nnormal. Do not delete the App Store version of Man Reader until &lsquo;Man Reader (no\nSB)&rsquo; has been run at least once.<\/p>\n<h2 id=\"deldownload-man-reader-no-sbdel2\"><a href=\"#\"><!-- raw HTML omitted -->Download Man Reader (no SB)<!-- raw HTML omitted --><\/a><\/h2>\n<p>I found out today (thanks Ron) that under OS X 10.10.3 the security settings no\nlonger allow the downloaded version of Man Reader (no SB) to run, despite the\nfact that I have signed it with my Apple Developer ID. OS X gives a very\nun-helpful dialog reporting that the app is damaged. In fact the app is fine,\nbut being blocked by the security settings. The solution as shown at\n<a href=\"http:\/\/www.tech-recipes.com\/rx\/45404\/mac-downloaded-app-is-damaged-and-cant-be-opened-error-solved\/\">TechRecipes<\/a> is to change your security system preferences to allow\ndownloaded apps from anywhere. You only need to do this temporarily as after you\nhave run the app once you can set this setting back to whatever you had before.<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/man-reader-no-sb\/","date":381801600},{"title":"Sand-Boxing Man Reader","content":"<p>These instructions are no longer valid. As of version 1.5, the App Store version\nof Man Reader has solved the sand-boxing issues and is now as powerful as the\nnon-sand-boxed version.<\/p>\n<p>The non-sand-boxed version will no longer be supported or updated, so please\nrevert to the App Store version.<\/p>\n<hr>\n<p>As with all apps in the App Store, <a href=\"https:\/\/troz.net\/manreader\/\">Man Reader<\/a> is restricted by Apple&rsquo;s\nsand-boxing policy. Sand-boxing is a great thing. It isolates apps from each\nother and from the system, making it far less likely that a problem app will\ncause wide-spread havoc. However for an app like Man Reader, this can lead to a\ndrop in functionality.<\/p>\n<p>Due to the permissions limitations of sand-boxing, Man Reader can only search\ndefined paths on your system drive e.g. \/usr\/, \/opt\/<br>\nThis is where the default man pages are all stored, but if you install other software\n(Xcode is a good example), then Man Reader may not be able to list all the available\nman pages on your system.<\/p>\n<p>To tell if Man Reader is missing man pages, copy &amp; paste the following command\ninto the Terminal app:<\/p>\n<pre><code>whatis . &gt;&gt; ~\/Desktop\/whatis.txt\n<\/code><\/pre>\n<p>Man Reader runs this command internally when it starts, but the Terminal app is\nnot sand-boxed and so can access everything.<br>\nRunning this command will create a text file on your desktop with a list of all available\nman pages on your system. Open it in a text editor that can show the number of lines\nin a file. <a href=\"http:\/\/www.barebones.com\/products\/textwrangler\/\">TextWrangler from Bare Bones Software<\/a> is a good free editor that\nwill do this.<\/p>\n<p>To check what man pages ManReader can read, go to Finder and select &lsquo;Go to\nFolder&hellip;&rdquo; from the Go menu. Paste in the following path:<\/p>\n<pre><code>~\/Library\/Containers\/net.troz.Man-Reader\/Data\/Library\/Application Support\/Man Reader\/\n<\/code><\/pre>\n<p>You will see two files: open the one called &lsquo;ManReader.raw&rsquo; in your text editor.\nThis is the result of Man Reader running the whatis command. Compare the number\nof lines in the two files. Don&rsquo;t worry about the order of the items in the file\nas that may vary, you are only concerned with the total number of lines in each.<\/p>\n<p>There may be one or two lines more in the whatis.txt file but if there is a big\ndifference, then you are being sand-boxed&hellip;<br>\nAs an example, on my system, the whatis.txt file contains 8954 lines and the ManReader.raw\nfile contains 2320 lines!<\/p>\n<p><!-- raw HTML omitted -->If you are affected by this or think that you might be, I now have a\nsolution - actually two possible solutions:<!-- raw HTML omitted --><\/p>\n<p><!-- raw HTML omitted -->If you have already bought Man Reader from the App Store, then you can\n<a href=\"#\">download a non-sandboxed version<\/a>. This will only work if you have the App\nStore version of the app installed.<!-- raw HTML omitted --><\/p>\n<p><!-- raw HTML omitted -->If you do not already own a copy of Man Reader, and want to buy it\nun-sandboxed, then you can now <a href=\"#\">buy it directly<\/a>.<!-- raw HTML omitted --><\/p>\n<p>Please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20and%20Sand-Boxing\">contact me<\/a> if you have any issues with this.<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/sand-boxing-man-reader\/","date":381801600},{"title":"Icns Maker & Icon Builder updated","content":"<p>January 18th 2013:<\/p>\n<p>Both of the icon building apps have now been updated to fix a but that made\nincorrect icon sizes when running on a Retina MacBook Pro.<\/p>\n<p><a href=\"https:\/\/troz.net\/icns-maker\/\" title=\"Icns Maker\"> Icns Maker<\/a> uses your image to create an icns file for Mac apps.<\/p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><\/p>\n<p><a href=\"https:\/\/troz.net\/icon-builder\/\" title=\"Icon Builder\">Icon Builder<\/a> uses your image to create the suite of icon files needed for\niOS apps.<\/p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><\/p>\n","url":"https:\/\/troz.net\/post\/2013\/icns-maker-icon-builder-updated\/","date":380246400},{"title":"Icon Makers & Retina Macs","content":"<p>Icns Maker which makes an icns icon file for Mac apps, and Icon Builder which\nmakes the suite of png files needed for iOS apps, are both compatible with the\nRetina MacBook Pro.<\/p>\n<p>However it was recently brought to my attention (thanks Cameron), that when\nrunning on a Retina MBP, all the icon files were exactly twice as large as they\nshould be. The Icon.png file which supplies the main app icon for iPhone apps\nshould be 57 pixels by 57 pixels. Using Icon Builder on a Retina MBP produced an\nIcon.png file that was 114 x 114 pixels.<\/p>\n<p>I have now worked out how to persuade the Retina Mac that when I ask for an\nimage size, I actually want that size, not the size that OS X thinks would look\nbetter. Updates to these 2 apps will be submitted to the App Store for approval\nlater today which will solve the problem.<\/p>\n<p>In the meantime, there is a work-around for Retina MBP users: force the app to\nrun in low resolution mode.<\/p>\n<p>In Finder, open your Applications folder and select the app (this works for both\nIcns Maker and Icon Builder). Press Command-I or choose Get Info from the File\nmenu which will open a window like this:<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>Check the checkbox labelled &ldquo;Open in Low Resolution&rdquo;. Next time the app is\nopened, it will ignore the Retina options and use standard resolution only. This\nwill create icon files with the correct sizes. However text may look slightly\nfuzzy.<\/p>\n<p>When the updates to these apps become available, make sure you go back and\nun-check this setting to return to Retina mode.<\/p>\n","url":"https:\/\/troz.net\/post\/2013\/icon-makers-retina-macs\/","date":379814400},{"title":"A Knight's Move updates","content":"<p><strong>UPDATE:<\/strong> September 2016 - A Knight&rsquo;s Move for iOS is no longer available.<!-- raw HTML omitted -->\n<a href=\"https:\/\/troz.net\/knightsmove\/\">A Knight&rsquo;s Move for Mac<\/a> is still supported.<\/p>\n<hr>\n<p>A Knight&rsquo;s Move for iOS has been updated to take advantage of the taller iPhone\n5 screen.<\/p>\n<p>In-app purchasing of packs has been removed from both Mac &amp; iOS versions.<br>\nFor iOS, the app is now free but supported by iAds (please click through if you would\nlike to show your support).<br>\nApple does not have an ad system for Mac, so the Mac version is now a paid app\nthat includes all the puzzle packs.<\/p>\n<p>The in-app purchasing was an interesting experiment, but the ratio of purchases\nto downloads was too low to sustain the development.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/a-knights-move-updates\/","date":371952000},{"title":"App Store Review Times","content":"<p>There are been a lots of stories going around about lengthening Mac App Store\nreview times.\n<!-- raw HTML omitted -->Shiny\nDevelopments<!-- raw HTML omitted --> crowd-sourced data certainly backs this up although they have\nmuch more data for iOS apps than for Mac apps.<\/p>\n<p>Some people, including\n<!-- raw HTML omitted -->Lex\nFriedman of MacWorld<!-- raw HTML omitted --> and\n<!-- raw HTML omitted -->John\nGruber of Daring Fireball<!-- raw HTML omitted -->, are suggesting that the delays are due to the\nrush of new apps to support the iPhone 5 and iOS 6. This implies that there is\nonly one set of review staff and that a large proportion of them have been moved\nfrom Mac to iOS apps.<\/p>\n<p>I think this is an incorrect analysis. The slowdown started before iOS 6 and\nbefore the iPhone 5. I think it started in June when Apple started to enforce\nMac sandboxing.<\/p>\n<p>As discussed in a <a href=\"https:\/\/troz.net\/sandboxing-and-the-mac-app-store\/\">previous post<\/a>, I have had a lot of trouble getting Man\nReader to be sandbox-compatible leading to many rejections. One problem was that\nI had implemented sand-boxing before the deadline, but with some temporary\nentitlements to allow read-only access to required system files. This\nentitlement was approved initially, but after one rejection, an Apple reviewer\ntold me that they had been approving all requested entitlements before the\ndeadline, but now were actually reviewing them all.<\/p>\n<p>To me, this seems like a rather silly thing to have done which has now returned\nto haunt them. Instead of allowing developers time to get used to the\nrestrictions, Apple reviewers allowed developers to think that their apps were\nsandbox-complient already. Then Apple was faced with the enormous task of\nre-checking all the entitlements that they had previously allowed without\nchecking. This was unfair to developers and has only created extra work for the\nreviewers.<\/p>\n<p>Here is a table showing the recent review times for my Mac apps:<\/p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">App<\/th>\n<th align=\"left\">Process<\/th>\n<th align=\"center\">Review days<\/th>\n<th align=\"center\">Dates<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td align=\"left\">Time In Words<\/td>\n<td align=\"left\">update<\/td>\n<td align=\"center\">22<\/td>\n<td align=\"center\">Sept 22 - Oct 14<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">Icns Maker<\/td>\n<td align=\"left\">new app<\/td>\n<td align=\"center\">24<\/td>\n<td align=\"center\">Aug 5 - Aug 29<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">A Knight&rsquo;s Move<\/td>\n<td align=\"left\">update<\/td>\n<td align=\"center\">26<\/td>\n<td align=\"center\">Sept 6 - Oct 2<\/td>\n<\/tr>\n<tr>\n<td align=\"left\">Icon Builder<\/td>\n<td align=\"left\">new app<\/td>\n<td align=\"center\">33<\/td>\n<td align=\"center\">Aug 22 - Sept 24<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<!-- raw HTML omitted -->\n<p>By comparison, when I submitted an update to A Knight&rsquo;s Move for iOS in October,\nit was passed in only 8 days.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/app-store-review-times\/","date":371952000},{"title":"Icon makers for Mac & iOS apps","content":"<p>Announcing two new apps for creating icons for with Mac or iOS projects:<\/p>\n<p><a href=\"https:\/\/troz.net\/icns-maker\/\" title=\"Icns Maker\">Icns Maker<\/a> helps you convert a single image into a .icns file in two\nsteps.<br>\n<a href=\"https:\/\/troz.net\/icon-builder\/\" title=\"Icon Builder\">Icon Builder<\/a> creates all the files needed to set up your icons for any iOS project.<\/p>\n<h2 id=\"creating-icon-files-for-mac-apps\">Creating icon files for Mac apps:<\/h2>\n<p>In versions of Xcode before 4.4, Apple provided an app called “Icon Composer”.\nIt allowed you to drag images into a window and export a .icns file for use in\nyour Mac apps. With Xcode 4.4, Apple has changed the way icons are handled for\nMac apps and “Icon Composer” is no longer supplied.<\/p>\n<p>The Xcode docs describe the process you need to go through to make a .icns file:\ncreate a suite of image files of the correct size and with the correct file\nnames, bundle them into a specially named folder and then use Terminal to stitch\nthem together.<\/p>\n<p><a href=\"https:\/\/troz.net\/icns-maker\/\" title=\"Icns Maker\">Icns Maker<\/a> does all this for you in two easy steps.<\/p>\n<ol>\n<li>Drag in an image file (preferably 1024x1024 but 512x512 will also work).<\/li>\n<li>Click a button.<\/li>\n<\/ol>\n<p>There are more options available for fine-tuning your icons allowing you to\nselect different images for the various sizes, but this is all that is needed\nfor basic operation.<\/p>\n<p>Icns Maker is available from the\n<!-- raw HTML omitted -->Mac\nApp Store<!-- raw HTML omitted -->.<\/p>\n<hr>\n<h2 id=\"creating-icon-files-for-ios-apps\">Creating icon files for iOS apps:<\/h2>\n<p>Icons for iOS apps are not bundled into a single file like a Mac .icns file. You\nadd various .png images to your project. Depending on the devices supported by\nyour app, you will need many different sizes of icon file. There are some icons\nfor iPad only, some for iPhone \/ iPod Touch only and others required for any\ndevice. Additionally, you will need larger versions of each image to support\nRetina displays.<\/p>\n<p><a href=\"https:\/\/troz.net\/icon-builder\/\" title=\"Icon Builder\">Icon Builder<\/a> is a Mac app that does all this for you. As with Icns Maker,\nyou just drag your image into the app and click a button. You can also select\nwhich devices your icon needs to suit and use different images for the different\nsizes if you want finer control.<\/p>\n<p>When the app creates your icon files, it generates a ReadMe file with the\ninformation needed for installing these files in your project, including\ninformation to copy &amp; paste directly into your Info.plist file.<\/p>\n<p>Icon Builder is available from the\n<!-- raw HTML omitted -->Mac\nApp Store<!-- raw HTML omitted -->.<br>\nNote that although this app builds icon files for iOS app, it runs on a Mac.<\/p>\n<hr>\n<h2 id=\"naming\">Naming<\/h2>\n<p>Originally these apps were named in a consistent manner: Mac Icon Builder and\niOS Icon Builder. However both these names were rejected by Apple - you are not\nallowed to use the words &ldquo;Mac&rdquo; or &ldquo;iOS&rdquo; in any app name sold through the Mac App\nStore.<\/p>\n<p>Then I tried Icns Maker and Icon Maker. Icns Maker was approved, but there is\nalready an app called Icon Maker, so I went with Icon Builder. But by that time\nIcns Maker had already been released, so there was no way to make the names more\nconsistent.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/icon-makers-for-mac-ios-apps\/","date":371952000},{"title":"Icon Builder","content":"<p><a href=\"http:\/\/itunes.apple.com\/app\/icon-builder\/id552293482?mt=12\">Icon Builder 5.1<\/a> is available from the Mac App Store. Updated 26th September 2018 to support macOS Mojave dark mode and with extra icons needed for Apple Watch Series 4.<\/p>\n<h2 id=\"make-and-install-a-set-of-icons-for-an-ios-mac-or-apple-watch-app-in-3-steps\">Make and install a set of icons for an iOS, Mac or Apple Watch app in 3 steps:<\/h2>\n<p>1: Drag an image into the window.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/IconBuilder1.png\" alt=\"Make an icon set in 3 steps\"><\/p>\n<p>2: Choose the device family you are building for: iOS Universal, iPhone, iPad, Apple Watch, Mac, Sticker Pack or iMessage.<\/p>\n<p>3: Click &ldquo;Create icon assets&rdquo; and select the folder containing your Xcode project.<\/p>\n<p>Icon Builder will create an AppIcon set inside the &ldquo;Assets.xcassets&rdquo; folder for\nthat project.\nThe icons are immediately ready for use in your project with no installation necessary.<\/p>\n<hr>\n<h2 id=\"why-is-this-necessary\">Why is this necessary?<\/h2>\n<p>Depending on the devices supported by your app, you will need many different sizes of icon file. There are some icons for iPad only, some for iPhone \/ iPod Touch only and others required for any iOS device. Mac apps use completely different icon sizes. Apple Watch apps need a completely different set of icons and now with iOS 10, Messages apps and Sticker apps require even more - 2 different icon sets for Messages app. Additionally, you will need larger versions of each image to support Retina displays.<\/p>\n<p>These icons must be in PNG format, with the color space set to sRGB (or P3 for iOS apps, but Icon Builder always uses sRGB) and for iOS apps, with no transparency and with alpha channel in the image files.<\/p>\n<p>Your Xcode project contains a special folder called “Assets.xcassets” which contains all the image files used in your project, including the app icons. Icon Builder will install the icon files into your “Assets.xcassets” folder automatically and the icons are immediately ready for use in your project with no installation necessary.<\/p>\n<p>Icon Builder still allows you to create the old-style .icns file if required by selecting “Mac icns” in the device family popup menu. This can be useful for other development environments or when making icons for documents in your Mac app.<\/p>\n<blockquote>\n<p>You will get the best results if you start with a 1024 x 1024 image.<\/p>\n<\/blockquote>\n<hr>\n<h2 id=\"using-the-icon-images\">Using the icon images:<\/h2>\n<p><img src=\"https:\/\/troz.net\/images\/IconBuilder2.png\" alt=\"Using the icons\"><\/p>\n<p>Icon Builder creates all the required image files in a folder called “AppIcon.appiconset”, “AppIcon-Watch.appiconset” or “iMessage App Icon.stickersiconset” inside the “Assets.xcassets” folder for your project. If you already have images stored in an appiconset folder, Icon Builder will not over-write them, but will add a new folder e.g. “AppIcon-1.appiconset”. You can then switch between AppIcon sets in the project settings for your target app.<\/p>\n<p>If you prefer to add the icon files manually, select a folder that does not contain a .xcodeproj file and the icon sets will be saved directly to that folder. You can then drag the iconset folder manually into “Assets.xcassets” in your Xcode project.<\/p>\n<hr>\n<h2 id=\"whats-new-in-version-5\">What&rsquo;s New in version 5?<\/h2>\n<ul>\n<li>Icon images have the correct sRGB color profile attached.<\/li>\n<li>For iOS icons, transparency is replaced by white and the alpha channel is removed from the image file.<\/li>\n<li>The icons created match the latest Apple guidelines.<\/li>\n<li>The app has been completely re-written in Swift to use the latest macOS APIs so only supports macOS 10.13.x or later.<\/li>\n<\/ul>\n<hr>\n<h2 id=\"faq\">FAQ<\/h2>\n<p><strong>I thought there were only 2 steps before - why are there 3 now?<\/strong><\/p>\n<ul>\n<li>The 2 step process gave you a folder of image files. You then had to install them manually. So really, there were always three steps, but the app was not helping you with step 3. By adding a third step asking you to locate your project folder, I was able to make the app install the icons for you automatically. So the app is doing step 3 for you.<\/li>\n<\/ul>\n<p><strong>What if I want to install the icon files myself?<\/strong><\/p>\n<ul>\n<li>When asked to select a folder to save the icons, select a folder that does not contain a .xcodeproj file. Icon Builder will save all the files, but not install them into an Assets.xcassets or Images.xcassets folder automatically.<\/li>\n<\/ul>\n<p><strong>What image types can I use?<\/strong><\/p>\n<ul>\n<li>Any image type compatible with QuickTime, including JPEG, PNG, TIFF, GIF, PDF, PSD, BMP.<\/li>\n<\/ul>\n<p><strong>Does Icon Builder create icons for use in Mac apps?<\/strong><\/p>\n<ul>\n<li>Yes. Mac apps use image assets just like iOS apps, but with different image sizes. Select &ldquo;Mac App&rdquo; in the Device popup to create icons for a Mac app.<\/li>\n<li>Icon Builder still allows you to create the old-style .icns file if required by selecting &ldquo;Mac icns file&rdquo; in the Device popup menu. This can be useful for other development environments or when making icons for documents in your Mac app.<\/li>\n<\/ul>\n<p><strong>What is the difference between Mac App Icon and Mac icns file?<\/strong><\/p>\n<ul>\n<li>&ldquo;Mac AppIcon&rdquo; will create the modern AppIcon set of images for inclusion in your Assets.xcassets.<\/li>\n<li>&ldquo;Mac icns file&rdquo; will create an old style .icns file with all the image sizes embedded into a single file. Open the file in Preview to see the contents.<\/li>\n<\/ul>\n<p><strong>Does Icon Builder create icons for use in Watch Kit apps?<\/strong><\/p>\n<ul>\n<li>Yes. Select &ldquo;Apple Watch&rdquo; from the Device popup. Create a WatchKit target in your iOS project if necessary. When you are choosing the location to save the icons, select the folder containing the main .xcodeproj file. Icon Builder will find the WatchKit App folder and save the icons to the WatchKit App's Assets.xcassets folder. The icon set will be called AppIcon-Watch to help you distinguish between sets when allocating them to your apps.<\/li>\n<li>When the WatchKit icons have been made, Icon Builder will ask you if you want to use the same image to create the icons for the parent iOS app. Unless you want a different icon for the parent app, select the parent app device at this point to create the second set.<\/li>\n<\/ul>\n<p><strong>Does Icon Builder create icons for use in iMessage apps and Sticker Pack apps?<\/strong><\/p>\n<ul>\n<li>Yes. Select &ldquo;Sticker Pack App&rdquo; or &ldquo;iMessage App&rdquo; from the Device popup. When you are choosing the location to save the icons, select the folder containing the main .xcodeproj file and Icon Builder will create the icon sets accordingly.<\/li>\n<li>iMessage apps require two sets: one for the Messages extension and one for the parent iOS app. When the iMessage icons have been made, Icon Builder will ask you if you want to use the same image to create the icons for the parent iOS app. Unless you want a different icon for the parent app, select the parent app device at this point to create the second set.<\/li>\n<\/ul>\n<p><strong>Why is my starting image re-sized for a Sticker Pack app or iMessage app?<\/strong><\/p>\n<ul>\n<li>For Mac, iOS and Apple Watch apps, all the icons are square. For Sticker Pack apps and iMessage apps, most (but not all) of the icons are letterbox-shaped. Icon Builder displays your starting image in letterbox format when you choose &ldquo;Sticker Pack App&rdquo; &ldquo;iMessage App&rdquo; so that you can see how it will look.<\/li>\n<\/ul>\n<p><strong>When I choose any iOS app type, my starting image loses its transparent background!<\/strong><\/p>\n<ul>\n<li>Apple requires that iOS icons have no transparency so Icon Builder displays the image like that so you can confirm the look. If you do not like the default change, edit the image to remove the transparency before using Icon Builder.<\/li>\n<\/ul>\n<p><strong>What versions of macOS and Xcode do I need?<\/strong><\/p>\n<ul>\n<li>This app requires macOS 10.13 as it uses the latest APIs to manipulate images.<\/li>\n<li>Xcode 9 is the latest version, but Xcode 8 will probably work.<\/li>\n<\/ul>\n<p><strong>I don&rsquo;t use Xcode, I use an alternative IDE. Can I still use the icons created by this app?<\/strong><\/p>\n<ul>\n<li>Yes, you can save the icon set to a folder and install the icons manually in the IDE of your choice. If your IDE requires a .icns file, select &ldquo;Mac icns file&rdquo; from the device popup.<\/li>\n<\/ul>\n<p><strong>What if my starting image is the wrong size?<\/strong><\/p>\n<ul>\n<li>If your image is not the correct size, it will be cropped or expanded when you drag it in.<\/li>\n<li>It will then be resized to create all the required image sizes.<\/li>\n<li>If this does not give the result you want, resize or crop the image before dropping it into Icon Builder.<\/li>\n<\/ul>\n<p><strong>How do I start again with a blank slate?<\/strong><\/p>\n<ul>\n<li>Choose &ldquo;New&rdquo; from the File menu, or press Command-N.<\/li>\n<\/ul>\n<p><strong>Do I have to drag images into the app?<\/strong><\/p>\n<ul>\n<li>No, you can copy &amp; paste an image file, or an image.<\/li>\n<li>Or choose &ldquo;Open Image…&rdquo; from the File menu, or press Command-O.<\/li>\n<\/ul>\n<p><strong>How can I delete the icons from my project?<\/strong><\/p>\n<ul>\n<li>Select &ldquo;Assets.xcassets&rdquo; in the project navigator.<\/li>\n<li>In the next sidebar, you will see a list of the asset sets in your project.<\/li>\n<li>Select the one you want to delete (e.g. AppIcon, AppIcon-1, AppIcon-Watch) and press the Delete key.<\/li>\n<\/ul>\n<p><strong>I have an old project with no &ldquo;Assets.xcassets&rdquo; - how do I add that?<\/strong><\/p>\n<ul>\n<li>Select the project at the top of the Project Navigator.<\/li>\n<li>Make sure you are editing the target and go to the General tab.<\/li>\n<li>In the &ldquo;App Icons&rdquo; section, click the &ldquo;Use Asset Catalog&rdquo; button.<\/li>\n<li>The &ldquo;Assets.xcassets&rdquo; folder will be created and any existing icons will be migrated to the new structure.<\/li>\n<\/ul>\n<p><strong>What if I want to use the images from a Mac .icns file?<\/strong><\/p>\n<ul>\n<li>Drag it in just like any image file. However the largest image in an .icns bundle is 512 x 512, so you may want to create a larger version.<\/li>\n<\/ul>\n<p><strong>Why are there files with @2x and @3x in the names?<\/strong><\/p>\n<ul>\n<li>These are for high-resolution displays. iOS knows it needs a certain image size, but if the device has a Retina display, the system will look for an @2x file so it can squeeze twice as many pixels in and make it look sharp. For the larger or more recent iPhones, the system will use the @3x files if they are available.<\/li>\n<\/ul>\n<p><strong>I use Pixelmator. Can I drag my pxm files into Icon Builder?<\/strong><\/p>\n<ul>\n<li>No. Pixelmator&rsquo;s pxm files cannot be used directly. Export them as png files first.<\/li>\n<\/ul>\n<p><strong>I’m a programmer, not a graphic designer. How do I make icon images?<\/strong><\/p>\n<ul>\n<li>One easy way to create basic shapes with gradients, text, added images etc. is to use Keynote. I presume PowerPoint has the same sort of abilities.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/icon-builder\/","date":370742400},{"title":"Updating apps for iPhone 5","content":"<p>I have started work updating my iOS apps to fill the larger screen of an iPhone<\/p>\n<ol start=\"5\">\n<li>My iPhone 5 is on order - I missed out on the first shipment, but hopefully\nit won&rsquo;t be too long. Meanwhile, I will just test in the iPhone Simulator and\nhope this is OK.<\/li>\n<\/ol>\n<p>But it was a puzzle to me how to get an app to fill the longer screen. I have\nthe latest Xcode and the latest Simulator which allows you to specify what\nscreen size iPhone to simulate. So I re-built an app and nothing changed - it\nshowing black strips top &amp; bottom and left my app at the old size.<\/p>\n<p>After trying many different things and reading a lot of the new sections of the\nApple developer documentation, I finally found the answer online:<\/p>\n<!-- raw HTML omitted -->\n<p>Apparently the system uses the presence or absence of this file this to detect\nwhether your app supports the longer iPhone.<\/p>\n<p>I read that Xcode is supposed to warn you of the consequences if this file is\nmissing, but in my case, when I opened my project, Xcode helpfully used the old\nlaunch image in its place. It showed a warning icon that the image was the wrong\nsize, but nothing else.<\/p>\n<p>The next problem was how to create this file. I use screen shots, but until the\napp worked in the correct format, I wasn&rsquo;t going to be able to get the screen\nshot. So I made it a 2 step process: first I duplicated the original launch\nimage, renamed it and resized it. It looked wrong but this was irrelevant - it\nwas enough to get the app working in the correct format. Once I had the app\nworking, I was able to take a screen shot and create the final launch image.<\/p>\n<p>Once you have the app working in 2 sizes, you have to do more work with the\nlayout, either using springs &amp; struts or using the modern auto-layout feature. I\nfind auto-layout confusing, but it is obviously more powerful and the way of the\nfuture, so I am trying to work it out. I found a good tutorial at\n<!-- raw HTML omitted -->Ray\nWenderlich&rsquo;s site<!-- raw HTML omitted -->. While directed at iOS 6, it also applies to Mac apps.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/updating-apps-for-iphone-5\/","date":370137600},{"title":"A Knight's Move for iOS 1.1","content":"<p><strong>UPDATE:<\/strong> September 2016 - A Knight&rsquo;s Move for iOS is no longer available.<!-- raw HTML omitted -->\n<a href=\"https:\/\/troz.net\/knightsmove\/\">A Knight&rsquo;s Move for Mac<\/a> is still supported.<\/p>\n<hr>\n<p>A Knight&rsquo;s Move for iPad &amp; iPhone has just been updated to version 1.1<\/p>\n<p>There were some minor changes:<\/p>\n<ul>\n<li>New puzzle pack: Majestic.<\/li>\n<li>iPhone now shows an info button of there is more help available for a\nparticular puzzle. (This info was already visible in the iPad version.)<\/li>\n<li>Minor cosmetic fixes.<\/li>\n<\/ul>\n<p>The big change was that all puzzles packs are now included in the free app,\nwhich is now supported by iAds. The sale of puzzle packs via in-app purchasing\nwas disappointing, so I have decided to try using iAds instead. Hopefully they\nwill not feel too intrusive, but if you want to support my apps, please tap on a\nfew of the ads.<\/p>\n<p>Note that iAds will not appear in all countries. You may just see a banner\nlinking you to my other apps on the iPad. On iPhone, you will not see anything\ndifferent.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/a-knights-move-for-ios-1-1\/","date":369187200},{"title":"Man Reader 1.1 Released","content":"<p>The update of <a href=\"https:\/\/troz.net\/manreader\/\" title=\"Man Reader\">Man Reader<\/a> to version 1.1 has just become available through\nthe Mac App Store. This update has a bunch of <a href=\"https:\/\/troz.net\/manreader\/#new_features\">new features<\/a> - thanks to\neveryone who made suggestions.<\/p>\n<p>As detailed in a <a href=\"https:\/\/troz.net\/sandboxing-and-the-mac-app-store\/\">previous post<\/a>, there have been major issues getting this\napp approved with Apple&rsquo;s new sand-boxing restrictions fully in place. But to\ntheir credit, the Apple reviewers have been unfailing helpful and polite in\nanswering my questions and keeping me informed.<\/p>\n<p>I hope everyone finds the new features useful. Please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader\">keep the suggestions\ncoming in<\/a> to make this app even better!<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/man-reader-1-1-released\/","date":366595200},{"title":"Sandboxing and the Mac App Store","content":"<p>As of June 2012, all apps submitted to the Mac App Store have to be sandboxed\ni.e. they have to be able to run in a limited environment where they cannot\ninterfere with other apps or other parts of the system. While this is generally\na good thing, there are problems when apps have legitimate reasons for requiring\naccess to other resources.<\/p>\n<p>One annoyance for developers is that Apple&rsquo;s apps are mostly not sandboxed. To\ncheck what apps you have installed that are sandboxed, open up Activity Monitor\n(in Applications\/Utilities). In the View menu, check that Sandbox is checked in\nthe Columns submenu. Then you can sort by clicking on the Sandbox title and work\nout which apps are already sandboxed. Mail, Preview and Text Edit are now\nsandboxed and so is the new Reminders app, but as far as I can tell, no other\nApple apps are. This causes two problems: firstly it is not fair to other\ndevelopers if Apple is enforcing a standard which only they are allowed to\nbreak. Secondly, if Apple developers had to follow the same rules as everyone\nelse, then maybe the system would evolve to become more usable for everyone.<\/p>\n<p>In the Apple developer documentation about sandboxing, there is a section headed\n&ldquo;Determine Whether Your App Is Suitable for Sandboxing&rdquo;. Here they list numerous\nreasons why any app might not work in the sandbox. But the Mac App Store now\nmakes sandboxing compulsory, so what to do with apps that are not suitable?<\/p>\n<p>Some resources can be requested when building the app: access to various folders\n(Pictures, Music, Downloads etc), access to Address Book and Calendar data,\nprinting facilities, networking etc. Beyond the specified list of entitlements\nthat can be requested, developers can also apply for &ldquo;temporary entitlements&rdquo;\nwhich, if granted, will unlock access to other parts of the operating system.\nHowever these are subject to the whims of app reviewers and will be re-assessed\nwith every update. Apple has also made it clear that they are intended as a\ntransition feature and will not be available for ever.<\/p>\n<p>This has lead to a recent spate of popular apps leaving the App Store.\n<!-- raw HTML omitted -->Marco\nArment<!-- raw HTML omitted --> has discussed this problem with an emphasis on the issue of lack of\nconfidence in buying from the App Store. If you cannot be sure that an app you\nbuy will remain in the App Store, then you are less likely to buy it there.<\/p>\n<p>I have run into direct issues with sandboxing already. With\n<!-- raw HTML omitted -->Pic-a-POD<!-- raw HTML omitted -->, I used to have\nlinks to the Desktop and Screen Saver panes in System Preferences. These used\nAppleScripts which required a temporary entitlement to send an AppleEvent. The\napp was rejected because of this, so I had to modify this feature - it now just\ntakes you to the relevant section of System Prefs, but not directly to either\nDesktop or Screen Saver. However Pic-a-POD&rsquo;s help, which runs in Apple&rsquo;s Help\nViewer app, contains exactly the same AppleScripts and so is allowed to access\nthese preference panes directly. Try working out the logic of that one!<\/p>\n<p>I have more serious problems with\n<!-- raw HTML omitted -->Man Reader<!-- raw HTML omitted -->. Man\nReader displays a list of the man pages on your system. Depending on the tools\nyou have installed, these pages may be in a variety of locations. The shell\ncommand that detects them first reads a config file and then checks the folders\nlisted in that config file. All it needs is read-only access. With the first\nsandboxed version, I asked for a temporary entitlement to give me read-only\naccess to the startup disk. This was granted, but I have since been informed\nthat all requested entitlements were granted before the App Store cut-off date.\nThis may have been meant to be helpful, but it was not useful to allow access\nthat would later be removed without any warning.<\/p>\n<p>The current version of Man Reader waiting for approval asks for read-only access\nto the config file directly and then to every folder listed in that config file.\nIf approved, this should be able to access all the man pages on a system. I have\nno idea whether these entitlements will be granted, but if not, then I will have\nto remove Man Reader from the App Store. It would be wrong to continue to sell\nan app that only functioned in a limited manner, even though the App Store is\nfar and away my best form of marketing.<\/p>\n<p>So what do I suggest Apple does? I think they need to allow apps that are not\nsand-boxed. However these apps could come with a warning before installation. In\nMountain Lion, the new security feature called Gatekeeper allows you to specify\nthe level of security you want when installing apps. Currently the options are\nto allow apps downloaded from:<\/p>\n<ul>\n<li>Mac App Store<\/li>\n<li>Mac App Store and identified developers<\/li>\n<li>Anywhere<\/li>\n<\/ul>\n<p>They could split the first option in two and allow<\/p>\n<ul>\n<li>Mac App Store sandboxed<\/li>\n<li>Mac App Store any<\/li>\n<\/ul>\n<p>One further wrinkle is iCloud. Apple is encouraging users and developers towards\niCloud data storage and sharing. But only apps in the App Store are allowed to\nuse iCloud.<\/p>\n<p>So it will be interesting to see how this plays out. Obviously Apple is not\ngoing to care if a tiny developer like me leaves the App Store, but if enough\nhigh-profile developers leave, then there will surely be some consideration\ngiven to the problem.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/sandboxing-and-the-mac-app-store\/","date":365126400},{"title":"Update to Time In Words screen saver","content":"<p><a href=\"https:\/\/troz.net\/time-in-words-screen-saver-for-mac\/\" title=\"Time In Words Screen Saver for Mac\">Time In Words screen saver<\/a> has just been updated to version 1.1 and is now\nfully compatible with Mountain Lion. It is free to use and can be\n<a href=\"https:\/\/troz.net\/screensaver\/TimeInWords-ScreenSaver.zip\">downloaded<\/a> here.<\/p>\n<p>The basic screen saver worked before, but searching for an alternative time zone\nwould crash System Preferences. That is now fixed.<\/p>\n<p>The screen saver also shows a thumbnail image when in Mountain Lion and is\ncode-signed with my developer ID for compatibility with Mountain Lion&rsquo;s\nGatekeeper.<\/p>\n<p>The current version is compatible with 10.8 and 10.7. It may work in 10.6 but I\ncannot be sure. If anyone tries it, please let me know.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/update-to-time-in-words-screen-saver\/","date":365040000},{"title":"A Knight's Move Released","content":"<p><strong>UPDATE:<\/strong> September 2016 - A Knight&rsquo;s Move for iOS is no longer available.<!-- raw HTML omitted -->\n<a href=\"https:\/\/troz.net\/knightsmove\/\">A Knight&rsquo;s Move for Mac<\/a> is still supported.<\/p>\n<hr>\n<p>&ldquo;A Knight&rsquo;s Move&rdquo; is a fun, addictive and simple puzzle game based on the\nmovements of chess pieces. Your goal is to move your white knight across a board\nto a target square using the same movements as a knight in chess. Pawns may\nblock your way, while enemy bishops, castles, knights and the queen may try to\nstop you.<\/p>\n<p>The game is available for iPad, iPhone and iPod Touch from the iTunes Store and\nrequires iOS 5.0 or later. The Mac version is available from the Mac App Store\nand requires OS X 10.7 or later.<\/p>\n<p>Perfect for when you have a few minutes to relax, like on the train to work,\nduring your lunch break or during a boring lecture or class (Kids: don&rsquo;t take\nadvice from randoms, but you can turn the sound FX off. Just sayin&rsquo;), &ldquo;A\nKnight&rsquo;s Move&rdquo; will keep you coming back for &ldquo;Just One More Go&rdquo;!<\/p>\n<p>Once you have played the tutorial pack, you can move on to the other puzzle\npacks. Each pack comes with 25 more puzzles and there are many different packs\nallowing you to select easy puzzles, challenging puzzles or variety packs, some\nwith themes.<\/p>\n<p>See more about &ldquo;A Knight&rsquo;s Move&rdquo; at the <a href=\"https:\/\/troz.net\/knightsmove\/\">Knight&rsquo;s Move web page<\/a><\/p>\n<p>Get the game from the\n<!-- raw HTML omitted -->Mac\nApp Store<!-- raw HTML omitted -->.<\/p>\n<!-- raw HTML omitted -->\n<p>Tutorial puzzle on iPhone<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/PeskyPawns.png\"><!-- raw HTML omitted --><\/a><\/p>\n<p>Pesky Pawns - one of the more difficult puzzles on Mac.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/a-knights-move-released\/","date":363484800},{"title":"A Knight's Move","content":"<p>A Knight&rsquo;s Move is a puzzle game where you have to move your knight across a\nboard to a target square using the same movements as a knight in chess. Pawns\nmay block your way, while enemy bishops, castles, knights and the queen may try\nto stop you.<\/p>\n<p><strong>UPDATE<\/strong>: <a href=\"http:\/\/itunes.apple.com\/app\/a-knights-move\/id533321133\">Version 1.3 for Mac now available<\/a>.<\/p>\n<ul>\n<li>Available from the <a href=\"http:\/\/itunes.apple.com\/app\/a-knights-move\/id533321133\">Mac App Store<\/a> for OS X 10.7 or later<\/li>\n<\/ul>\n<p><img src=\"https:\/\/troz.net\/images\/KnightsMoveMac1.png\" alt=\"A Knight&rsquo;s Move for Mac\"><\/p>\n<p>Get from the starting position to the target in the shortest possible number of\nmoves. Score stars based on the moves taken. If you need help, take a one star\npenalty to show all possible moves. If you really get stuck, after several tries\nthe Cheat button allows you to see a solution, although that will cost you all\nyour stars.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/KnightsMoveMac2.png\" alt=\"A Knight&rsquo;s Move for Mac\"><\/p>\n<p>Choose your preferred board and chess pieces.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/KM-Prefs.png\" alt=\"A Knight&rsquo;s Move Preferences\"><\/p>\n<hr>\n<h2 id=\"faq\">FAQ<\/h2>\n<p><strong>Q.<\/strong> Does the time I take to solve a puzzle count against me?<br>\n**A. **No - the number of stars you get depends solely on the number of moves taken.<\/p>\n<p><strong>Q.<\/strong> Are there any penalties for using Undo or Restart?<br>\n**A. **No - both Undo and Restart wind back the number of moves, so are not counted\ntowards your final number of moves.<\/p>\n<p><strong>Q.<\/strong> What are the best techniques for solving a large puzzle?<br>\n<strong>A.<\/strong> Sometimes it is easier to work backwards. Work out which squares get you to\nthe target safely and see if you can work out how to get to one of them. Another\ntechnique is to check all the possible moves and see how many can be eliminated because\nof danger or because they don&rsquo;t lead anywhere except back to where you started. Just\nremember that trying and failing doesn&rsquo;t count against you, so give it a go.<\/p>\n<p><strong>Q.<\/strong> What if I need help with a puzzle?<br>\n<strong>A.<\/strong> The first way to get help is to turn on &ldquo;Show Moves&rdquo;. This puts green circles\non any square that your White Knight can reach next move. It does not indicate whether\nthese squares are safe, but just shows you all legal moves. This option costs you\na one star penalty but you can always do the puzzle again to try for three stars.<\/p>\n<p><strong>Q.<\/strong> What if I think a puzzle is completely impossible?<br>\n<strong>A.<\/strong> All the puzzles have at least one solution. If you have tried and tried, using\nRestart or being captured at least 5 times, the Cheat button will become available.\nUsing the Cheat button will show you a possible solution but will mean that you can\nnever get any stars for that puzzle.<\/p>\n<p><strong>Q.<\/strong> You&rsquo;re kidding, right? No stars… ever… just because I cheated?<br>\n<strong>A.<\/strong> OK, I&rsquo;m kidding, but the way out of this is deliberately hidden and inconvenient.\nIf you go to Settings or Preferences, you can reset all the game scores which clears\nall records of stars won so far, allowing you to restart completely. If you reset\nthe scores three times in a row, this will also clear all records of cheating.<\/p>\n<p><strong>Q.<\/strong> I think I solved a puzzle in fewer moves than the minimum moves shown.<br>\n<strong>A.<\/strong> Great! Please take a screen shot of the puzzle and annotate it to show your\nmoves. Email it in to <a href=\"mailto:sarah@troz.net\">sarah@troz.net<\/a> so that I can edit the puzzle for the next update.<\/p>\n","url":"https:\/\/troz.net\/knightsmove\/","date":363398400},{"title":"Easy access to the Library folder","content":"<p>In Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your\nLibrary folder, presumably to stop people doing stuff that made apps crash. But\nas a developer, I need access to my Library folder a lot. I need to check that\npreferences are being saved correctly. If I have an app that uses the\nApplication Support folder, then I need to be able to check it. And for\nsand-boxed apps, they keep all their data in the Containers folder inside the\nLibrary.<\/p>\n<p>You can easily get to the Library folder by holding down the Option key while\nchoosing the Go menu in Finder. This adds Library to the menu and you can get to\nthe folder that way. But this is not as convenient as single-click access from a\nFinder window, so here is my preferred method.<\/p>\n<p>Use the Option key and the Finder&rsquo;s Go menu to get the Library folder open in a\nFinder window. Switch this window to column view, which will display the Library\nfolder (slightly greyed out) in the first column. Drag this Library folder to\nthe side bar of your Finder window. Now it is there all the time, in every\nFinder window that is showing the side bar.<\/p>\n<p>I have read about various Terminal tricks to get the Library to show up, but\nevery system update seems to turn it off again. This technique doesn&rsquo;t involve\nanything except the Finder&rsquo;s side bar preferences and so far (I&rsquo;m now up to\n10.7.4), it hasn&rsquo;t needed to be reset after any update.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/easy-access-to-the-library-folder\/","date":358819200},{"title":"Man Reader update coming soon","content":"<p>Man Reader launched on the Mac App Store a couple of days ago and yesterday I\ngot an email from a purchaser who reported that Man Reader was not displaying\nthe man pages for MacPorts, even though he had the paths set up correctly.<\/p>\n<p>I installed MacPorts to check this out and ran into the same problem. Running\nthe command &ldquo;man port&rdquo; in Terminal worked fine, but &ldquo;port&rdquo; did not appear in Man\nReader&rsquo;s list.<\/p>\n<p>Man Reader uses the &ldquo;apropos&rdquo; command to list all available man pages, so I\ntested it next. When I found that it was not listing &ldquo;port&rdquo; either, I thought I\nhad discovered the problem. OS X offers two commands for searching for man\npages: apropos &amp; whatis. The database files used by these commands are updated\nweekly by one of the periodic system commands. I manually ran this update\ncommand using:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-bash\" data-lang=\"bash\">sudo \/etc\/periodic\/weekly\/320.whatis\n<\/code><\/pre><\/div><p>This did part of the job, as the apropos command when used in Terminal now\ncontained the MacPorts man pages. However Man Reader still did not show these\nman pages.<\/p>\n<p>Reverting to the Console log, I found that this was a sand-boxing problem. The\nMac OS X sand-box was preventing access to the man.conf file (which tells where\nto look for man pages), and the whatis database file containing the new data. I\nassume that without access to these files, the default locations for man pages\nwere still searched, but no non-standard locations were being searched.<\/p>\n<p>I have just submitted an update to the App Store that still uses sand-boxing but\nrequests temporary read-only access to the file system to read these files. If\nApple rejects this, then I will release a version without sand-boxing.<\/p>\n<p>Either way, you can be assured that the matter is being dealt with and the next\nupdate, whether sand-boxed or not, will allow access to all man pages.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/man-reader-update-coming-soon\/","date":358387200},{"title":"Pic-a-POD 2.0.4 for Mac","content":"<p>The latest update for <a href=\"http:\/\/www.picapod.com\/\">Pic-a-POD for Mac<\/a> is now available through the\n<!-- raw HTML omitted -->Mac\nApp Store<!-- raw HTML omitted -->.<\/p>\n<h2 id=\"bug-fix\">Bug fix:<\/h2>\n<ul>\n<li>selecting an iPhoto pic from the Recent Desktops menu now works correctly.<\/li>\n<\/ul>\n<h2 id=\"new-features\">New features:<\/h2>\n<ul>\n<li>Better indication of downloads and when large pics are not yet available<\/li>\n<li>Direct link to App Store in Help menu - please rate or review.<\/li>\n<\/ul>\n","url":"https:\/\/troz.net\/post\/2012\/pic-a-pod-2-0-4-for-mac\/","date":358387200},{"title":"Making a Mac Screen Saver","content":"<p>Having just completed the my first screen saver for Mac - the <a href=\"https:\/\/troz.net\/time-in-words-screen-saver-for-mac\/\" title=\"Time In Words Screen Saver for Mac\">Time In Words\nScreen Saver<\/a>, I thought I would share some of the experiences. I am using OS\nX Lion (10.7) and Xcode 4.3.2<\/p>\n<p>The first thing is to create a new project in Xcode using the Screen Saver\ntemplate:<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/ScreenSaverTemplate.png\"><!-- raw HTML omitted --><\/a><\/p>\n<p>Xcode sets up a project for you with everything you need for a screen saver\nmodule. Start editing the ScreenSaverView.m file. The most important method here\nis animateOneFrame.<\/p>\n<p>This is called every time the animation time interval elapses. This interval is\nset in <code>initWithFrame:isPreview:<\/code>. I have seen some debate online as to whether\nthe drawing should be done in the <code>animateOneFrame<\/code> method or in the <code>drawRect<\/code>\nmethod. I chose to use <code>animateOneFrame<\/code> because they are both called when the\nscreen saver starts which can lead to an unpleasant flicker.<\/p>\n<p>Now it is up to you to decide what to show in the <code>animateOneFrame<\/code> method. For\nTime In Words, I assembled the data as a string, created a dictionary of text\nattributes, calculated the location where I wanted to show the text and used\n<code>drawAtPoint:withAttributes:<\/code> to display it.<\/p>\n<p>There are a couple of important tricks when working out locations: firstly, you\nwill need to know the bounds of the screen saver area. This will vary depending\non the monitor, screen size or whether the screen saver is appearing in the\npreview window in System Preferences. The screen saver view has a method that\ndoes this work for you.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\">NSRect viewBounds <span style=\"color:#f92672\">=<\/span> [self bounds];\n<\/code><\/pre><\/div><p>The next trick is that you are most likely going to need some random numbers.\nAgain, the screen saver framework supplies these to you in several forms. I used\n<code>SSRandomFloatBetween<\/code> but there are others. Check the documentation.<\/p>\n<p>I ran into an oddity in System Preferences that made testing a bit tedious. I\nbuilt the screen saver module and double-clicked on it to install into System\nPreferences. That worked fine, but when I made some changes and repeated the\nprocess, the original screen saver was still in place. I found that I had to\nquit System Preferences each time. Deleting the old version of the screen saver\nwas not necessary, but quitting the System Prefs app was essential.<\/p>\n<p>So that gives the basic screen saver module but with no options. Adding options\nis not difficult, but as always, there are a few things that are not obvious on\nfirst glance.<\/p>\n<p>Add a xib file to your project: I used a window template. Then change the\nwindow&rsquo;s class to NSPanel and configure it as shown:<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>Set the File&rsquo;s Owner class to the class of your Screen Saver view. In your\nScreenSaverView.h file, declare a property for this new panel. e.g.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\"> <span style=\"color:#66d9ef\">@property<\/span> (<span style=\"color:#66d9ef\">assign<\/span>) <span style=\"color:#66d9ef\">IBOutlet<\/span> NSPanel <span style=\"color:#f92672\">*<\/span>optionsPanel;\n<\/code><\/pre><\/div><p>@synthesize this in the ScreenSaverView.m file. In the xib file, connect the\npanel to this outlet.<\/p>\n<p>Now go back to ScreenSaverView.m and add the following code:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\"><span style=\"color:#f92672\">*<\/span> (<span style=\"color:#66d9ef\">BOOL<\/span>)hasConfigureSheet { <span style=\"color:#66d9ef\">return<\/span> YES; }\n\n<span style=\"color:#f92672\">*<\/span> (NSWindow <span style=\"color:#f92672\">*<\/span>)configureSheet { <span style=\"color:#66d9ef\">if<\/span> (<span style=\"color:#f92672\">!<\/span>self.optionsPanel) { [NSBundle\n  loadNibNamed:<span style=\"color:#e6db74\">@&#34;Options&#34;<\/span> owner:self]; } <span style=\"color:#66d9ef\">return<\/span> self.optionsPanel; }\n\n<span style=\"color:#f92672\">-<\/span> (<span style=\"color:#66d9ef\">IBAction<\/span>)closeConfig:(<span style=\"color:#66d9ef\">id<\/span>)sender { [[NSApplication sharedApplication]\n  endSheet:self.optionsPanel]; }\n<\/code><\/pre><\/div><p>The <code>hasConfigureSheet<\/code> and <code>configureSheet<\/code> stubs are already there for you,\nbut you can replace them with these versions.<\/p>\n<p>Go back to the xib file and drag in a button to close the options panel. Connect\nit to the <code>closeConfig:<\/code> action.<\/p>\n<p>Save everything, build, install in System Preferences and test. Firstly, the\n&ldquo;Options&hellip;&rdquo; button should be enabled. Clicking it should open your panel as a\nsheet, and when you click your button, the panel should close.<\/p>\n<p>If that doesn&rsquo;t work, check the class assignments, the connections, the settings\nfor the NSPanel and the code in that order.<\/p>\n<p>Once the panel is opening and closing as required, you need to add the ability\nto store and retrieve the settings. Instead of using NSUserDefaults as you would\nin a standard Mac app, there is a special class call ScreenSaverDefaults for\nscreen savers. It needs a unique module name, so I used the bundle identifier.\nFor my Time In Words screen saver, this is\n&ldquo;net.troz.Time-In-Words-Screen-Saver&rdquo;. I defined a constant to hold this as a\nstring, so I could use it anywhere I needed.<\/p>\n<p>In the <code>initWithFrame:isPreview:<\/code> method, I got a reference to the screen saver\ndefaults for my screen saver and registered the defaults. I am never very sure\nabout the need to do this, but it is supposed to be a good practice.<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\">ScreenSaverDefaults <span style=\"color:#f92672\">*<\/span>defaults <span style=\"color:#f92672\">=<\/span> [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];\n[defaults registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n  <span style=\"color:#e6db74\">@&#34;NO&#34;<\/span>, <span style=\"color:#e6db74\">@&#34;UseAlternativeZone&#34;<\/span>, <span style=\"color:#e6db74\">@&#34;&#34;<\/span>,\n  <span style=\"color:#e6db74\">@&#34;AlternativeZoneName&#34;<\/span>, nil]\n];\n<\/code><\/pre><\/div><p>Using them is exactly the same as using NSUserDefaults:<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\"><span style=\"color:#75715e\">\/\/ Reading\n<\/span><span style=\"color:#75715e\"><\/span>ScreenSaverDefaults <span style=\"color:#f92672\">*<\/span>defaults <span style=\"color:#f92672\">=<\/span> [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];\n<span style=\"color:#66d9ef\">BOOL<\/span> useAlternativeZone <span style=\"color:#f92672\">=<\/span> [defaults boolForKey:<span style=\"color:#e6db74\">@&#34;UseAlternativeZone&#34;<\/span>];\nNSString <span style=\"color:#f92672\">*<\/span>alternativeZoneName <span style=\"color:#f92672\">=<\/span> [defaults objectForKey:<span style=\"color:#e6db74\">@&#34;AlternativeZoneName&#34;<\/span>];\n<\/code><\/pre><\/div><p>&hellip;<\/p>\n<div class=\"highlight\"><pre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-objectivec\" data-lang=\"objectivec\"><span style=\"color:#75715e\">\/\/ Writing\n<\/span><span style=\"color:#75715e\"><\/span>ScreenSaverDefaults <span style=\"color:#f92672\">*<\/span>defaults <span style=\"color:#f92672\">=<\/span> [ScreenSaverDefaults defaultsForModuleWithName:kModuleName]; [defaults setBool:useAlternative forKey:<span style=\"color:#e6db74\">@&#34;UseAlternativeZone&#34;<\/span>];\n[defaults setObject:alternativeZoneName forKey:<span style=\"color:#e6db74\">@&#34;AlternativeZoneName&#34;<\/span>];\n[defaults synchronize];\n<\/code><\/pre><\/div><p>One last thing: if you want to distribute the screen saver, you will want to\ncreate an archive, possibly code-signing with your Apple developer ID to allow\nfor Mountain Lion&rsquo;s up-coming Gatekeeper security system. I code-signed the\nproject and built an archive, but when I clicked &ldquo;Distribute&rdquo; in the Organizer,\nthe only appropriate options was &ldquo;Save Built Products&rdquo;. I selected this option\nand ended up with a series of folders inside folders, with the screen saver\nmodule in about the fifth folder down. I don&rsquo;t know why the module gets\ndistributed like this, but I pulled it out of the folders and it worked fine.<\/p>\n<p>And that&rsquo;s about it. A lot of this stuff is online or in Apple&rsquo;s documentation,\nbut there are enough oddities to make it worthwhile gathering together all that\nI learnt while making this screen saver.<\/p>\n<p>Click this icon to download the screen saver:<\/p>\n<p><a href=\"https:\/\/troz.net\/screensaver\/TimeInWords-ScreenSaver.zip\"><!-- raw HTML omitted --><\/a><\/p>\n","url":"https:\/\/troz.net\/post\/2012\/making-a-mac-screen-saver\/","date":358214400},{"title":"Man Reader","content":"<p>Man Reader is a utility app for reading macOS&rsquo;s man pages. Man Reader allows\nquick, convenient and easy access to the man pages on your system, useful for\nprogrammers, system administrators and tweakers.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/MR_Start.png\"><img src=\"https:\/\/troz.net\/images\/MR_Start_small.png\" alt=\"MR\" title=\"Man Reader\"><\/a><\/p>\n<ul>\n<li><a href=\"http:\/\/itunes.apple.com\/app\/man-reader\/id522583774?mt=12\">Buy Man Reader from the Mac App Store<\/a><\/li>\n<\/ul>\n<p>Man pages are available for the Unix commands used mostly in Terminal or when\nshell scripting. These man pages are normally displayed in Terminal using the\n&ldquo;man&rdquo; command e.g. &ldquo;man man&rdquo; gives you the man page for the man command.<\/p>\n<p>However there are problems with this: the man page is displayed to you in your\nTerminal window page by page and when you have got to the bottom, you have to\nknow to press &lsquo;q&rsquo; to get out of the man page display, at which point it\ndisappears completely. Hope you have a good memory!<\/p>\n<p>There are various tricks to get around this: opening it in a separate window,\npiping it to Preview as a PDF, listing it as a single page etc, but none of\nthese are really convenient, which is why I wrote Man Reader. Basically, I\nreckon that if I want a utility, then there must be other people who would want\nthe same thing.<\/p>\n<p>Man Reader assembles a list of the commands with available man pages on your\nsystem - this will vary according to what developer tools you have installed.\nThese commands are listed for you and you can click on any one to display the\nman page for that command.<\/p>\n<h2 id=\"man-reader-features\">Man Reader Features:<\/h2>\n<ul>\n<li>List of all available man pages on your system.<\/li>\n<li>Show only a section of the pages.<\/li>\n<li>Search for a man page by name.<\/li>\n<li>Display man page in text or HTML (different pages look best in different\nformats).<\/li>\n<li>Step back &amp; forward through recently viewed man pages.<\/li>\n<li>Live links to &lsquo;See Also&rsquo; entries.<\/li>\n<li>&lsquo;Sticky notes&rsquo; at the side to jump to sub-sections in a page.<\/li>\n<li>Choose a font and size for the display.<\/li>\n<li>Convenient buttons in the toolbar allow quick access to commonly used\nutilities.<\/li>\n<li>Sand-boxed for OS X Lion &amp; later.<\/li>\n<\/ul>\n<hr>\n<h4 id=\"man-reader-version-18-changes-23-oct-2016\">Man Reader version 1.8 changes (23 Oct 2016):<\/h4>\n<ul>\n<li>More complete search for man pages, including in third-party IDEs.<\/li>\n<li>Fix for glitch when displaying previously selected page on launch.<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-17-changes-10-oct-2016\">Man Reader version 1.7 changes (10 Oct 2016):<\/h4>\n<ul>\n<li>Updated for macOS Sierra.<\/li>\n<li>List of pages now uses alternating colors even if not using the defaults.<\/li>\n<li>Minimum supported system version raised to 10.11.<\/li>\n<li>Minor display glitches fixed.<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-16-changes-13-jul-2016\">Man Reader version 1.6 changes (13 Jul 2016):<\/h4>\n<ul>\n<li>Much improved searching for available man pages, including permissions fix for\nsome pages.<\/li>\n<li>Fixed error with new search term being over-written.<\/li>\n<li>Sand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-15-changes\">Man Reader version 1.5 changes:<\/h4>\n<ul>\n<li>Much improved searching for available man pages.<\/li>\n<li>Sand-boxed version now works just as well as the non-sand-boxed.<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-14-changes\">Man Reader version 1.4 changes:<\/h4>\n<ul>\n<li>Fix for plain text view not wrapping correctly for odd-sized fonts.<\/li>\n<li>Fix for HTML text view over-riding font colors that may be invisible.<\/li>\n<li>Search for missing entry (e.g. g++) no longer requires Enter or Return.<\/li>\n<li>Better automatic selection of matching entries while searching.<\/li>\n<li>Fix for animation warning message appearing in Console.<\/li>\n<li>Status display shows when man page list is being updated.<\/li>\n<li>Searching inside a page now allows a minimum of 2 characters (was 3), so flags\ne.g. &lsquo;-b&rsquo; do not need to be escaped.<\/li>\n<li>Fixed path for Network Utility in tool bar (moved in OS X 10.9).<\/li>\n<li>More information available about the effects of sand-boxing for this app.<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-13-changes\">Man Reader version 1.3 changes:<\/h4>\n<ul>\n<li>Better formatting of plain text to allow for HTML entities.<\/li>\n<li>Fix for font in some HTML pages getting bigger &amp; bigger.<\/li>\n<li>Failed search for page will search for a matching man page anyway.<\/li>\n<li>Editable apps in toolbar (see Preferences &amp; View menu).<\/li>\n<li>Fixed bug when setting custom colors for marker tabs.<\/li>\n<li>Changed shortcuts for Find (see Edit menu).<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-12-changes\">Man Reader version 1.2 changes:<\/h4>\n<ul>\n<li>Customizable colors for text, background, links, found text.<\/li>\n<li>Searching for text within pages marks all matches.<\/li>\n<li>Pages will adjust line width to suit window size, even in plain text mode.<\/li>\n<li>If a search only results in a single page, press Return to display it.<\/li>\n<li>More man pages should be located on your system.<\/li>\n<li>Fix for bug where app did not always remember full screen setting.<\/li>\n<li>Fix for bug where some pages were being added to the history list twice.<\/li>\n<\/ul>\n<h4 id=\"man-reader-version-11-changes\">Man Reader version 1.1 changes:<\/h4>\n<ul>\n<li>Search for text within a man page.<\/li>\n<li>Bookmark frequently visited pages.<\/li>\n<li>Search man page list using &ldquo;Starts with&rdquo; or &ldquo;Contains&rdquo;.<\/li>\n<li>Preferences for the marker tabs: choose a pre-made color set or design your\nown.<\/li>\n<li>Full screen mode now supported.<\/li>\n<li>Custom toolbar configurations now saved &amp; restored correctly.<\/li>\n<\/ul>\n<hr>\n<p>If you have any problems with Man Reader, any suggestions for future versions or\nencounter any bugs, please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader\">contact me<\/a>.<\/p>\n","url":"https:\/\/troz.net\/manreader\/","date":358128000},{"title":"Time In Words Screen Saver","content":"<p>The latest member of the Time In Words suite of apps is a screen saver module\nfor Macs.<br>\nVersion 1.2 updated January 2013: compatible with Lion (OS X 10.7), Mountain Lion\n(OS X 10.8), Mavericks (OS X 10.9) &amp; Yosemite (OS X 10.10).<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/ScreenSaverIcon128.png\" alt=\"Time In Words Screen Saver Download\"><\/p>\n<p><a href=\"https:\/\/troz.net\/screensaver\/TimeInWords-ScreenSaver.zip\">Download Time In Words Screen Saver<\/a><\/p>\n<p>Like <a href=\"https:\/\/troz.net\/time-in-words\/\" title=\"Time In Words\">Time In Words for iOS<\/a> and <a href=\"https:\/\/troz.net\/time-in-words-for-mac\/\" title=\"Worlds Time In Words for Mac\">World Time In Words for Mac<\/a>, it\ndisplays the time and date in plain words which are easy to read and comprehend.\nWhile it only shows a single time and date, this can be configured to show your\nlocal time &amp; date or any available time zone. Since the App Store does not have\na section for screen savers, the <a href=\"https:\/\/troz.net\/screensaver\/TimeInWords-ScreenSaver.zip\">Time In Words screen saver<\/a> is available as\na direct download from my site. Click the link or the icon above to download the\nscreen saver as a zip file. If the zip file does not open automatically,\ndouble-click the file to unzip it. Then double-click the &ldquo;Time In Words Screen\nSaver.saver&rdquo; file to install the screen saver in your System Preferences. You\nwill be asked whether you want to install it for the current user only or for\nall users. Selecting &ldquo;All Users&rdquo; will require you to enter your password, so I\nrecommend just installing for the current user.<\/p>\n<p>Scroll to the &ldquo;Other&rdquo; section of the list of screen savers and click &ldquo;Time In\nWords Screen Saver&rdquo; to activate it. Sometimes the installation leaves the screen\nsaver selected but not active. If this is the case, select another screen saver\nand then click back on Time In Words.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/ScreenSaver1.png\"><img src=\"https:\/\/troz.net\/images\/ScreenSaver1-small.png\" alt=\"Time In Words Screen Saver\"><\/a><\/p>\n<p>By default, your local time &amp; date will be displayed. To select a different time\nzone, click the &ldquo;Screen Saver Options…&rdquo; button to display the following:<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/ScreenSaver2.png\"><img src=\"https:\/\/troz.net\/images\/ScreenSaver2-small.png\" alt=\"Time In Words Screen Saver Options\"><\/a><\/p>\n<p>Click the &ldquo;Show Alternate Time&rdquo; radio button to enable the time zone list. As\nwith Time In Words for Mac, you can type part of a city name in the search field\nto find a zone quickly. Select the zone you want to use and click &ldquo;OK&rdquo;. The\npreview will switch to showing your newly selected time zone.<\/p>\n<p>For anyone interested in the source code, here is a download link: <a href=\"https:\/\/troz.net\/screensaver\/TimeInWordsScreenSaverXcode.zip\">Time In\nWords Screen Saver Xcode project<\/a>. This was written using Xcode 4.x so is\nrather out-dated by now, but may prove useful to others wishing to start writing\ntheir own screen savers.<\/p>\n","url":"https:\/\/troz.net\/time-in-words-screen-saver-for-mac\/","date":358041600},{"title":"Support for older operating systems","content":"<p>Working out what operating systems to support in your software is always a\ndifficult decision. I only program for Mac &amp; iOS systems for starters. This is\nbecause they are the systems I use and understand. I am not interested in\nexpending the time &amp; money needed to program and test my software for other\nsystems.<\/p>\n<p>Within the Mac &amp; iOS ecosystems, there is still the decision of which versions\nto support. Partially, this is based on the usage statistics of each version. I\nfound a site that segments the current Mac market:\n<!-- raw HTML omitted -->Distribution\nof Mac OS X versions<!-- raw HTML omitted -->. This tells me that OS 10.6 &amp; OS 10.7 between them have\n83% which makes 10.6 a good cut-off point.<\/p>\n<p>Distribution of iOS versions is harder to discover, but I found a post that did\na good job of analysing the statistics that are available:<\/p>\n<p><a href=\"http:\/\/pxldot.com\/post\/18754186750\/ios-ebb-and-flow\"> pxldot (iOS Ebb and Flow)<\/a>. According to this post, by March 2012, iOS had\nabout 75% with the remainder being almost exclusively iOS 4.<\/p>\n<p>So based on statistics alone, it makes sense to support Mac OS X 10.6 or later\nand iOS 4 and later. However this doesn&rsquo;t cover all the relevant issues. Another\nimportant factor is new techniques and APIs introduced in Apple&rsquo;s developer\ntools.<\/p>\n<p>In iOS 4, Apple gave us ARC - Automatic Reference Counting - which basically\nremoves the tedious job of memory management. This was especially painful in iOS\napps where there is no garbage collection. <a href=\"http:\/\/longweekendmobile.com\/2011\/09\/07\/objc-automatic-reference-counting-in-xcode-explained\/\">The Long Weekend Website<\/a> has an\nexcellent summary of ARC - what it is and how to use it. Since this only\nexcludes iOS 3 or earlier, there is no issue using this for all iOS projects.<\/p>\n<p>But now Apple has extended ARC to Mac apps as well, but only for apps built to\nrun under 10.7 or later. Even though Mac apps could use garbage collection to\nremove some of the burden of memory management, this had its own inefficiencies\nand overheads. So in my case, I have decided that all future apps will require\n10.7 to take advantage of ARC. Existing apps will stay as is - requiring 10.6 or\nlater. With 10.8 not that far away, the usage statistics should follow this\ntrend.<\/p>\n<p>Back to iOS, there is another new feature of Xcode that is really too attractive\nto ignore and that is story-boarding. This is a graphical way of laying out the\nnavigation logic for your app and providing segues between different views. Ray\nWenderlich has a good <a href=\"http:\/\/www.raywenderlich.com\/5138\/beginning-storyboards-in-ios-5-part-1\">introduction to storyboards<\/a>. So this means that my\nfuture iOS apps will all require 10.5 or later.<\/p>\n<p>One final factor is testing. You really need to have a device running each\nversion of any supported operating system. I would rather concentrate on getting\nthe best result for users of the latest versions that spend my time tweaking for\nolder systems. With iOS, Apple makes it amazingly easy to update to the latest\nversion. With Macs it costs money which is always a barrier, but technically,\nthe App Store is making updates easier to apply.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/support-for-older-operating-systems\/","date":357609600},{"title":"Time In Words & the new iPad","content":"<p>The new iPad has a Retina display, meaning that the pixel density is much\ngreater. For some apps, this is a problem as their graphics are now scaled and\nlook pixellated. However Time In Words is very simple. It uses standard fonts\nand interface widgets with no images or external graphics apart from the icon.\nThe icon may not look perfect on a new iPad, but the display itself should look\nreally great.<\/p>\n<p>I had a report from one user that Time In Words will not work at all on his new\niPad. Unfortunately, the email address supplied did not work, so I was unable to\ncontact this person directly. If you are reading this, please contact me again.<\/p>\n<p>The person having the problem did not specify exactly what the problem was, so I\ndon&rsquo;t know if the app will not start, or if it is not displaying correctly, or\nif it is showing the wrong times or what.<\/p>\n<p>However I suggested two things to try, and I will list them now in case anyone\nelse is having issues:<\/p>\n<ol>\n<li>Try deleting the app from your iPad and then re-installing from the App\nStore.<\/li>\n<li>Do a complete reboot of your iPad in case it is running low on memory.<\/li>\n<\/ol>\n<p>Hopefully one or both of these ideas will solve any problems. They are both good\ngeneral tricks to try with any problem app.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/time-in-words-the-new-ipad\/","date":355708800},{"title":"iPhone 4 Home Button","content":"<p>My iPhone 4 is now 18 months old, and it&rsquo;s Home button is starting to feel the\nstrain. These buttons have been used much more than originally intended, with\nthe new multitasking required double-presses, not to mention access to the\ncamera etc. So basically , it is wearing out.<\/p>\n<p>The phone is out of warranty and there is no way I am going to pay for an\nexpensive repair when my current phone contract will expire later this year, and\nhopefully the iPhone 5 will be ready for me then. And a cheap repair or DIY is\ntoo risky.<\/p>\n<p>I saw a post comparing the physical structure of the home buttons on iPhone 4 &amp;\n4S. Unfortunately I cannot find the link now, but it showed that the actual\nhardware has been made a lot more robust since the iPhone 4 was released, so\nthis should only be a short term issue.<\/p>\n<p>I read a article suggesting the use of WD-40 for a mis-behaving Home button.\nThis is a TERRIBLE idea! Do not spray a penetrating oil into your expensive\nelectronic device. For starters, it don&rsquo;t believe it is a friction problem - I\nthink the mechanism is just wearing out.<\/p>\n<p>Some people recommend recalibrating the Home button as shown in this post from\n<a href=\"http:\/\/www.idownloadblog.com\/2011\/12\/22\/recalibrate-home-button-responsive\/\">idownloadblog.com<\/a>. I am a bit sceptical about this. I tried it, but I can&rsquo;t\nsee that it did anything. Maybe if your problem is software rather than\nhardware, then it will do some good. Anyway, unlike the WD-40 trick, it can&rsquo;t do\nany harm.<\/p>\n<p>Finally, on to the workaround. If your iPhone button is really unreliable, but\nyou are not ready to repair or upgrade, then you can use the Accessibility tools\nto get a software Home button on the screen.<\/p>\n<p>Go to Settings - General - Accessibility. Scroll down to &ldquo;Physical &amp; Motor&rdquo;.\nTurn on AssistiveTouch.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/HomeButton1.png\"><!-- raw HTML omitted --><\/a><\/p>\n<p>When you back out of Settings, you will see a white blob somewhere on your\nscreen. This can be dragged to any location around the edge of the screen, so\nyou can always move it out of the way in any app.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/HomeButton2.png\"><!-- raw HTML omitted --><\/a><\/p>\n<p>Tapping on the white blob gives you an overlay view with four options, one of\nwhich is Home. Tapping this is exactly the same as pressing the physical Home\nbutton. So with this and the power button, you can do everything, even if the\nHome button stops working completely.<\/p>\n<p><a href=\"https:\/\/troz.net\/images\/HomeButton3.png\"><!-- raw HTML omitted --><\/a><\/p>\n<p>Thanks to Tom at our local Apple Store (Robina, Queensland, Australia) for this\ntip.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/iphone-4-home-button\/","date":354585600},{"title":"Time In Words for Mac now available","content":"<p>Time In Words for Mac has just been approved and is now available for free from\nthe\n<!-- raw HTML omitted -->Mac\nApp Store<!-- raw HTML omitted -->.<\/p>\n<p>For more details, check out the <a href=\"https:\/\/troz.net\/time-in-words-for-mac\/\">Time In Words for Mac<\/a> web page.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/time-in-words-for-mac-now-available\/","date":353894400},{"title":"World Time In Words for Mac","content":"<p><!-- raw HTML omitted -->World\nTime In Words for Mac<!-- raw HTML omitted --> version 3.2 is now available through the Mac App\nStore. This version adds support for macOS Mojave dark mode.<\/p>\n<p>Version 3 changed the name from &ldquo;Time In Words&rdquo; to &ldquo;World Time In\nWords&rdquo; as an acknowledgment that the major feature of this app is converting\ntime between different time zones. This update adds the ability to show digital\ntime if you need greater accuracy - just hold down Option as you open the menu.\nI have also added the ability to show 24-hour time in the menu bar.<\/p>\n<p>World Time In Words runs as a menu bar utility app that displays your current\ntime and date in words. Optionally, it can be set to display a number of time\nzones, in plain English so it is always clear which day is being referred\nto. It shows the time in words in your menu bar all the time if you like, and\nnow offers a convenient way to work out what the time will be in other zones at\na specified local time.<\/p>\n<p>The first time you run the World Time In Words app, it will appear in your menu\nbar and pop down a menu that looks like this:<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>Selecting Preferences&hellip; will take you to a window like\nthis<!-- raw HTML omitted --><\/p>\n<p><!-- raw HTML omitted -->Type in part of a city name in the search area\nto find that city and its time zone. Drag or double-click a line in the table on\nthe right to move a time zone to the list on the left, which shows the time\nzones that will appear in the menu. Drag a line out of the list on the left to\nremove a zone, or double-click the unwanted line. Drag and drop to re-arrange\nthe zones in the selected list.<!-- raw HTML omitted --><\/p>\n<p>Once you have selected some time zones, your menu may look like\nthis:<!-- raw HTML omitted --><\/p>\n<p><!-- raw HTML omitted -->Note that the menu will indicate which time\nzones are currently in daylight savings time.<!-- raw HTML omitted --><\/p>\n<p>Version 3.0 adds the ability to see all the time digitally if you have a\ntemporary need for greater accuracy. Hold down the Option key as you click in\nthe menu title and the menu will appear like this:<br>\n<!-- raw HTML omitted --><\/p>\n<p>To specify what will be displayed in the menu bar, you can toggle &ldquo;Show time in\nwords as menu title&rdquo;. If this is checked, you have two other methods for\nadjusting what you will see. Select your preferred accuracy: &ldquo;To closest 5\nminutes&rdquo; or &ldquo;Precise&rdquo;. Use the popup menu to select a time &amp; date format to show\nin the menu bar. You can also choose 24 hour time for the menu title if you\nprefer.<br>\n<!-- raw HTML omitted --><\/p>\n<p>To see what time it will be in your selected time zones at various hours during\nyour day, choose &ldquo;What time will it be when&hellip;&rdquo; from the menu. Move the slider\nto different hours in your local zone and read what the corresponding time will\nbe in your preferred time zones.<br>\n<!-- raw HTML omitted --><\/p>\n<p>If you want to make World Time In Words start automatically whenever you log in\nto your Mac, check the &ldquo;Auto start&hellip;&rdquo; checkbox. This uses Apple&rsquo;s new methods\nof adding sandboxed items to the login startup list which has two consequences:<\/p>\n<ul>\n<li>World Time In Words will not show up in your Login Items if you go to System\nPreferences<\/li>\n<li>The auto-start will only work if the app is installed in your Applications\nfolder.<\/li>\n<\/ul>\n<p>While I do not think the second item is a problem, since the App Store\nautomatically installs into your Applications folder, I disagree with the policy\nenforced in the first item. It means that if you wish to un-install World Time\nIn Words, you should ensure that you have turned off &ldquo;Auto start&hellip;&rdquo; first, as\nthere is no easy way to do this from outside the app.<\/p>\n<p>However, World Time In Words is sandboxed, so it&rsquo;s data and settings are kept in\ntheir own container and isolated from other apps for better security.<\/p>\n<p>If you are having any problems with World Time In Words, or you have any\nsuggestions for future improvements, please <a href=\"mailto:sarah@troz.net?subject=World%20Time%20In%20Words%20-%20Mac\">email me<\/a>.<\/p>\n","url":"https:\/\/troz.net\/time-in-words-for-mac\/","date":353808000},{"title":"Interface options for selecting time zones","content":"<p>As part of the design for [Time In Words for Mac][1], I had to work out the\ninterface for selecting time zones. With [Time In Word for iOS][2], I used\npicker wheels which are excellent for selecting hierarchical data. On the Mac,\nthere is no such thing as the iOS picker wheel and so I had to consider what to\nuse instead.<\/p>\n<p>When you ask the system (Mac or iOS) for the available time zones, you get a\nlist of names like this:<\/p>\n<blockquote>\n<p>Africa\/Abidjan<br>\nAfrica\/Accra<br>\n&hellip;<br>\nAmerica\/Cayman<br>\nAmerica\/Chicago<br>\n&hellip;<br>\nEurope\/Riga<br>\nEurope\/Rome<br>\netc.<\/p>\n<\/blockquote>\n<p>This seems obviously designed for a hierarchical display with the major regions\nas a first selection, filtering down to the cities in that region, making\nselection a two-step process. With the picker wheel in iOS, that is what I did.\nThe first wheel selects the region which then populates the second wheel with\nthe relevant city names. It makes it quick and easy to select a zone.<\/p>\n<p>I always prefer to use standard user interface objects because people are\nfamiliar with them, they automatically update with the system, and there is much\nless chance of the App Store rejecting the app. So I scrolled through the\navailable Mac options and came to NSBrowser. This is basically what Finder uses\nwhen in column mode.<\/p>\n<p>I created an NSBrowser object, worked out a way to populate it and tested. It\nwas incredibly slow! The list of regions appeared when the window opened, and\nthat was no problem. Then I clicked a region and the first set of city names\nappeared instantly. But subsequent selections took about 3 seconds to appear.<\/p>\n<p>I added some timing tests and my data gathering was taking about 20\nmilliseconds. The log thought the browser had updated within about 100\nmilliseconds, so I guess the rest of the time was some redraw issue.<\/p>\n<p>Apple provides a large number of sample projects so I downloaded one that used\nNSBrowser. It seemed fast and responsive, so I duplicated it&rsquo;s different method\nof assembling the data and tried again. No luck - it was as slow as before.<\/p>\n<p>I am sure that if I kept at it, I would eventually work out what was causing the\nbottleneck and make NSBrowser work - after all, Finder is responsive enough,\neven if not great. But in the end, I decided that the advantages to using this\nform of interface didn&rsquo;t justify the time spent, so I went with a simple table\nand a search field.<\/p>\n<p>It is fast to populate, responsive to searches and didn&rsquo;t take long to set up.\nSo I am happy, although still perplexed about NSBrowser. It is on my to-do list\nof things I want to work out one day.<\/p>\n<p>[1]: \/time-in-words-for-mac\/ [2]: \/time-in-words\/<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/interface-options-for-selecting-time-zones\/","date":351820800},{"title":"Scroll bars in Mac OX 10.6 and 10.7","content":"<p>With the introduction of OS X 10.7 (Lion), Apple removed the obvious scroll bars\nfrom windows and replaced them with a much more subtle scroll indicator, that\nonly appears when you are actually scrolling. This was designed to match the iOS\nscrolling, as was the swap of scroll direction which makes much more sense if\nyou use a trackpad.<\/p>\n<p>With the upcoming <a href=\"https:\/\/troz.net\/time-in-words-for-mac\/\">Time In Words for Mac<\/a>, I have a Preferences window to\nallow selection of time zones to display in the menu. The app will be compatible\nwith 10.6 or later. Under 10.6, the scrollbars are always visible and this is\nwhat the Preferences display looks like:<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>This may change, but the basic layout is there. As you can see, I have a\n3-column table listing all the available time zones, with the final column right\njustified.<\/p>\n<p>Under 10.7, this doesn&rsquo;t quite work:<\/p>\n<p><!-- raw HTML omitted --><\/p>\n<p>I had to grab this screen shot quickly after swiping the trackpad, but you can\nsee the problem. When not scrolling, the scroll indicator is hidden and the\nright column is fully visible, but when dragging the scroll indicator appears on\ntop of the right-justified entries in that column.<\/p>\n<p>So now I am not quite sure what to do. Here are the options I have considered:<\/p>\n<ul>\n<li>Left or centre-justify the text in the final column.<\/li>\n<li>Add some spacing at the end of each line so that the scroll indicator appears\nin blank space.<\/li>\n<li>Put up with it.<\/li>\n<\/ul>\n<p>I will have to experiment with various options and see what I can do.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/scroll-bars-in-mac-ox-10-6-and-10-7\/","date":351820800},{"title":"Time In Words available in the App Store","content":"<p>Time In Words is now available at the App Store.<\/p>\n<p>Time In Words is a clock and calendar app that takes you out of the digital era\nand back to when saying “quarter to seven” or “five past two” was accurate\nenough.<\/p>\n<p><a href=\"http:\/\/itunes.apple.com\/app\/time-in-words\/id498403851\"><!-- raw HTML omitted --><\/a><\/p>\n<p>Check out the <a href=\"https:\/\/troz.net\/time-in-words\/\">Time In Words web page<\/a> for more info and screen shots.<\/p>\n","url":"https:\/\/troz.net\/post\/2012\/time-in-words-available-in-the-app-store\/","date":350438400},{"title":"World Time In Words for iOS","content":"<p>World Time In Words is a clock and time converter app that takes you away from numbers and shows you the time as a complete sentence. No more worrying about whether it is morning or evening or whether it is yesterday, today or tomorrow in some other part of the world.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS.jpg\" alt=\"Basic display\"><\/p>\n<p>Do you plan on phoning an overseas friend in the middle of the night? How about scheduling an online meeting with people in different time zones? Or even checking what time the next big keynote will start in your time?<\/p>\n<p><a href=\"http:\/\/itunes.apple.com\/app\/time-in-words\/id498403851\">World Time In Words v 5.0<\/a> is now available from the App Store.<!-- raw HTML omitted --><\/p>\n<p>Set up World Time In Words up with all the time zones you need to check. Scroll through the list to see the local time in each of your selected zones shown as a sentence. This is easier to comprehend and much less prone to error.<\/p>\n<p>If you need to plan a meeting or phone call, tap &ldquo;What time will it be…&rdquo;. Use the slider to adjust the hour in your local zone and the corresponding hour in your selected world zones will appear.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS-2.jpg\" alt=\"What time will it be\"><\/p>\n<p>Tap the &ldquo;+&rdquo; button to add or delete time zones.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS-1.jpg\" alt=\"Edit zones\"><\/p>\n<p>Your top three selected time zones can also be added to your Notification Centre as a widget. Click Edit and drag to change the order of time zones in the table to decide which ones appear. Then swipe to your widgets page, scroll to the bottom and click the Edit button to add the Time in Words widget.<\/p>\n<p><img src=\"https:\/\/troz.net\/images\/WTiW-iOS-4.jpg\" alt=\"Today widget\"><\/p>\n","url":"https:\/\/troz.net\/time-in-words\/","date":350352000}],"feedTitle":"TrozWare","feedUrl":"https:\/\/troz.net\/index.xml","feedDate":625621033.70127106},{"feedDescription":"Latest World news news, comment and analysis from the Guardian, the world's leading liberal voice","feedArticles":[{"title":"France imposes four-week national lockdown to combat coronavirus","content":"<p>Emmanuel Macron calls for collective effort during ‘brutal brake’ after record number of new Covid-19 cases<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/series\/coronavirus-live\/latest\">Coronavirus – latest updates<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/coronavirus-outbreak\">See all our coronavirus coverage<\/a><\/li><\/ul><p>France will enter a new month-long national lockdown from midnight on Thursday to apply a “brutal brake” on coronavirus infections, president Emmanuel Macron has announced<strong>.<\/strong><\/p><p>In a televised speech on Wednesday evening, Macron called for a “collective effort” to combat Covid-19, admitting recent efforts to contain the virus were “useful, but not enough”.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/france-expected-to-impose-four-week-national-lockdown-covid\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/france-expected-to-impose-four-week-national-lockdown-covid","date":625608474},{"title":"Satellite imagery of Aden indicates scale of pandemic in Yemen","content":"<p>Academics’ analysis of burial plots points to excess deaths level in crisis-ridden country<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/series\/coronavirus-live\/latest\">Coronavirus – latest updates<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/coronavirus-outbreak\">See all our coronavirus coverage<\/a><\/li><\/ul><p>A groundbreaking study using high-resolution satellite imagery to analyse graveyards has found that deaths have nearly doubled in Aden, the centre of Yemen’s coronavirus outbreak.<\/p><p>The discovery has given a sense of the true scale of the havoc the pandemic has wreaked on the vulnerable country.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/27\/satellite-imagery-of-aden-indicates-scale-of-pandemic-in-yemen\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/27\/satellite-imagery-of-aden-indicates-scale-of-pandemic-in-yemen","date":625534227},{"title":"EU leaders urged to aid transfer of Covid patients between member states","content":"<p>Ursula von der Leyen asks leaders to map ICU capacity as Belgium gets close to running out of beds<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/series\/coronavirus-live\/latest\">Coronavirus – latest updates<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/coronavirus-outbreak\">See all our coronavirus coverage<\/a><\/li><\/ul><p>The European commission president, Ursula von der Leyen, has asked EU leaders to help Brussels map intensive care bed capacity to allow the transfer of coronavirus patients from overrun hospitals across Europe amid a rise in infection in every member state.<\/p><p>Belgium is expected to run out of intensive care beds within two weeks given the spiralling rate of infection, while the Netherlands has already started airlifting patients from pandemic hotspots to Germany. Almost half of France’s intensive care unit capacity has been taken up by new coronavirus cases.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/eu-leaders-urged-to-work-together-as-covid-cases-rise-in-all-member-states\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/eu-leaders-urged-to-work-together-as-covid-cases-rise-in-all-member-states","date":625586386},{"title":"Covid hospital cases in UK ‘could pass spring peak in November’","content":"<p>Government adviser suggests new lockdown measures needed to curb rise <br><\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/series\/coronavirus-live\/latest\">Coronavirus – latest updates<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/coronavirus-outbreak\">See all our coronavirus coverage<\/a><\/li><\/ul><p>The number of coronavirus patients in UK hospitals could pass the spring peak by the end of November without further lockdown measures, a leading government scientific adviser has warned.<\/p><p>Sir Mark Walport, a member of the government’s Scientific Advisory Group for Emergencies (Sage), said it was “not unrealistic” that there would be 25,000 people in hospital with Covid by the end of next month – higher than the April peak.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/covid-hospital-cases-in-uk-could-pass-spring-peak-in-november\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/covid-hospital-cases-in-uk-could-pass-spring-peak-in-november","date":625571435},{"title":"Coronavirus live news: Macron announces national lockdown in France from Friday as cases surge","content":"<p><a href=\"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks?page=with:block-5f9989e98f0866fbe9e448c6#block-5f9989e98f0866fbe9e448c6\">Angela Merkel agrees new restrictions from Monday<\/a>; <a href=\"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks?page=with:block-5f99b1028f0891eda42275d0#block-5f99b1028f0891eda42275d0\">Turkish health minister describes ‘scary’ rise in cases<\/a>; <a href=\"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks?page=with:block-5f995efb8f0866fbe9e445ff#block-5f995efb8f0866fbe9e445ff\">coronavirus records tumbling across Europe<\/a><\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/germany-set-to-impose-new-coronavirus-rules-amid-record-rise-in-cases\">Germany to bring in new rules after record surge in cases<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/eu-leaders-urged-to-work-together-as-covid-cases-rise-in-all-member-states\">EU leaders urged to aid transfer of patients between countries <\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks?page=with:block-5f98c5988f08eb5db3f0efca#block-5f98c5988f08eb5db3f0efca\">China sees highest cases in two months<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/global-coronavirus-report-us-adds-nearly-500000-cases-in-a-week-europe-faces-more-lockdowns\">US adds nearly 500,000 cases in a week; Europe faces more lockdowns<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/uk-news\/live\/2020\/oct\/28\/uk-coronavirus-live-uk-lockdown-covid-death-toll-latest-updates\">UK coronavirus updates - live <\/a><\/li><\/ul><p class=\"block-time published-time\"> <time datetime=\"2020-10-28T22:29:53.860Z\">10.29pm <span class=\"timezone\">GMT<\/span><\/time> <\/p><p><strong>The Marshall Islands in the Pacific has confirmed its first Covid-19 cases<\/strong> - ending the archipelago’s status as one of the few nations in the world to remain virus free.<\/p><p>The Marshalls government has announced that two workers at a US army garrison on Kwajalein Atoll tested positive for coronavirus after arriving on a military flight from <strong>Hawaii<\/strong> on Tuesday.<\/p><p>What we were worried about has come true.<\/p><p>Now lives are going to be put on hold because a handful of people made the decisions they did for whatever reasons.<\/p><p class=\"block-time published-time\"> <time datetime=\"2020-10-28T22:06:57.642Z\">10.06pm <span class=\"timezone\">GMT<\/span><\/time> <\/p><p><strong>Bayonne’s Top 14 match against Toulon on Friday was postponed<\/strong> by the LNR, the body that runs professional rugby in France, after several cases of Covid-19 were reported.<\/p><p>Tests carried out on Tuesday revealed “several positive cases” among the professional playing squad, Bayonne said, adding that those affected were immediately put in self-isolation.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks","date":625618892},{"title":"Anonymous Trump critic revealed to be ex-homeland security chief of staff","content":"<p>Miles Taylor, who wrote article and subsequent book, claimed there was ‘a quiet resistance’ within the administration<br><\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/us-news\/series\/us-politics-live\/latest\">US politics – live updates<\/a><\/li><\/ul><p>The identity of Anonymous, a Trump<strong> <\/strong>official who claimed there was a “a quiet resistance” within the administration working to save America in a <a href=\"https:\/\/www.nytimes.com\/2018\/09\/05\/opinion\/trump-white-house-anonymous-resistance.html\">2018 New York Times op-ed<\/a>, has been revealed as Miles Taylor, a former chief of staff at the Department of Homeland Security.<\/p><p>The penning of the article, and a subsequent book on the same theme, sparked a slew of media coverage and wild Washington speculation as to the identity of the author. It also angered Donald Trump and many of his top officials, who launched a frantic and unsuccessful hunt for the mole throughout the White House staff and beyond.<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/anonymous-trump-official-miles-taylor-homeland-security\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/anonymous-trump-official-miles-taylor-homeland-security","date":625609885},{"title":"Biden and Obama to campaign in battleground state Michigan as election day nears – live","content":"<ul><li><a href=\"https:\/\/www.theguardian.com\/us-news\/live\/2020\/oct\/27\/us-election-2020-live-voter-turnout-donald-trump-joe-biden-barack-obama-latest-presidential-elections-news-updates?page=with:block-5f99a85b8f0891eda4227521#block-5f99a85b8f0891eda4227521\">Fauci says don’t expect post-pandemic normal until 2022<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/anonymous-trump-official-miles-taylor-homeland-security\">Anonymous Trump critic revealed to be ex-DHS chief of staff<\/a><br><\/li><li><a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/joe-biden-presidency-first-100-days\">What would the first 100 days of a Biden presidency look like?<\/a><br><\/li><li><a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/stephen-miller-trump-second-term-immigration-blitz\">Trump aide preparing second-term immigration blitz<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/us-news\/2017\/feb\/22\/us-politics-minute-sign-up-email-newsletter-app-notification\">Sign up for Fight to Vote – our weekly US election newsletter<\/a><br><\/li><\/ul><p class=\"block-time published-time\"> <time datetime=\"2020-10-28T23:22:35.401Z\">11.22pm <span class=\"timezone\">GMT<\/span><\/time> <\/p><p><strong>In Phoenix, Brexit Party leader Nigel Farage made a guest appearance at the Trump rally. <\/strong><\/p><p>“I was honored to come to America to bring the Brexit message – the message that you can beat the establishment,” he said. <\/p><p lang=\"en\" dir=\"ltr\">Nigel Farage is praising the President on stage <a href=\"https:\/\/t.co\/qePNapJSoL\">pic.twitter.com\/qePNapJSoL<\/a><\/p><p class=\"block-time published-time\"> <time datetime=\"2020-10-28T23:00:40.481Z\">11.00pm <span class=\"timezone\">GMT<\/span><\/time> <\/p><p>The inspector general for the Small Business Administration (SBA), a federal agency, released a <a href=\"https:\/\/www.sba.gov\/document\/report-21-02-inspection-small-business-administrations-initial-disaster-assistance-response-coronavirus-pandemic\">report<\/a> today that said the agency potentially gave billions of dollars in loans to fraudulent small businesses. Through the CARES Act, $375 billion was set aside for loans to small businesses, largely to ensure that employees could be kept on payroll. <\/p><p>The report said that the agency “lowered the guardrails” for receiving a loan in effort to ensure that small businesses were getting the loans quickly. This “significantly increases the risk of program fraud”. <\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/live\/2020\/oct\/27\/us-election-2020-live-voter-turnout-donald-trump-joe-biden-barack-obama-latest-presidential-elections-news-updates\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/live\/2020\/oct\/27\/us-election-2020-live-voter-turnout-donald-trump-joe-biden-barack-obama-latest-presidential-elections-news-updates","date":625620252},{"title":"Trump to gut protections in Alaska’s Tongass forest, the ‘lungs of the country’","content":"<p>Administration to permit logging in the world’s largest intact temperate rainforest<\/p><p>The Trump administration has announced it will lift protections in Alaska’s Tongass national forest, permitting logging in the world’s largest intact temperate rainforest.<\/p> <a href=\"https:\/\/www.theguardian.com\/environment\/2020\/oct\/28\/trump-permit-logging-alaska-tongass-national-forest\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/environment\/2020\/oct\/28\/trump-permit-logging-alaska-tongass-national-forest","date":625603389},{"title":"Two British teenagers killed and third critically injured parasailing in Greece","content":"<p>High winds caused group to drift toward rocks after rope holding parachute reportedly snapped in the incident in Rhodes<br><\/p><p>Two British teenagers have been killed and a third critically injured after a rope holding their parasailing parachute snapped.<\/p><p>The trio, believed to be siblings, were found on rocks near Lindos on the island of Rhodes.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/two-british-teenagers-killed-parasailing-rhodes-greece-say-authorities\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/two-british-teenagers-killed-parasailing-rhodes-greece-say-authorities","date":625612511},{"title":"Four Iranians who died crossing Channel were part of same family","content":"<p>Rasul Iran Nezhad and Shiva Mohammad Panahi drowned along with their children Anita and Armin<br><\/p><p>Four Iranian Kurds who died trying to cross the Channel in high winds were members of one family who paid smugglers thousands of euros after two failed attempts to reach Britain, the Guardian has been told.<\/p><p>Rasul Iran Nezhad and his wife, Shiva Mohammad Panahi, both 35, and two of their children, Anita, nine, and Armin, six, drowned as they tried to reach Britain by boat, according to a relative of the family and the Iranian-Kurdish human rights organisation Hengaw.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/four-migrants-died-channel-part-same-iranian-family\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/four-migrants-died-channel-part-same-iranian-family","date":625595921},{"title":"Eight charged in alleged Chinese plot to coerce family to return from US","content":"<ul><li>Five individuals arrested, with three believed to be in China<\/li><li>Chinese government allegedly plotted to pressure ex-official<\/li><\/ul><p>Eight people have been charged with conspiring to work on behalf of China’s government in a plot to coerce a Chinese family in the US to return to their home country to face charges.<\/p><p>Five of the individuals charged, including an American private investigator, were arrested on Wednesday in New Jersey, New York and California. The rest are believed to be in China, top justice department officials said in a news conference.<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/chinese-plot-coerce-family-return-from-us\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/chinese-plot-coerce-family-return-from-us","date":625601233},{"title":"US blocking selection of Ngozi Okonjo-Iweala to be next head of WTO","content":"<p>Sources say it is unclear if move is attempt to sabotage trade body much criticised by Trump<\/p><p>The US is blocking the appointment of <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/08\/wto-to-appoint-first-female-boss-as-shortlist-narrows-to-two\">Ngozi Okonjo-Iweala <\/a>as the next head of the World Trade Organization despite the former finance minister of Nigeria winning the overwhelming backing of the WTO’s 164 members, it has emerged.<\/p><p>Dr Okonjo-Iweala had moved a step closer to becoming the first woman and the first African to be director of the global trade watchdog after securing the support of a key group of trade ambassadors in Geneva. Soundings taken by a selection panel of three WTO trade ministers found she had far more support than her South Korean rival, Yoo Myung-hee.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/us-blocking-selection-of-ngozi-okonjo-iweala-to-be-next-head-of-wto\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/us-blocking-selection-of-ngozi-okonjo-iweala-to-be-next-head-of-wto","date":625603063},{"title":"Joe Rogan hosts Alex Jones on Spotify podcast despite ban","content":"<p>Interview with conspiracy theorist leaves streaming service in awkward position<\/p><p>Joe Rogan, Spotify’s biggest podcast star, has left the platform in an awkward position after conducting a lengthy interview with Alex Jones, the conspiracy theorist banned by Swedish streaming company for producing “hate content”.<\/p><p>Rogan, the libertarian host of the long-running and wildly popular Joe Rogan Experience podcast, uploaded a three-hour discussion on Tuesday featuring Jones, the founder of the conspiracy site Infowars.<\/p> <a href=\"https:\/\/www.theguardian.com\/technology\/2020\/oct\/28\/joe-rogan-hosts-alex-jones-on-spotify-podcast-despite-ban\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/technology\/2020\/oct\/28\/joe-rogan-hosts-alex-jones-on-spotify-podcast-despite-ban","date":625600421},{"title":"Turkey threatens legal action over Charlie Hebdo's caricature of president","content":"<p>French satirical newspaper depicted Recep Tayyip Erdoğan in his underwear <\/p><p>Turkey has threatened “legal and diplomatic” action against the French satirical newspaper Charlie Hebdo after it published a caricature of president Recep Tayyip Erdoğan on its latest front page.<\/p><p>The drawing described as “disgusting” by the Turkish leader and Ankara’s announcement that prosecutors have launched an official investigation into the publication have worsened already<a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/27\/muslim-backlash-against-macron-gathers-pace-after-police-raids\"> heightened tensions<\/a> between the two countries.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/turkey-threatens-legal-action-over-charlie-hebdos-caricature-of-president\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/turkey-threatens-legal-action-over-charlie-hebdos-caricature-of-president","date":625603513},{"title":"Yemen on brink of losing entire generation of children to hunger, UN warns","content":"<p>Food security crisis means acute malnutrition among under-fives at highest levels since war engulfed the country<\/p><p>Almost 100,000 children under the age of five are at risk of dying in Yemen as the country slides back into a hunger crisis.<\/p><p>An analysis by UN agencies says the coronavirus pandemic, economic problems and conflict have led to the highest levels of malnutrition ever recorded in parts of the country.<\/p> <a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/yemen-on-brink-of-losing-entire-generation-of-children-to-hunger-un-warns\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/yemen-on-brink-of-losing-entire-generation-of-children-to-hunger-un-warns","date":625597197},{"title":"Drag Race stars get political: 'People were like, you queens should stick to wigs and makeup'","content":"<p>They’ve been told to stick to makeup. But for RuPaul queens Latrice Royale, Peppermint and Alaska, and the legendary Lady Bunny, channelling drag’s revolutionary spirit is a must in 2020<\/p><p>Drag and activism have always gone hand in hand. In June 1969, Marsha P Johnson, a Black drag performer reputedly threw the first brick in the <a href=\"https:\/\/www.theguardian.com\/lifeandstyle\/2019\/jun\/19\/stonewall-50th-anniversary-night-that-unleashed-gay-liberation\">Stonewall uprising<\/a> in New York City; the violence that followed inspired LGBTQ+ people the world over to stand up to oppression and discrimination. Now, 51 years later, <a href=\"https:\/\/www.theguardian.com\/fashion\/gallery\/2019\/sep\/12\/drag-from-the-renaissance-to-rupaul-in-pictures\">drag is more visible than ever<\/a>, due in no small part to the multiple Emmy award-winning reality series RuPaul’s Drag Race. The show has given a powerful platform to a new generation of drag, trans and non-binary performers. And, whereas early activists often had to contend with police batons, water cannon and prison cells, these queens have more freedom to speak their minds.<\/p><p>“Drag has always been a stronghold against shitty politicians,” says Alaska, in her trademark <a href=\"https:\/\/www.theguardian.com\/commentisfree\/2015\/jul\/24\/vocal-fry-strong-female-voice\">vocal fry<\/a>. The ferociously witty winner of RuPaul’s Drag Race All Stars season 2 says her political role models include Act Up (Aids Coalition to Unleash Power), the movement that advocates to end Aids, and Elizabeth Taylor, one of the first Hollywood icons to speak up during the Aids crisis in the 1980s, who “wasn’t technically a drag queen, but she kind of was, right?”<br><br>“Act Up had this badass element and ‘enough is enough’ attitude. It was during the Reagan presidency and they were, like: ‘This man doesn’t see us, we have a crisis, people are dying – we’re burying all our friends and the president won’t even acknowledge it.’ They had to take really drastic measures because it was the only way to get through,” she says.<br><br>Alaska has also found an effective medium to get her point across. The bi-weekly podcast Race Chaser, which she co-hosts with fellow Drag Race contestant Willam, features Let’s Get Political, a segment in which the queens share crucial information about registering to vote and engaging with good causes, while making no secret of their personal sentiments. Alaska recently said, “An empty suit on a hanger in a closet would do less damage than the current person in the White House.” With 1.2 to 1.5m downloads a month, their platform is not to be sniffed at.<\/p> <a href=\"https:\/\/www.theguardian.com\/tv-and-radio\/2020\/oct\/28\/for-queer-individuals-this-is-life-or-death-the-drag-race-stars-getting-political\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/tv-and-radio\/2020\/oct\/28\/for-queer-individuals-this-is-life-or-death-the-drag-race-stars-getting-political","date":625590806},{"title":"UK weather: torrential rain could cause 'dangerous' flooding this week","content":"<p>Yellow ‘be aware’ rain warning for west coast of England, much of Wales and parts of Scotland<\/p><p>Torrential downpours could result in “dangerous” flooding across the UK this week, the Met Office has warned.<\/p><p>Forecasters say large waves, heavy rain, strong gales and potential river flooding will affect the west coast of England, much of Wales and parts of Scotland from Thursday.<\/p> <a href=\"https:\/\/www.theguardian.com\/uk-news\/2020\/oct\/28\/uk-weather-torrential-rain-dangerous-flooding\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/uk-news\/2020\/oct\/28\/uk-weather-torrential-rain-dangerous-flooding","date":625610085},{"title":"Wole Soyinka to publish first novel in almost 50 years","content":"<p>Chronicles of the Happiest People on Earth will be released this year, with the 86-year-old author also planning fresh theatre work after ‘continuous writing’ in lockdown<br><\/p><p>Wole Soyinka has used his time in lockdown to write his first novel in almost 50 years.<\/p><p>The Nigerian playwright and poet, who became the first African to win the Nobel prize for literature in 1986, published his widely celebrated debut novel, The Interpreters, in 1965. His second and most recent novel, Season of Anomy, was released in 1973.<\/p> <a href=\"https:\/\/www.theguardian.com\/books\/2020\/oct\/28\/wole-soyinka-to-publish-first-novel-in-almost-50-years-chronicles-of-the-happiest-people-on-earth\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/books\/2020\/oct\/28\/wole-soyinka-to-publish-first-novel-in-almost-50-years-chronicles-of-the-happiest-people-on-earth","date":625585845},{"title":"Hurricane Zeta makes landfall in Louisiana as powerful category 2 storm","content":"<p>Hurricane hunter aircraft confirmed at 4pm local time Wednesday the storm made landfall near Cocodrie<\/p><p>Hurricane Zeta made landfall in storm-weary Louisiana on Wednesday afternoon as a powerful category two storm and struck the latest blow of an extraordinarily busy Atlantic tropical storm season.<\/p><p>The Miami-based National Hurricane Center said a hurricane hunter aircraft confirmed at 4pm Wednesday that the menacing storm had made landfall near Cocodrie, Louisiana.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/27\/louisiana-hurricane-warning-mexico-yucatan\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/27\/louisiana-hurricane-warning-mexico-yucatan","date":625613141},{"title":"Victoria reports three Covid cases; Rudd 'deeply disturbed' by Epstein donations – politics live","content":"<p>Former Australian PM says he was ‘blindsided’ by revelations the convicted paedophile donated money to the Internat­ional Peace Institute. Follow all the latest news and updates, live<\/p><p class=\"block-time published-time\"> <time datetime=\"2020-10-28T23:23:27.657Z\">11.23pm <span class=\"timezone\">GMT<\/span><\/time> <\/p><p>If you need to wile away some time from the real world, this from the NY Times is insanely addictive – can you guess a Trump supporter or Biden supporter from their fridges?<\/p><p>It’s a lot harder than it seems.<\/p><p class=\"block-time published-time\"> <time datetime=\"2020-10-28T23:13:30.767Z\">11.13pm <span class=\"timezone\">GMT<\/span><\/time> <\/p><p>Department of Foreign Affairs and Trade officials have told Senate Estimates they did not facilitate <strong>Tony Abbott’s<\/strong> travel to or return from the UK, although Abbott did have morning tea with the high commissioner in London and embassy staff while there.<br><\/p><p>They’ve taken on notice a string of questions about whether negotiations for an Australia UK free trade agreement was discussed.<br><\/p> <a href=\"https:\/\/www.theguardian.com\/australia-news\/live\/2020\/oct\/29\/kevin-rudd-epstein-donations-coronavirus-scott-morrison-senate-liberal-labor-nsw-victoria-qld-politics-live\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/australia-news\/live\/2020\/oct\/29\/kevin-rudd-epstein-donations-coronavirus-scott-morrison-senate-liberal-labor-nsw-victoria-qld-politics-live","date":625620303},{"title":"EU accused of abandoning migrants to the sea with shift to drone surveillance","content":"<p>Border agency Frontex accused by campaigners and MEPs of evading its responsibilities towards people in distress<\/p><p>The EU has been accused of condemning migrants to death by critics of its recent €100m (£90m) deals for drone surveillance over the Mediterranean Sea.<\/p><p>Campaigners and MEPs have accused the EU’s border agency Frontex of investing in technology to monitor migrants from afar and skirt its responsibilities towards people in distress.<\/p> <a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/eu-accused-of-abandoning-migrants-to-the-sea-with-shift-to-drone-surveillance\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/eu-accused-of-abandoning-migrants-to-the-sea-with-shift-to-drone-surveillance","date":625582387},{"title":"'We are drinking sewage water': Zimbabwe shortages threaten thousands","content":"<p>As the search for water in Bulawayo becomes more desperate, diarrhoea outbreaks from dirty water are endangering children<\/p><p>It is 6am on a Saturday and residents of Sizinda, a poor suburb in Bulawayo, have begun their desperate hunt for water. The taps at home dried up three months ago.<\/p><p>Water has become a <a href=\"https:\/\/www.reuters.com\/article\/us-zimbabwe-water-idUSKBN22R2ET\">daily struggle<\/a> in Zimbabwe’s second biggest city, largely the result of a severe drought last year which has dried up the reservoirs. The poor rains expected this year will bring more hardship.<\/p> <a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/we-are-drinking-sewage-water-zimbabwe-shortages-threaten-thousands\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/we-are-drinking-sewage-water-zimbabwe-shortages-threaten-thousands","date":625562136},{"title":"Covid crisis fashion report: 'workers' rights, wellbeing and dignity should not be put on hold'","content":"<p>An assessment of 428 Australian and international fashion brands has found that while most took some positive actions to protect workers, none could ensure all workers were covered<\/p><p>A special report by Baptist World Aid Australia has found that, throughout the Covid pandemic, 35% of fashion companies assessed did not show evidence that they had made regular payments to their suppliers.<\/p><p>The Covid Fashion Report – which this year takes the place of Baptist World Aid Australia’s annual Ethical Fashion Report – assessed 96 Australian, New Zealand and international companies, representing 428 brands, on specific positive actions taken amid the coronavirus pandemic. <\/p> <a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/covid-crisis-fashion-report-workers-rights-wellbeing-and-dignity-should-not-be-put-on-hold\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/28\/covid-crisis-fashion-report-workers-rights-wellbeing-and-dignity-should-not-be-put-on-hold","date":625509019},{"title":"‘Old and unsafe’ cars sent to developing world fuelling air pollution, report finds","content":"<p>Poor quality of used vehicles exported from the US, Europe and Japan are hindering efforts to mitigate climate breakdown, says UN<\/p><p>Millions of used motor vehicles exported from the US, Europe and Japan to developing countries are of poor quality and are contributing significantly to air pollution, according a new UN report.<\/p><p>About 80% of the 14m used light-duty vehicles – saloon cars, SUVs and minibuses – exported between 2015 and 2018 went to low and middle-income countries. About 40% went to Africa, found the <a href=\"https:\/\/wedocs.unep.org\/bitstream\/handle\/20.500.11822\/34175\/UVE.pdf?sequence=1&amp;isAllowed=y\">report<\/a>, published by the UN Environment Programme (Unep).<\/p> <a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/27\/old-and-unsafe-cars-sent-to-developing-world-fuelling-air-pollution-report-finds\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/27\/old-and-unsafe-cars-sent-to-developing-world-fuelling-air-pollution-report-finds","date":625498686},{"title":"'Just 15 minutes out every day': a teenage prisoner's life during Covid","content":"<p>One young inmate tells how being locked up alone for hours and not being able to see his family affected his mental health<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/27\/uk-covid-policy-for-children-in-detention-cruel-and-inhumane-says-un-expert\">UK Covid policy for children in detention ‘cruel and inhumane’, says UN expert<\/a><\/li><\/ul><p>For five months, 16-year-old Sean* spent around 23 hours a day in his cell. He tried to get through the time by doing puzzles and calling his lawyer, asking her again and again to help him get bail.<\/p><p>When he arrived at the secure training centre (STC) it was already in lockdown. He was just 15. “I had to go into total isolation for the first two weeks, just 15 minutes out every day. It was my first time in custody and at first I thought this is OK, it’s a chance to slow things down. But after two weeks it began to affect me. You couldn’t do anything. I could hear voices calling on the wing, but I only saw the guard.”<\/p> <a href=\"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/27\/just-15-minutes-out-every-day-a-teenage-prisoners-life-during-covid\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/global-development\/2020\/oct\/27\/just-15-minutes-out-every-day-a-teenage-prisoners-life-during-covid","date":625476643},{"title":"Covid testing: does Operation Moonshot have a shot at success?","content":"<p>UK government is pinning hopes on mass testing but public health directors find flaws in thinking<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/10-of-englands-population-could-be-tested-for-covid-19-every-week\">10% of England’s population could be tested for Covid-19 every week<\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/series\/coronavirus-live\/latest\">Coronavirus – latest updates<\/a><\/li><\/ul><p>Operation Moonshot, the government’s mass testing mission to screen millions of asymptomatic people every week, is having a bumpy lift-off.<\/p><p>The project only emerged because of a <a href=\"https:\/\/www.theguardian.com\/world\/2020\/sep\/09\/boris-johnson-pinning-hopes-on-covid-testing-moonshot-leaked-papers-show\">leak<\/a> last month and such was the stated ambition – £100bn to deliver 10m tests a day – that MPs <a href=\"https:\/\/www.youtube.com\/watch?v=NO2iyg3fQHM\">laughed<\/a> when Matt Hancock talked about it in parliament.<\/p> <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/covid-testing-does-operation-moonshot-have-a-shot-at-success\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/covid-testing-does-operation-moonshot-have-a-shot-at-success","date":625611155},{"title":"If Biden wins what would the first 100 days of his presidency look like?","content":"<p>If he succeeds in defeating Trump, the Democrat will have to urgently tackle the pandemic and rebuild global relationships<\/p><p>If Joe Biden wins the 2020 US election against Donald Trump next week, the new president-elect will face enormous pressures to implement a laundry list of priorities on a range of issues from foreign policy to the climate crisis, reversing many of the stark changes implemented by his predecessor.<\/p><p> <span>Related: <\/span><a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/25\/from-climate-to-china-how-joe-biden-is-plotting-americas-restoration\">From climate to China, how Joe Biden is plotting America’s restoration<\/a> <\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/joe-biden-presidency-first-100-days\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/joe-biden-presidency-first-100-days","date":625566469},{"title":"Trump aide Stephen Miller preparing second-term immigration blitz","content":"<p>The hardline adviser is said to be ready to unleash executive orders deemed too extreme for a president seeking re-election<\/p><p>The architect of Donald Trump’s hardline immigration policy, senior adviser Stephen Miller, is said to have a drawer full of executive orders ready to be signed in “shock and awe” style if Trump is re-elected.<\/p><p>The former homeland security department chief of staff, <a href=\"https:\/\/twitter.com\/Haleaziz\/status\/1310983880187412480\">Miles Taylor, said<\/a> this wishlist was reserved for the second term because it included policies that were too unpopular for a president seeking re-election.<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/stephen-miller-trump-second-term-immigration-blitz\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/28\/stephen-miller-trump-second-term-immigration-blitz","date":625558535},{"title":"We thought Reagan was the devil – then came Trump. America, we're rooting for you | Ian Martin","content":"<p>Veep writer Ian Martin once raged against the Gipper. Forty years later, the US is saddled with a human cronut<\/p><p>Dear America,<\/p><p>HEY! How you guys doing? Longtime British Americanophile “reaching out” across the Atlantic. I’m here to heart you, USA. I’m like “hope the hurting stops soon” (strong-arm mid-tone emoji).<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/27\/ronald-reagan-vs-donald-trump\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/2020\/oct\/27\/ronald-reagan-vs-donald-trump","date":625554034},{"title":"Angela Merkel outlines new coronavirus restrictions for Germany – video","content":"<p>Germany will impose an emergency month-long lockdown that includes the closure of restaurants, gyms and theatres to reverse a spike in coronavirus cases that risks overwhelming hospitals, the chancellor said on Wednesday<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/germany-set-to-impose-new-coronavirus-rules-amid-record-rise-in-cases\">Germany to impose new coronavirus rules amid record rise in cases<br><\/a><\/li><li><a href=\"https:\/\/www.theguardian.com\/world\/live\/2020\/oct\/28\/coronavirus-live-news-intensive-care-units-in-france-could-reach-extreme-saturation-in-two-weeks\">Coronavirus news - live updates<\/a><\/li><\/ul> <a href=\"https:\/\/www.theguardian.com\/world\/video\/2020\/oct\/28\/angela-merkel-outlines-new-coronavirus-restrictions-for-germany-video\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/video\/2020\/oct\/28\/angela-merkel-outlines-new-coronavirus-restrictions-for-germany-video","date":625606863},{"title":"Protests grow across Muslim world against French president Emmanuel Macron – video report","content":"<p>Demonstrations are growing across the Muslim world against the French president Emmanuel Macron and his perceived attacks on Islam and the prophet Muhammad.<br><\/p><p>In&nbsp;<a href=\"https:\/\/www.theguardian.com\/world\/bangladesh\">Bangladesh<\/a>’s capital, Dhaka, about 40,000 people were involved in a demonstration organised by the country’s largest Islamist party, while protests took place in Pakistan, Palestine, Iran and Afghanistan.<\/p><p>French satirical magazine Charlie Hebdo republished cartoons of Muhammad in September, before the trial of 14 people accused of involvement in a terrorist attack against the publication’s offices in 2015 for publishing the same caricatures.<\/p><p>Macron has defended the publication, <a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/02\/emmanuel-macron-outlines-law-islamic-separatism-france\">pledged to fight ‘Islamist separatists’<\/a> and said his country ‘would not give up cartoons’<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/28\/anger-towards-emmanuel-macron-grows-in-muslim-world\">Anger towards Emmanuel Macron grows in Muslim world<\/a><\/li><\/ul> <a href=\"https:\/\/www.theguardian.com\/world\/video\/2020\/oct\/28\/protests-grow-across-muslim-world-against-french-president-emmanuel-macron-video-report\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/video\/2020\/oct\/28\/protests-grow-across-muslim-world-against-french-president-emmanuel-macron-video-report","date":625588562},{"title":"Italy: people protesting against Covid restrictions clash with riot police in Rome – video","content":"<p>Demonstrations have continued across Italy as hundreds of people gathered to protest against measures imposed by the government to contain the spread of coronavirus. After four days of protests, supporters of the rightwing group Forza Nuova gathered in Piazza del Popolo where they clashed with riot police. The government has introduced a relief package for businesses affected by the restrictions, which include a 6pm curfew for bars and restaurants and the closure of gyms, swimming pools, cinemas and theatres<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/world\/2020\/oct\/27\/italy-to-unveil-lockdown-relief-package-as-protests-continue\">Italy to unveil lockdown relief package as protests continue<\/a><\/li><\/ul> <a href=\"https:\/\/www.theguardian.com\/world\/video\/2020\/oct\/28\/italy-protesters-against-covid-19-restrictions-clash-with-riot-police-in-rome-video\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/world\/video\/2020\/oct\/28\/italy-protesters-against-covid-19-restrictions-clash-with-riot-police-in-rome-video","date":625581076},{"title":"‘Apologise!’: Rudy Giuliani reacts angrily to questioning in Fox interview fiasco – video","content":"<p>Rudy Giuliani, the personal attorney to&nbsp;<a href=\"https:\/\/www.theguardian.com\/us-news\/donaldtrump\">Donald Trump<\/a>&nbsp;and former mayor of New York city, has been involved in a tense interview on the Fox Business channel during which he threatened to storm out.<\/p><p>Recently embarrassed by&nbsp;<a href=\"https:\/\/www.theguardian.com\/film\/2020\/oct\/21\/rudy-giuliani-faces-questions-after-compromising-scene-in-new-borat-film\">his appearance in a compromising scene the new Borat movie<\/a>, Giuliani was being pressed on the provenance of stories about what is claimed to be Hunter Biden’s laptop.<\/p><p>Host Lisa Kennedy Montgomery suggested that the stories emanating from the ‘found’ laptop and reported by the New York Post were similar to the kind of broad smear that the famed Christopher Steele dossier makes about the president. This angered Giuliani, who said 'You better apologize for that!'<\/p><p>Emails purporting to come from the laptop make the suggestion that a Ukrainian business partner contacted Hunter Biden about setting up a meeting with his father, the Democratic presidential nominee,&nbsp;<a href=\"https:\/\/www.theguardian.com\/us-news\/joebiden\">Joe Biden<\/a>. The laptop and emails have not been independently verified, and the New York Post is yet to produce any evidence that Hunter replied to the email, or that any meeting took place<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/28\/apologise-rudy-giuliani-reacts-angrily-to-questioning-in-fox-interview-fiasco-video\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/28\/apologise-rudy-giuliani-reacts-angrily-to-questioning-in-fox-interview-fiasco-video","date":625569089},{"title":"Trump says Covid numbers 'way down' as US passes 226,000 deaths – video","content":"<p>President Donald Trump says Covid-19 cases in the US are 'way down' despite nearly half a million people contracting the virus in the country over the last seven days, according to a Reuters tally. Speaking one week out from the election at a campaign rally in Wisconsin, Trump made a baseless prediction that the media would say the country was doing 'extremely well' one day after the election<\/p><ul><li><a href=\"https:\/\/www.theguardian.com\/us-news\/live\/2020\/oct\/26\/amy-coney-barrett-supreme-court-vote-confirmation-donald-trump-joe-biden-latest-elections-live-news\">Voter participation poised to soar as more than 70m vote early – live<\/a><\/li><\/ul> <a href=\"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/28\/trump-says-covid-numbers-way-down-as-us-passes-226000-deaths-video\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/28\/trump-says-covid-numbers-way-down-as-us-passes-226000-deaths-video","date":625558052},{"title":"'Let me finish': John Bolton clashes with BBC journalist Emily Maitlis over Trump – video","content":"<p>John Bolton, a former national security adviser to the Trump administration, gets into heated exchanges with BBC Newsnight's Emily Maitlis over why he did not appear at Donald Trump's impeachment trial. He repeatedly tells Maitlis to 'let him finish', and blames House Democrats for empowering Trump when they failed to convict him during the impeachment trial. Maitlis also pressed Bolton on why he worked alongside Trump despite admitting he saw him as corrupt and a threat to American security<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/28\/let-me-finish-john-bolton-clashes-with-bbc-journalist-emily-maitlis-over-trump-video\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/28\/let-me-finish-john-bolton-clashes-with-bbc-journalist-emily-maitlis-over-trump-video","date":625551040},{"title":"Obama mocks Trump: 'He’s jealous of Covid’s media coverage' – video","content":"<p>Former US president Barack Obama mocked Donald Trump at an election rally for Joe Biden in Florida. Obama criticised his successor’s response to the coronavirus pandemic, noting that Trump had complained about the amount of news coverage it had received even as the US death toll continues to climb. 'He’s jealous of Covid’s media coverage,' Obama said.<\/p><p>The former president also criticised Trump for his personal lack of coronavirus safety, saying that he had turned the White House into a 'hot zone' in the wake of two coronavirus outbreaks among the president and his senior staff. 'Florida, we can’t afford four more years of this,' Obama added. 'We cannot afford this kind of incompetence and disinterest.'<\/p> <a href=\"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/27\/obama-mocks-trump-hes-jealous-of-covids-media-coverage-video\">Continue reading...<\/a>","url":"https:\/\/www.theguardian.com\/us-news\/video\/2020\/oct\/27\/obama-mocks-trump-hes-jealous-of-covids-media-coverage-video","date":625520893}],"feedTitle":"World news | The Guardian","feedUrl":"https:\/\/theguardian.com\/world\/rss","feedDate":625620541}]